{
  "project": {
    "name": "Crypto Futures Dashboard",
    "progress": {
      "P2": "95%",
      "P3": "20%"
    }
  },
  "code": {
    "files": [
      {
        "path": "backend\\src\\futuresboard\\app.py",
        "type": ".py",
        "content": "",
        "summary": "175L: from __future__ import annotations\n\nimport json\nimport logging\nimport pathlib\nimport sqlite3\nfrom lo..."
      },
      {
        "path": "backend\\src\\futuresboard\\binance_ws_client.py",
        "type": ".py",
        "content": "aW1wb3J0IGFzeW5jaW8KaW1wb3J0IGpzb24KaW1wb3J0IGFpb2h0dHAKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKCkJJTkFOQ0VfV1NfQkFTRSA9ICJ3c3M6Ly9mc3RyZWFtLmJpbmFuY2UuY29tL3N0cmVhbT9zdHJlYW1zPSIgICMgRm9yIFVTRFMtTSBmdXR1cmVzCgphc3luYyBkZWYgY29ubmVjdF9hbmRfbGlzdGVuKHNlc3Npb246IGFpb2h0dHAuQ2xpZW50U2Vzc2lvbiwgdXJsOiBzdHIsIGhhbmRsZV9tc2cpOgogICAgdHJ5OgogICAgICAgIGFzeW5jIHdpdGggc2Vzc2lvbi53c19jb25uZWN0KHVybCwgaGVhcnRiZWF0PTE1MCkgYXMgd3M6ICAjIEFkanVzdGVkIGhlYXJ0YmVhdAogICAgICAgICAgICBwcmludCgiQ29ubmVjdGVkIHRvIiwgdXJsKQogICAgICAgICAgICBhc3luYyBmb3IgbXNnIGluIHdzOgogICAgICAgICAgICAgICAgaWYgbXNnLnR5cGUgPT0gYWlvaHR0cC5XU01zZ1R5cGUuVEVYVDoKICAgICAgICAgICAgICAgICAgICBkYXRhID0ganNvbi5sb2Fkcyhtc2cuZGF0YSkKICAgICAgICAgICAgICAgICAgICBhd2FpdCBoYW5kbGVfbXNnKGRhdGEpCiAgICAgICAgICAgICAgICBlbGlmIG1zZy50eXBlID09IGFpb2h0dHAuV1NNc2dUeXBlLlBJTkc6CiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd3MucG9uZygpCiAgICAgICAgICAgICAgICBlbGlmIG1zZy50eXBlID09IGFpb2h0dHAuV1NNc2dUeXBlLkVSUk9SOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJXUyBFcnJvcjoiLCBtc2cpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgIGV4Y2VwdCBhaW9odHRwLkNsaWVudEVycm9yIGFzIGU6CiAgICAgICAgcHJpbnQoIkNvbm5lY3Rpb24gZXJyb3I6IiwgZSkKICAgICAgICBhd2FpdCBhc3luY2lvLnNsZWVwKDUpICAjIFNpbXBsZSBiYWNrb2ZmIGFsdGVybmF0aXZlCgphc3luYyBkZWYgYnVpbGRfY29tYmluZWRfc3RyZWFtKHBhaXJfc3RyZWFtczogTGlzdFtzdHJdKSAtPiBzdHI6CiAgICByZXR1cm4gQklOQU5DRV9XU19CQVNFICsgIi8iLmpvaW4ocGFpcl9zdHJlYW1zKQoKYXN5bmMgZGVmIGhhbmRsZV9tZXNzYWdlKGRhdGEpOgogICAgIyBFeGFtcGxlOiBFeHRyYWN0IG1hcmtQcmljZSwgT0kgaWYgc3Vic2NyaWJlZAogICAgc3RyZWFtID0gZGF0YVsic3RyZWFtIl0KICAgIGlmICJtYXJrUHJpY2UiIGluIHN0cmVhbToKICAgICAgICBwcmludCgiTWFyayBQcmljZSBVcGRhdGU6IiwgZGF0YVsiZGF0YSJdWyJwIl0pICAjIFByaWNlCiAgICAjIFB1c2ggdG8gcXVldWUvREIgaGVyZQoKYXN5bmMgZGVmIHN0YXJ0X3N0cmVhbV93b3JrZXIocGFpcnM6IExpc3Rbc3RyXSk6CiAgICBzdHJlYW1zID0gW2Yie3AubG93ZXIoKX1AbWFya1ByaWNlQDFzIiBmb3IgcCBpbiBwYWlyc10gICMgMXMgdXBkYXRlcwogICAgc3RyZWFtcyArPSBbZiJ7cC5sb3dlcigpfUBvcGVuSW50ZXJlc3RAMWgiIGZvciBwIGluIHBhaXJzXSAgIyBPSSBob3VybHkKICAgIHVybCA9IGF3YWl0IGJ1aWxkX2NvbWJpbmVkX3N0cmVhbShzdHJlYW1zKQogICAgYXN5bmMgd2l0aCBhaW9odHRwLkNsaWVudFNlc3Npb24oKSBhcyBzZXNzaW9uOgogICAgICAgIHdoaWxlIFRydWU6ICAjIFJlY29ubmVjdCBsb29wCiAgICAgICAgICAgIGF3YWl0IGNvbm5lY3RfYW5kX2xpc3RlbihzZXNzaW9uLCB1cmwsIGhhbmRsZV9tZXNzYWdlKQogICAgICAgICAgICBhd2FpdCBhc3luY2lvLnNsZWVwKDUpICAjIEJhY2tvZmYKCiMgRXhhbXBsZSBydW4gKGluIGZ1dHVyZXNib2FyZDogY2FsbCBpbiB0aHJlYWQpCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBwYWlycyA9IFsiQlRDVVNEVCIsICJFVEhVU0RUIiwgIlNPTFVTRFQiXQogICAgYXN5bmNpby5ydW4oc3RhcnRfc3RyZWFtX3dvcmtlcihwYWlycykp",
        "summary": "47L: import asyncio\nimport json\nimport aiohttp\nfrom typing import List\n\nBINANCE_WS_BASE = \"wss://fstream...."
      },
      {
        "path": "backend\\src\\futuresboard\\cli.py",
        "type": ".py",
        "content": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBsb2dnaW5nCmltcG9ydCBwYXRobGliCmltcG9ydCBzeXMKaW1wb3J0IG9zICAjIEZvciBzdHIoKSBjb21wYXQgaWYgbmVlZGVkCmltcG9ydCB0cmFjZWJhY2sgICMgRm9yIGVycm9yIHByaW50CgppbXBvcnQgZnV0dXJlc2JvYXJkLmFwcAppbXBvcnQgZnV0dXJlc2JvYXJkLnNjcmFwZXIKZnJvbSBmdXR1cmVzYm9hcmQgaW1wb3J0IF9fdmVyc2lvbl9fICAjIHR5cGU6IGlnbm9yZVthdHRyLWRlZmluZWRdCmZyb20gZnV0dXJlc2JvYXJkLmNvbmZpZyBpbXBvcnQgQ29uZmlnCmZyb20gZG90ZW52IGltcG9ydCBsb2FkX2RvdGVudiAgIyBFeHBsaWNpdCAuZW52IGxvYWQKCmxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmRlZiBtYWluKCk6CiAgICBwcmludCgiQ0xJIExvYWRlZDogU3RhcnRpbmcgbWFpbigpIikgICMgRGVidWc6IENvbmZpcm1zIGVudHJ5CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihwcm9nPSJmdXR1cmVzYm9hcmQiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS12ZXJzaW9uIiwgYWN0aW9uPSJ2ZXJzaW9uIiwgdmVyc2lvbj1mIiUocHJvZylzIHtfX3ZlcnNpb25fX30iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLWMiLAogICAgICAgICItLWNvbmZpZy1kaXIiLAogICAgICAgIHR5cGU9cGF0aGxpYi5QYXRoLAogICAgICAgIGRlZmF1bHQ9Tm9uZSwKICAgICAgICBoZWxwPSJQYXRoIHRvIGNvbmZpZ3VyYXRpb24gZGlyZWN0b3J5LiBEZWZhdWx0cyB0byB0aGUgYGNvbmZpZy9gIHN1Yi1kaXJlY3Rvcnkgb24gdGhlIGN1cnJlbnQgZGlyZWN0b3J5IiwKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tc2NyYXBlLW9ubHkiLCBkZWZhdWx0PUZhbHNlLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJSdW4gb25seSB0aGUgc2NyYXBlciBjb2RlIgogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1kaXNhYmxlLWF1dG8tc2NyYXBlciIsCiAgICAgICAgZGVmYXVsdD1GYWxzZSwKICAgICAgICBhY3Rpb249InN0b3JlX3RydWUiLAogICAgICAgIGhlbHA9IkRpc2FibGUgdGhlIHJvdXRpbmVzIHdoaWNoIHNjcmFwZSB3aGlsZSB0aGUgd2Vic2VydmljZSBpcyBydW5uaW5nIiwKICAgICkKICAgIHNlcnZlcl9zZXR0aW5ncyA9IHBhcnNlci5hZGRfYXJndW1lbnRfZ3JvdXAoIlNlcnZlciBTZXR0aW5ncyIpCiAgICBzZXJ2ZXJfc2V0dGluZ3MuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWhvc3QiLAogICAgICAgIGRlZmF1bHQ9JzAuMC4wLjAnLAogICAgICAgIGhlbHA9IlNlcnZlciBob3N0LiBEZWZhdWx0OiAwLjAuMC4wIiwKICAgICAgICB0eXBlPXN0ciwgICMgU3RyIGZvciBhcmdwYXJzZSAodjEgY29tcGF0KQogICAgKQogICAgc2VydmVyX3NldHRpbmdzLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1wb3J0IiwgdHlwZT1pbnQsIGRlZmF1bHQ9Tm9uZSwgaGVscD0iU2VydmVyIHBvcnQuIERlZmF1bHQ6IDUwMDAiCiAgICApCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIHByaW50KGYiQXJncyBwYXJzZWQ6IGNvbmZpZ19kaXI9e2FyZ3MuY29uZmlnX2Rpcn0sIHBvcnQ9e2FyZ3MucG9ydH0sIHNjcmFwZV9vbmx5PXthcmdzLnNjcmFwZV9vbmx5fSIpICAjIERlYnVnOiBBcmdwYXJzZSBPSz8KCiAgICAjIERlZmF1bHQgY29uZmlnX2RpciB0byByb290L2NvbmZpZyAoYmFja2VuZC8gLT4gLi4vY29uZmlnIGZvciBqc29uL2RiKQogICAgaWYgYXJncy5jb25maWdfZGlyIGlzIE5vbmU6CiAgICAgICAgYXJncy5jb25maWdfZGlyID0gcGF0aGxpYi5QYXRoLmN3ZCgpLnBhcmVudCAvICJjb25maWciCiAgICBlbHNlOgogICAgICAgIGFyZ3MuY29uZmlnX2RpciA9IGFyZ3MuY29uZmlnX2Rpci5yZXNvbHZlKCkKCiAgICBwcmludChmIlJlc29sdmVkIGNvbmZpZ19kaXI6IHthcmdzLmNvbmZpZ19kaXJ9IChleGlzdHM/IHthcmdzLmNvbmZpZ19kaXIuZXhpc3RzKCl9KSIpICAjIERlYnVnOiBQYXRoIGNoZWNrCgogICAgIyAuZW52IGxvYWQgZnJvbSBiYWNrZW5kLyAoY3dkPWJhY2tlbmQsIHNlbGYpCiAgICBiYWNrZW5kX2RpciA9IHBhdGhsaWIuUGF0aC5jd2QoKQogICAgZG90ZW52X3BhdGggPSBiYWNrZW5kX2RpciAvICIuZW52IgogICAgbG9hZF9kb3RlbnYoZG90ZW52X3BhdGg9c3RyKGRvdGVudl9wYXRoKSkKICAgICMgRGVidWcgcHJpbnQ6IENvbmZpcm0gbG9hZCBiZWZvcmUgQ29uZmlnCiAgICBwcmludChmIkRlYnVnOiBMb2FkZWQgQVBJX0tFWSBmcm9tIC5lbnY6IHtvcy5nZXRlbnYoJ0FQSV9LRVknKVs6MTBdICsgJy4uLicgaWYgb3MuZ2V0ZW52KCdBUElfS0VZJykgZWxzZSAnTUlTU0lORyd9IikKICAgIHByaW50KGYiRGVidWc6IC5lbnYgcGF0aCByZXNvbHZlZDoge2RvdGVudl9wYXRoLnJlc29sdmUoKX0gKGV4aXN0cz8ge2RvdGVudl9wYXRoLmV4aXN0cygpfSkiKQoKICAgIHByaW50KCJQcmUtQ29uZmlnOiBBYm91dCB0byBjYWxsIGZyb21fY29uZmlnX2Rpci4uLiIpICAjIERlYnVnOiBCZWZvcmUgY2FsbAogICAgdHJ5OgogICAgICAgIGNvbmZpZyA9IENvbmZpZy5mcm9tX2NvbmZpZ19kaXIoYXJncy5jb25maWdfZGlyKQogICAgICAgIHByaW50KCJQb3N0LUNvbmZpZzogQ29uZmlnIGxvYWRlZCBPSyEiKSAgIyBJZiByZWFjaGVzLCB2YWxpZGF0aW9uIHBhc3NlZAogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiQ29uZmlnIEVycm9yOiB7ZX0iKQogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQogICAgICAgIHN5cy5leGl0KDEpCiAgICBpZiBub3QgYXJncy5ob3N0OgogICAgICAgIGFyZ3MuaG9zdCA9IGNvbmZpZy5IT1NUCiAgICBpZiBub3QgYXJncy5wb3J0OgogICAgICAgIGFyZ3MucG9ydCA9IGNvbmZpZy5QT1JUCgogICAgIyBSdW4gdGhlIGFwcGxpY2F0aW9uCiAgICB0cnk6CiAgICAgICAgYXBwID0gZnV0dXJlc2JvYXJkLmFwcC5pbml0X2FwcChjb25maWcpCiAgICAgICAgcHJpbnQoIkluaXQgQXBwIE9LISIpICAjIENvbmZpcm1zIGluaXRfYXBwIChEQi9ibHVlcHJpbnQvc2NyYXBlciBzZXR1cCkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChmIkluaXQgQXBwIEVycm9yOiB7ZX0iKQogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgYXJncy5zY3JhcGVfb25seToKICAgICAgICB3aXRoIGFwcC5hcHBfY29udGV4dCgpOgogICAgICAgICAgICBmdXR1cmVzYm9hcmQuc2NyYXBlci5zY3JhcGUoKQogICAgICAgIHN5cy5leGl0KDApCgogICAgYXBwLnJ1bihob3N0PWFyZ3MuaG9zdCwgcG9ydD1hcmdzLnBvcnQpICAjIERpcmVjdCBzdHIgaG9zdAoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBtYWluKCk=",
        "summary": "100L: from __future__ import annotations\n\nimport argparse\nimport logging\nimport pathlib\nimport sys\nimport ..."
      },
      {
        "path": "backend\\src\\futuresboard\\config.py",
        "type": ".py",
        "content": "",
        "summary": "170L: from __future__ import annotations\n\nimport copy\nimport enum\nimport json\nimport pathlib\nfrom typing i..."
      },
      {
        "path": "backend\\src\\futuresboard\\db.py",
        "type": ".py",
        "content": "",
        "summary": "326L: from __future__ import annotations\n\nimport sqlite3\nimport os\nimport random  # For timestamp jitter i..."
      },
      {
        "path": "backend\\src\\futuresboard\\metrics.py",
        "type": ".py",
        "content": "",
        "summary": "388L: import ccxt.async_support as ccxt_async\nimport asyncio\nimport aiohttp\nfrom flask import Blueprint, r..."
      },
      {
        "path": "backend\\src\\futuresboard\\scraper.py",
        "type": ".py",
        "content": "",
        "summary": "901L: from __future__ import annotations\n\nimport hashlib\nimport hmac\nimport sqlite3\nimport threading\nimpor..."
      },
      {
        "path": "backend\\src\\futuresboard\\utils.py",
        "type": ".py",
        "content": "aW1wb3J0IHJlcXVlc3RzCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IE9yZGVyZWREaWN0CmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxlbmNvZGUKZnJvbSBmbGFzayBpbXBvcnQgY3VycmVudF9hcHAKCmRlZiBzZW5kX3B1YmxpY19yZXF1ZXN0KHVybF9wYXRoLCBwYXlsb2FkPXt9LCBhcGlfYmFzZT1Ob25lKToKICAgICIiIlB1YmxpYyBBUEkgcmVxdWVzdCB3aXRoIG9wdGlvbmFsIGJhc2UgVVJMIChkZWZhdWx0IGZhcGkpLiIiIgogICAgYmFzZSA9IGFwaV9iYXNlIG9yIGN1cnJlbnRfYXBwLmNvbmZpZy5nZXQoJ0FQSV9CQVNFX1VSTCcsICdodHRwczovL2ZhcGkuYmluYW5jZS5jb20nKQogICAgcXVlcnlfc3RyaW5nID0gdXJsZW5jb2RlKHBheWxvYWQsIFRydWUpCiAgICB1cmwgPSBiYXNlICsgdXJsX3BhdGgKICAgIGlmIHF1ZXJ5X3N0cmluZzoKICAgICAgICB1cmwgPSB1cmwgKyAiPyIgKyBxdWVyeV9zdHJpbmcKICAgIHRyeToKICAgICAgICBzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgc2Vzc2lvbi5oZWFkZXJzLnVwZGF0ZSh7IkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgifSkKICAgICAgICByZXNwb25zZSA9IHNlc3Npb24uZ2V0KHVybCkKICAgICAgICBwcmludChmIkRFQlVHIEFQSToge3VybH0gLSBTdGF0dXM6IHtyZXNwb25zZS5zdGF0dXNfY29kZX0iKSAgIyBLZWVwIGRlYnVnCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOgogICAgICAgICAgICBwcmludChmIk5vbi0yMDAgc3RhdHVzIGZvciB7dXJsfToge3Jlc3BvbnNlLnRleHRbOjEwMF19IikKICAgICAgICAgICAgcmV0dXJuIHt9LCBbXSAgIyBGYWxsYmFjawogICAgICAgIAogICAgICAgIGlmIG5vdCByZXNwb25zZS50ZXh0LnN0cmlwKCk6CiAgICAgICAgICAgIHByaW50KGYiRW1wdHkgcmVzcG9uc2UgZm9yIHt1cmx9IikKICAgICAgICAgICAgcmV0dXJuIHt9LCBbXQogICAgICAgIAogICAgICAgICMgRGV0ZWN0IEhUTUwgZXJyb3IgcGFnZQogICAgICAgIGlmIHJlc3BvbnNlLnRleHQuc3RhcnRzd2l0aCgnPCFET0NUWVBFJykgb3IgJ2JpbmFuY2UuY29tL2VuL2Vycm9yJyBpbiByZXNwb25zZS50ZXh0Lmxvd2VyKCk6CiAgICAgICAgICAgIHByaW50KGYiSFRNTCBlcnJvciBwYWdlIGZvciB7dXJsfTogUmVnaW9uYWwgYmxvY2sgb3IgaW52YWxpZCBhY2Nlc3MuIEZhbGxiYWNrIGVtcHR5LiIpCiAgICAgICAgICAgIHJldHVybiB7fSwgW10KICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIGpzb25fcmVzcG9uc2UgPSByZXNwb25zZS5qc29uKCkKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5KU09ORGVjb2RlRXJyb3IgYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJOb24tSlNPTiByZXNwb25zZSBmb3Ige3VybH06IHtyZXNwb25zZS50ZXh0WzoyMDBdfSIpCiAgICAgICAgICAgIGpzb25fcmVzcG9uc2UgPSBbXSAgIyBGYWxsYmFjayBlbXB0eSBsaXN0CiAgICAgICAgCiAgICAgICAgaWYgImNvZGUiIGluIGpzb25fcmVzcG9uc2UgYW5kIGpzb25fcmVzcG9uc2VbImNvZGUiXSA8IDA6CiAgICAgICAgICAgIHByaW50KGYiQVBJIGVycm9yIGZvciB7dXJsfToge2pzb25fcmVzcG9uc2VbJ21zZyddfSIpCiAgICAgICAgICAgIHJldHVybiB7fSwgW10KICAgICAgICAKICAgICAgICByZXR1cm4gcmVzcG9uc2UuaGVhZGVycywganNvbl9yZXNwb25zZQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yIGFzIGU6CiAgICAgICAgcHJpbnQoZiJDb25uZWN0aW9uIGVycm9yIGZvciB7dXJsfToge2V9IikKICAgICAgICByZXR1cm4ge30sIFtdCgpkZWYgaGFzaGluZyhxdWVyeV9zdHJpbmcsIGV4Y2hhbmdlPSJiaW5hbmNlIiwgdGltZXN0YW1wPU5vbmUpOgogICAgIiIiU2lnbmF0dXJlIGhhc2hpbmcgKGZyb20gc2NyYXBlci5weSkuIiIiCiAgICBpbXBvcnQgaG1hYwogICAgaW1wb3J0IGhhc2hsaWIKICAgIGlmIGV4Y2hhbmdlID09ICJieWJpdCI6CiAgICAgICAgcXVlcnlfc3RyaW5nID0gZiJ7dGltZXN0YW1wfXtjdXJyZW50X2FwcC5jb25maWdbJ0FQSV9LRVknXX01MDAwIiArIHF1ZXJ5X3N0cmluZwogICAgICAgIHJldHVybiBobWFjLm5ldygKICAgICAgICAgICAgYnl0ZXMoY3VycmVudF9hcHAuY29uZmlnWyJBUElfU0VDUkVUIl0uZW5jb2RlKCJ1dGYtOCIpKSwKICAgICAgICAgICAgcXVlcnlfc3RyaW5nLmVuY29kZSgidXRmLTgiKSwKICAgICAgICAgICAgaGFzaGxpYi5zaGEyNTYsCiAgICAgICAgKS5oZXhkaWdlc3QoKQogICAgcmV0dXJuIGhtYWMubmV3KAogICAgICAgIGJ5dGVzKGN1cnJlbnRfYXBwLmNvbmZpZ1siQVBJX1NFQ1JFVCJdLmVuY29kZSgidXRmLTgiKSksCiAgICAgICAgcXVlcnlfc3RyaW5nLmVuY29kZSgidXRmLTgiKSwKICAgICAgICBoYXNobGliLnNoYTI1NiwKICAgICkuaGV4ZGlnZXN0KCk=",
        "summary": "61L: import requests\nfrom collections import OrderedDict\nfrom urllib.parse import urlencode\nfrom flask im..."
      },
      {
        "path": "backend\\src\\futuresboard\\version.py",
        "type": ".py",
        "content": "IyBweWxpbnQ6IHNraXAtZmlsZQoKX192ZXJzaW9uX18gPSAiMC4zLjQuZGV2MCtnNTcxMzdkNGU4LmQyMDI1MTAxNiI=",
        "summary": "3L: # pylint: skip-file\n\n__version__ = \"0.3.4.dev0+g57137d4e8.d20251016\"..."
      },
      {
        "path": "backend\\src\\futuresboard\\wsgi.py",
        "type": ".py",
        "content": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKaW1wb3J0IGZ1dHVyZXNib2FyZC5hcHAKCgphcHAgPSBmdXR1cmVzYm9hcmQuYXBwLmluaXRfYXBwKCkK",
        "summary": "6L: from __future__ import annotations\n\nimport futuresboard.app\n\n\napp = futuresboard.app.init_app()\n..."
      }
    ]
  }
}