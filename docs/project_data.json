{
  "project": {
    "name": "Crypto Futures Dashboard",
    "progress": {
      "P2": "95%",
      "P3": "20%"
    }
  },
  "code": {
    "files": [
      {
        "path": "backend\\src\\futuresboard\\app.py",
        "type": ".py",
        "size_kb": 12.4,
        "content": "",
        "summary": "334L | app.py | .py | 12.4 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\binance_ws_client.py",
        "type": ".py",
        "size_kb": 1.9,
        "content": "aW1wb3J0IGFzeW5jaW8KaW1wb3J0IGpzb24KaW1wb3J0IGFpb2h0dHAKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKCkJJTkFOQ0VfV1NfQkFTRSA9ICJ3c3M6Ly9mc3RyZWFtLmJpbmFuY2UuY29tL3N0cmVhbT9zdHJlYW1zPSIgICMgRm9yIFVTRFMtTSBmdXR1cmVzCgphc3luYyBkZWYgY29ubmVjdF9hbmRfbGlzdGVuKHNlc3Npb246IGFpb2h0dHAuQ2xpZW50U2Vzc2lvbiwgdXJsOiBzdHIsIGhhbmRsZV9tc2cpOgogICAgdHJ5OgogICAgICAgIGFzeW5jIHdpdGggc2Vzc2lvbi53c19jb25uZWN0KHVybCwgaGVhcnRiZWF0PTE1MCkgYXMgd3M6ICAjIEFkanVzdGVkIGhlYXJ0YmVhdAogICAgICAgICAgICBwcmludCgiQ29ubmVjdGVkIHRvIiwgdXJsKQogICAgICAgICAgICBhc3luYyBmb3IgbXNnIGluIHdzOgogICAgICAgICAgICAgICAgaWYgbXNnLnR5cGUgPT0gYWlvaHR0cC5XU01zZ1R5cGUuVEVYVDoKICAgICAgICAgICAgICAgICAgICBkYXRhID0ganNvbi5sb2Fkcyhtc2cuZGF0YSkKICAgICAgICAgICAgICAgICAgICBhd2FpdCBoYW5kbGVfbXNnKGRhdGEpCiAgICAgICAgICAgICAgICBlbGlmIG1zZy50eXBlID09IGFpb2h0dHAuV1NNc2dUeXBlLlBJTkc6CiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd3MucG9uZygpCiAgICAgICAgICAgICAgICBlbGlmIG1zZy50eXBlID09IGFpb2h0dHAuV1NNc2dUeXBlLkVSUk9SOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJXUyBFcnJvcjoiLCBtc2cpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgIGV4Y2VwdCBhaW9odHRwLkNsaWVudEVycm9yIGFzIGU6CiAgICAgICAgcHJpbnQoIkNvbm5lY3Rpb24gZXJyb3I6IiwgZSkKICAgICAgICBhd2FpdCBhc3luY2lvLnNsZWVwKDUpICAjIFNpbXBsZSBiYWNrb2ZmIGFsdGVybmF0aXZlCgphc3luYyBkZWYgYnVpbGRfY29tYmluZWRfc3RyZWFtKHBhaXJfc3RyZWFtczogTGlzdFtzdHJdKSAtPiBzdHI6CiAgICByZXR1cm4gQklOQU5DRV9XU19CQVNFICsgIi8iLmpvaW4ocGFpcl9zdHJlYW1zKQoKYXN5bmMgZGVmIGhhbmRsZV9tZXNzYWdlKGRhdGEpOgogICAgIyBFeGFtcGxlOiBFeHRyYWN0IG1hcmtQcmljZSwgT0kgaWYgc3Vic2NyaWJlZAogICAgc3RyZWFtID0gZGF0YVsic3RyZWFtIl0KICAgIGlmICJtYXJrUHJpY2UiIGluIHN0cmVhbToKICAgICAgICBwcmludCgiTWFyayBQcmljZSBVcGRhdGU6IiwgZGF0YVsiZGF0YSJdWyJwIl0pICAjIFByaWNlCiAgICAjIFB1c2ggdG8gcXVldWUvREIgaGVyZQoKYXN5bmMgZGVmIHN0YXJ0X3N0cmVhbV93b3JrZXIocGFpcnM6IExpc3Rbc3RyXSk6CiAgICBzdHJlYW1zID0gW2Yie3AubG93ZXIoKX1AbWFya1ByaWNlQDFzIiBmb3IgcCBpbiBwYWlyc10gICMgMXMgdXBkYXRlcwogICAgc3RyZWFtcyArPSBbZiJ7cC5sb3dlcigpfUBvcGVuSW50ZXJlc3RAMWgiIGZvciBwIGluIHBhaXJzXSAgIyBPSSBob3VybHkKICAgIHVybCA9IGF3YWl0IGJ1aWxkX2NvbWJpbmVkX3N0cmVhbShzdHJlYW1zKQogICAgYXN5bmMgd2l0aCBhaW9odHRwLkNsaWVudFNlc3Npb24oKSBhcyBzZXNzaW9uOgogICAgICAgIHdoaWxlIFRydWU6ICAjIFJlY29ubmVjdCBsb29wCiAgICAgICAgICAgIGF3YWl0IGNvbm5lY3RfYW5kX2xpc3RlbihzZXNzaW9uLCB1cmwsIGhhbmRsZV9tZXNzYWdlKQogICAgICAgICAgICBhd2FpdCBhc3luY2lvLnNsZWVwKDUpICAjIEJhY2tvZmYKCiMgRXhhbXBsZSBydW4gKGluIGZ1dHVyZXNib2FyZDogY2FsbCBpbiB0aHJlYWQpCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBwYWlycyA9IFsiQlRDVVNEVCIsICJFVEhVU0RUIiwgIlNPTFVTRFQiXQogICAgYXN5bmNpby5ydW4oc3RhcnRfc3RyZWFtX3dvcmtlcihwYWlycykp",
        "summary": "47L | binance_ws_client.py | .py | 1.9 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\blueprint.py",
        "type": ".py",
        "size_kb": 50.2,
        "content": "",
        "summary": "1426L | blueprint.py | .py | 50.2 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\cli.py",
        "type": ".py",
        "size_kb": 3.5,
        "content": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBsb2dnaW5nCmltcG9ydCBwYXRobGliCmltcG9ydCBzeXMKaW1wb3J0IG9zICAjIEZvciBzdHIoKSBjb21wYXQgaWYgbmVlZGVkCmltcG9ydCB0cmFjZWJhY2sgICMgRm9yIGVycm9yIHByaW50CgppbXBvcnQgZnV0dXJlc2JvYXJkLmFwcAppbXBvcnQgZnV0dXJlc2JvYXJkLnNjcmFwZXIKZnJvbSBmdXR1cmVzYm9hcmQgaW1wb3J0IF9fdmVyc2lvbl9fICAjIHR5cGU6IGlnbm9yZVthdHRyLWRlZmluZWRdCmZyb20gZnV0dXJlc2JvYXJkLmNvbmZpZyBpbXBvcnQgQ29uZmlnCmZyb20gZG90ZW52IGltcG9ydCBsb2FkX2RvdGVudiAgIyBFeHBsaWNpdCAuZW52IGxvYWQKCmxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmRlZiBtYWluKCk6CiAgICBwcmludCgiQ0xJIExvYWRlZDogU3RhcnRpbmcgbWFpbigpIikgICMgRGVidWc6IENvbmZpcm1zIGVudHJ5CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihwcm9nPSJmdXR1cmVzYm9hcmQiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS12ZXJzaW9uIiwgYWN0aW9uPSJ2ZXJzaW9uIiwgdmVyc2lvbj1mIiUocHJvZylzIHtfX3ZlcnNpb25fX30iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLWMiLAogICAgICAgICItLWNvbmZpZy1kaXIiLAogICAgICAgIHR5cGU9cGF0aGxpYi5QYXRoLAogICAgICAgIGRlZmF1bHQ9Tm9uZSwKICAgICAgICBoZWxwPSJQYXRoIHRvIGNvbmZpZ3VyYXRpb24gZGlyZWN0b3J5LiBEZWZhdWx0cyB0byB0aGUgYGNvbmZpZy9gIHN1Yi1kaXJlY3Rvcnkgb24gdGhlIGN1cnJlbnQgZGlyZWN0b3J5IiwKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tc2NyYXBlLW9ubHkiLCBkZWZhdWx0PUZhbHNlLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJSdW4gb25seSB0aGUgc2NyYXBlciBjb2RlIgogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1kaXNhYmxlLWF1dG8tc2NyYXBlciIsCiAgICAgICAgZGVmYXVsdD1GYWxzZSwKICAgICAgICBhY3Rpb249InN0b3JlX3RydWUiLAogICAgICAgIGhlbHA9IkRpc2FibGUgdGhlIHJvdXRpbmVzIHdoaWNoIHNjcmFwZSB3aGlsZSB0aGUgd2Vic2VydmljZSBpcyBydW5uaW5nIiwKICAgICkKICAgIHNlcnZlcl9zZXR0aW5ncyA9IHBhcnNlci5hZGRfYXJndW1lbnRfZ3JvdXAoIlNlcnZlciBTZXR0aW5ncyIpCiAgICBzZXJ2ZXJfc2V0dGluZ3MuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWhvc3QiLAogICAgICAgIGRlZmF1bHQ9JzAuMC4wLjAnLAogICAgICAgIGhlbHA9IlNlcnZlciBob3N0LiBEZWZhdWx0OiAwLjAuMC4wIiwKICAgICAgICB0eXBlPXN0ciwgICMgU3RyIGZvciBhcmdwYXJzZSAodjEgY29tcGF0KQogICAgKQogICAgc2VydmVyX3NldHRpbmdzLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1wb3J0IiwgdHlwZT1pbnQsIGRlZmF1bHQ9Tm9uZSwgaGVscD0iU2VydmVyIHBvcnQuIERlZmF1bHQ6IDUwMDAiCiAgICApCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIHByaW50KGYiQXJncyBwYXJzZWQ6IGNvbmZpZ19kaXI9e2FyZ3MuY29uZmlnX2Rpcn0sIHBvcnQ9e2FyZ3MucG9ydH0sIHNjcmFwZV9vbmx5PXthcmdzLnNjcmFwZV9vbmx5fSIpICAjIERlYnVnOiBBcmdwYXJzZSBPSz8KCiAgICAjIERlZmF1bHQgY29uZmlnX2RpciB0byByb290L2NvbmZpZyAoYmFja2VuZC8gLT4gLi4vY29uZmlnIGZvciBqc29uL2RiKQogICAgaWYgYXJncy5jb25maWdfZGlyIGlzIE5vbmU6CiAgICAgICAgYXJncy5jb25maWdfZGlyID0gcGF0aGxpYi5QYXRoLmN3ZCgpLnBhcmVudCAvICJjb25maWciCiAgICBlbHNlOgogICAgICAgIGFyZ3MuY29uZmlnX2RpciA9IGFyZ3MuY29uZmlnX2Rpci5yZXNvbHZlKCkKCiAgICBwcmludChmIlJlc29sdmVkIGNvbmZpZ19kaXI6IHthcmdzLmNvbmZpZ19kaXJ9IChleGlzdHM/IHthcmdzLmNvbmZpZ19kaXIuZXhpc3RzKCl9KSIpICAjIERlYnVnOiBQYXRoIGNoZWNrCgogICAgIyAuZW52IGxvYWQgZnJvbSBiYWNrZW5kLyAoY3dkPWJhY2tlbmQsIHNlbGYpCiAgICBiYWNrZW5kX2RpciA9IHBhdGhsaWIuUGF0aC5jd2QoKQogICAgZG90ZW52X3BhdGggPSBiYWNrZW5kX2RpciAvICIuZW52IgogICAgbG9hZF9kb3RlbnYoZG90ZW52X3BhdGg9c3RyKGRvdGVudl9wYXRoKSkKICAgICMgRGVidWcgcHJpbnQ6IENvbmZpcm0gbG9hZCBiZWZvcmUgQ29uZmlnCiAgICBwcmludChmIkRlYnVnOiBMb2FkZWQgQVBJX0tFWSBmcm9tIC5lbnY6IHtvcy5nZXRlbnYoJ0FQSV9LRVknKVs6MTBdICsgJy4uLicgaWYgb3MuZ2V0ZW52KCdBUElfS0VZJykgZWxzZSAnTUlTU0lORyd9IikKICAgIHByaW50KGYiRGVidWc6IC5lbnYgcGF0aCByZXNvbHZlZDoge2RvdGVudl9wYXRoLnJlc29sdmUoKX0gKGV4aXN0cz8ge2RvdGVudl9wYXRoLmV4aXN0cygpfSkiKQoKICAgIHByaW50KCJQcmUtQ29uZmlnOiBBYm91dCB0byBjYWxsIGZyb21fY29uZmlnX2Rpci4uLiIpICAjIERlYnVnOiBCZWZvcmUgY2FsbAogICAgdHJ5OgogICAgICAgIGNvbmZpZyA9IENvbmZpZy5mcm9tX2NvbmZpZ19kaXIoYXJncy5jb25maWdfZGlyKQogICAgICAgIHByaW50KCJQb3N0LUNvbmZpZzogQ29uZmlnIGxvYWRlZCBPSyEiKSAgIyBJZiByZWFjaGVzLCB2YWxpZGF0aW9uIHBhc3NlZAogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiQ29uZmlnIEVycm9yOiB7ZX0iKQogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQogICAgICAgIHN5cy5leGl0KDEpCiAgICBpZiBub3QgYXJncy5ob3N0OgogICAgICAgIGFyZ3MuaG9zdCA9IGNvbmZpZy5IT1NUCiAgICBpZiBub3QgYXJncy5wb3J0OgogICAgICAgIGFyZ3MucG9ydCA9IGNvbmZpZy5QT1JUCgogICAgIyBSdW4gdGhlIGFwcGxpY2F0aW9uCiAgICB0cnk6CiAgICAgICAgYXBwID0gZnV0dXJlc2JvYXJkLmFwcC5pbml0X2FwcChjb25maWcpCiAgICAgICAgcHJpbnQoIkluaXQgQXBwIE9LISIpICAjIENvbmZpcm1zIGluaXRfYXBwIChEQi9ibHVlcHJpbnQvc2NyYXBlciBzZXR1cCkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChmIkluaXQgQXBwIEVycm9yOiB7ZX0iKQogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgYXJncy5zY3JhcGVfb25seToKICAgICAgICB3aXRoIGFwcC5hcHBfY29udGV4dCgpOgogICAgICAgICAgICBmdXR1cmVzYm9hcmQuc2NyYXBlci5zY3JhcGUoKQogICAgICAgIHN5cy5leGl0KDApCgogICAgYXBwLnJ1bihob3N0PWFyZ3MuaG9zdCwgcG9ydD1hcmdzLnBvcnQpICAjIERpcmVjdCBzdHIgaG9zdAoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBtYWluKCk=",
        "summary": "100L | cli.py | .py | 3.5 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\config.py",
        "type": ".py",
        "size_kb": 6.7,
        "content": "",
        "summary": "177L | config.py | .py | 6.7 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\db.py",
        "type": ".py",
        "size_kb": 18.8,
        "content": "IyBiYWNrZW5kL3NyYy9mdXR1cmVzYm9hcmQvZGIucHkKIyAob25seSB0aGUgZnVsbCBmaWxlIGNvbnRlbnQgZm9yIGNsYXJpdHkg4oCUIHBhc3RlIG92ZXIgeW91ciBleGlzdGluZyBkYi5weSkKCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBvcwppbXBvcnQgc3FsaXRlMwppbXBvcnQgcGF0aGxpYgppbXBvcnQgcmFuZG9tCmltcG9ydCB0cmFjZWJhY2sKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YSwgdGltZXpvbmUKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKCmZyb20gZG90ZW52IGltcG9ydCBsb2FkX2RvdGVudgpsb2FkX2RvdGVudigpCgppbXBvcnQgbG9nZ2luZwppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHNxbGl0ZTMKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIEFueQoKZnJvbSBzcWxhbGNoZW15IGltcG9ydCBDb2x1bW4sIEludGVnZXIsIFN0cmluZywgRGF0ZVRpbWUsIEZsb2F0LCBjcmVhdGVfZW5naW5lLCBVbmlxdWVDb25zdHJhaW50CmZyb20gc3FsYWxjaGVteS5vcm0gaW1wb3J0IHNlc3Npb25tYWtlciwgc2NvcGVkX3Nlc3Npb24KZnJvbSBzcWxhbGNoZW15LmV4dC5kZWNsYXJhdGl2ZSBpbXBvcnQgZGVjbGFyYXRpdmVfYmFzZQpmcm9tIHNxbGFsY2hlbXkuZXhjIGltcG9ydCBJbnRlZ3JpdHlFcnJvcgoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoImZ1dHVyZXNib2FyZC5kYiIpCmxvZ2dlci5zZXRMZXZlbChsb2dnaW5nLklORk8pCgpSRVBPX1JPT1QgPSBwYXRobGliLlBhdGgoX19maWxlX18pLnJlc29sdmUoKS5wYXJlbnRzWzJdCkRCX1BBVEggPSBvcy5nZXRlbnYoIkRCX1BBVEgiLCBzdHIoUkVQT19ST09UIC8gImJhY2tlbmQiIC8gInNyYyIgLyAiZnV0dXJlc2JvYXJkIiAvICJmdXR1cmVzLmRiIikpCgojIFNRTEFsY2hlbXkgZW5naW5lIHdpdGggY2hlY2tfc2FtZV90aHJlYWQ9RmFsc2UgZm9yIHRocmVhZHMKZW5naW5lID0gY3JlYXRlX2VuZ2luZShmInNxbGl0ZTovLy97REJfUEFUSH0iLCBlY2hvPUZhbHNlLCBjb25uZWN0X2FyZ3M9eyJjaGVja19zYW1lX3RocmVhZCI6IEZhbHNlfSkKU2Vzc2lvbkxvY2FsID0gc2NvcGVkX3Nlc3Npb24oc2Vzc2lvbm1ha2VyKGJpbmQ9ZW5naW5lLCBhdXRvY29tbWl0PUZhbHNlLCBhdXRvZmx1c2g9RmFsc2UpKQpTZXNzaW9uID0gU2Vzc2lvbkxvY2FsCgpCYXNlID0gZGVjbGFyYXRpdmVfYmFzZSgpCgpjbGFzcyBNZXRyaWMoQmFzZSk6CiAgICBfX3RhYmxlbmFtZV9fID0gIm1ldHJpY3MiCiAgICBpZCA9IENvbHVtbihJbnRlZ2VyLCBwcmltYXJ5X2tleT1UcnVlLCBhdXRvaW5jcmVtZW50PVRydWUpCiAgICBzeW1ib2wgPSBDb2x1bW4oU3RyaW5nLCBudWxsYWJsZT1GYWxzZSkKICAgIHRpbWVmcmFtZSA9IENvbHVtbihTdHJpbmcoMTApLCBkZWZhdWx0PSI1bSIsIG51bGxhYmxlPUZhbHNlKQogICAgdGltZXN0YW1wID0gQ29sdW1uKERhdGVUaW1lLCBkZWZhdWx0PWxhbWJkYTogZGF0ZXRpbWUubm93KHRpbWV6b25lLnV0YykpCiAgICBwcmljZSA9IENvbHVtbihGbG9hdCkKICAgIHByaWNlX2NoYW5nZV8yNGhfcGN0ID0gQ29sdW1uKEZsb2F0KQogICAgdm9sdW1lXzI0aCA9IENvbHVtbihGbG9hdCkKICAgIHZvbHVtZV9jaGFuZ2VfMjRoX3BjdCA9IENvbHVtbihGbG9hdCkKICAgIG1hcmtldF9jYXAgPSBDb2x1bW4oRmxvYXQpCiAgICBvaV91c2QgPSBDb2x1bW4oRmxvYXQpCiAgICBvaV9hYnNfdXNkID0gQ29sdW1uKEZsb2F0KQogICAgb2lfY2hhbmdlXzI0aF9wY3QgPSBDb2x1bW4oRmxvYXQpCiAgICBvaV9jaGFuZ2VfNW1fcGN0ID0gQ29sdW1uKEZsb2F0KQogICAgb2lfY2hhbmdlXzE1bV9wY3QgPSBDb2x1bW4oRmxvYXQpCiAgICBvaV9jaGFuZ2VfMzBtX3BjdCA9IENvbHVtbihGbG9hdCkKICAgIG9pX2NoYW5nZV8xaF9wY3QgPSBDb2x1bW4oRmxvYXQpCiAgICBvaV9kZWx0YV9wY3QgPSBDb2x1bW4oRmxvYXQpCiAgICBwcmljZV9jaGFuZ2VfNW1fcGN0ID0gQ29sdW1uKEZsb2F0KQogICAgcHJpY2VfY2hhbmdlXzE1bV9wY3QgPSBDb2x1bW4oRmxvYXQpCiAgICBwcmljZV9jaGFuZ2VfMzBtX3BjdCA9IENvbHVtbihGbG9hdCkKICAgIHByaWNlX2NoYW5nZV8xaF9wY3QgPSBDb2x1bW4oRmxvYXQpCiAgICBnbG9iYWxfbHNfNW0gPSBDb2x1bW4oRmxvYXQpCiAgICBnbG9iYWxfbHNfMTVtID0gQ29sdW1uKEZsb2F0KQogICAgZ2xvYmFsX2xzXzMwbSA9IENvbHVtbihGbG9hdCkKICAgIGdsb2JhbF9sc18xaCA9IENvbHVtbihGbG9hdCkKICAgIGxvbmdfYWNjb3VudF9wY3QgPSBDb2x1bW4oRmxvYXQpCiAgICBzaG9ydF9hY2NvdW50X3BjdCA9IENvbHVtbihGbG9hdCkKICAgIHRvcF9scyA9IENvbHVtbihGbG9hdCkKICAgIHRvcF9sc19hY2NvdW50cyA9IENvbHVtbihGbG9hdCkKICAgIHRvcF9sc19wb3NpdGlvbnMgPSBDb2x1bW4oRmxvYXQpCiAgICB0b3BfbHNfZGVsdGFfcGN0ID0gQ29sdW1uKEZsb2F0KQogICAgbHNfZGVsdGFfcGN0ID0gQ29sdW1uKEZsb2F0KQogICAgY3ZkID0gQ29sdW1uKEZsb2F0KQogICAgel9scyA9IENvbHVtbihGbG9hdCkKICAgIHpfc2NvcmUgPSBDb2x1bW4oRmxvYXQpCiAgICB6X3RvcF9sc19hY2NvdW50cyA9IENvbHVtbihGbG9hdCkgICAjIE5FVwogICAgel90b3BfbHNfcG9zaXRpb25zID0gQ29sdW1uKEZsb2F0KSAgIyBORVcKICAgIGltYmFsYW5jZSA9IENvbHVtbihGbG9hdCkKICAgIGZ1bmRpbmcgPSBDb2x1bW4oRmxvYXQpCiAgICByc2kgPSBDb2x1bW4oRmxvYXQpCiAgICB2b2xfdXNkID0gQ29sdW1uKEZsb2F0LCBkZWZhdWx0PTAuMCkKICAgIHdlaWdodGVkX29pX3VzZCA9IENvbHVtbihGbG9hdCkgICAgICMgTkVXCiAgICB2cGkgPSBDb2x1bW4oRmxvYXQpICAgICAgICAgICAgICAgICAjIE5FVwogICAgenNjID0gQ29sdW1uKEZsb2F0KSAgICAgICAgICAgICAgICAgIyBORVc6IFotU3RyZW5ndGggQ29tcG9zaXRlCiAgICBsc20gPSBDb2x1bW4oRmxvYXQpICAgICAgICAgICAgICAgICAjIE5FVzogTC9TIG1vbWVudHVtIChzbW9vdGhlZCDOlCkKICAgIF9fdGFibGVfYXJnc19fID0gKFVuaXF1ZUNvbnN0cmFpbnQoInN5bWJvbCIsICJ0aW1lZnJhbWUiLCAidGltZXN0YW1wIiwgbmFtZT0idW5pcXVlX3N5bV90Zl90cyIpLCkKCiMgLS0tIGhlbHBlciBmdW5jdGlvbnMgYW5kIGluaXQgKHVuY2hhbmdlZCBleGNlcHQgYWRkZWQgcHJhZ21hcyAmIHBlci10aW1lZnJhbWUgdGFibGVzKSAtLS0KZGVmIGdldF9kYl9jb25uKCk6CiAgICBjb25uID0gc3FsaXRlMy5jb25uZWN0KERCX1BBVEgsIGRldGVjdF90eXBlcz1zcWxpdGUzLlBBUlNFX0RFQ0xUWVBFUyB8IHNxbGl0ZTMuUEFSU0VfQ09MTkFNRVMpCiAgICByZXR1cm4gY29ubgoKZGVmIGluaXRfYXBwKGFwcD1Ob25lKToKICAgICIiIgogICAgSW5pdGlhbGl6ZSBkYXRhYmFzZTogZW5hYmxlIFdBTCwgY3JlYXRlIHBlci10aW1lZnJhbWUgdGFibGVzLAogICAgZW5zdXJlIGluZGV4ZXMgYW5kIFBSQUdNQSB0dW5pbmcgZm9yIGhpZ2gtZnJlcXVlbmN5IHF1YW50IHdvcmtsb2Fkcy4KICAgICIiIgogICAgcCA9IHBhdGhsaWIuUGF0aChEQl9QQVRIKQogICAgcC5wYXJlbnQubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQoKICAgICMgY3JlYXRlIHRhYmxlcyB2aWEgU1FMQWxjaGVteQogICAgQmFzZS5tZXRhZGF0YS5jcmVhdGVfYWxsKGJpbmQ9ZW5naW5lKQoKICAgIGNvbm4gPSBnZXRfZGJfY29ubigpCiAgICBjdXIgPSBjb25uLmN1cnNvcigpCgogICAgIyA9PT0gUGVyZm9ybWFuY2UgUFJBR01BcyA9PT0KICAgIHByYWdtYXMgPSBbCiAgICAgICAgKCJqb3VybmFsX21vZGUiLCAiV0FMIiksCiAgICAgICAgKCJzeW5jaHJvbm91cyIsICJOT1JNQUwiKSwKICAgICAgICAoInRlbXBfc3RvcmUiLCAiTUVNT1JZIiksCiAgICAgICAgKCJtbWFwX3NpemUiLCAiMjY4NDM1NDU2IiksICAjIDI1Nk1CIG1lbW9yeSBtYXAKICAgICAgICAoImNhY2hlX3NpemUiLCAiLTIwMDAwMCIpLCAgICMgfjIwME1CIGNhY2hlCiAgICBdCiAgICBmb3Iga2V5LCB2YWwgaW4gcHJhZ21hczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1ci5leGVjdXRlKGYiUFJBR01BIHtrZXl9PXt2YWx9OyIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIlBSQUdNQSB7a2V5fSBmYWlsZWQ6IHtlfSIpCgogICAgY29ubi5jb21taXQoKQoKICAgICMgPT09IENyZWF0ZSBtYWluIHRhYmxlID09PQogICAgY3JlYXRlX21ldHJpY3NfdGFibGUoKQoKICAgICMgPT09IENyZWF0ZSBwZXItdGltZWZyYW1lIHRhYmxlcyAoMW0sIDVtLCAxNW0sIDMwbSwgMWgpID09PQogICAgdGZzID0gWyIxbSIsICI1bSIsICIxNW0iLCAiMzBtIiwgIjFoIl0KICAgIGZvciB0ZiBpbiB0ZnM6CiAgICAgICAgdGZfdGFibGUgPSBmIm1ldHJpY3Nfe3RmfSIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1ci5leGVjdXRlKGYiQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMge3RmX3RhYmxlfSBBUyBTRUxFQ1QgKiBGUk9NIG1ldHJpY3MgV0hFUkUgMDsiKQogICAgICAgICAgICBjdXIuZXhlY3V0ZShmIkNSRUFURSBVTklRVUUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfe3RmX3RhYmxlfV9zeW1fdGZfdHMgT04ge3RmX3RhYmxlfShzeW1ib2wsIHRpbWVmcmFtZSwgdGltZXN0YW1wKTsiKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJGYWlsZWQgdG8gY3JlYXRlIHRhYmxlIHt0Zl90YWJsZX06IHtlfSIpCgogICAgIyA9PT0gQWRkIGluZGV4ZXMgZm9yIGZhc3RlciBxdWVyaWVzID09PQogICAgaW5kZXhfY21kcyA9IFsKICAgICAgICAiQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X21ldHJpY3Nfc3ltYm9sX3RpbWVmcmFtZV90cyBPTiBtZXRyaWNzKHN5bWJvbCwgdGltZWZyYW1lLCB0aW1lc3RhbXAgREVTQyk7IiwKICAgICAgICAiQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X21ldHJpY3NfdHMgT04gbWV0cmljcyh0aW1lc3RhbXAgREVTQyk7IiwKICAgICAgICAiQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X21ldHJpY3NfdGZfdHMgT04gbWV0cmljcyh0aW1lZnJhbWUsIHRpbWVzdGFtcCBERVNDKTsiCiAgICBdCiAgICBmb3IgY21kIGluIGluZGV4X2NtZHM6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjdXIuZXhlY3V0ZShjbWQpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkluZGV4IGNyZWF0aW9uIGZhaWxlZDoge2V9IikKCiAgICBjb25uLmNvbW1pdCgpCiAgICBjdXIuY2xvc2UoKQogICAgY29ubi5jbG9zZSgpCgogICAgbG9nZ2VyLmluZm8oZiJbREJdIEluaXRpYWxpemVkIGF0IHtEQl9QQVRIfSB3aXRoIHBlci10aW1lZnJhbWUgdGFibGVzLiIpCiAgICByZXR1cm4gVHJ1ZQoKCmRlZiBjcmVhdGVfbWV0cmljc190YWJsZSgpOgogICAgIiIiSWRlbXBvdGVudCBTUUwgY3JlYXRlICsgYWx0ZXIgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBEQnMiIiIKICAgIGNvbm4gPSBnZXRfZGJfY29ubigpCiAgICBjdXIgPSBjb25uLmN1cnNvcigpCgogICAgY3VyLmV4ZWN1dGUoCiAgICAgICAgIiIiCiAgICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgbWV0cmljcyAoCiAgICAgICAgICAgIGlkIElOVEVHRVIgUFJJTUFSWSBLRVkgQVVUT0lOQ1JFTUVOVCwKICAgICAgICAgICAgc3ltYm9sIFRFWFQgTk9UIE5VTEwsCiAgICAgICAgICAgIHRpbWVmcmFtZSBURVhUIE5PVCBOVUxMIERFRkFVTFQgJzVtJywKICAgICAgICAgICAgcHJpY2UgUkVBTCwKICAgICAgICAgICAgcHJpY2VfY2hhbmdlXzI0aF9wY3QgUkVBTCwKICAgICAgICAgICAgdm9sdW1lXzI0aCBSRUFMLAogICAgICAgICAgICB2b2x1bWVfY2hhbmdlXzI0aF9wY3QgUkVBTCwKICAgICAgICAgICAgbWFya2V0X2NhcCBSRUFMLAogICAgICAgICAgICBvaV91c2QgUkVBTCwKICAgICAgICAgICAgb2lfYWJzX3VzZCBSRUFMLAogICAgICAgICAgICBvaV9jaGFuZ2VfMjRoX3BjdCBSRUFMLAogICAgICAgICAgICBvaV9jaGFuZ2VfNW1fcGN0IFJFQUwsCiAgICAgICAgICAgIG9pX2NoYW5nZV8xNW1fcGN0IFJFQUwsCiAgICAgICAgICAgIG9pX2NoYW5nZV8zMG1fcGN0IFJFQUwsCiAgICAgICAgICAgIG9pX2NoYW5nZV8xaF9wY3QgUkVBTCwKICAgICAgICAgICAgb2lfZGVsdGFfcGN0IFJFQUwsCiAgICAgICAgICAgIHByaWNlX2NoYW5nZV81bV9wY3QgUkVBTCwKICAgICAgICAgICAgcHJpY2VfY2hhbmdlXzE1bV9wY3QgUkVBTCwKICAgICAgICAgICAgcHJpY2VfY2hhbmdlXzMwbV9wY3QgUkVBTCwKICAgICAgICAgICAgcHJpY2VfY2hhbmdlXzFoX3BjdCBSRUFMLAogICAgICAgICAgICBnbG9iYWxfbHNfNW0gUkVBTCwKICAgICAgICAgICAgZ2xvYmFsX2xzXzE1bSBSRUFMLAogICAgICAgICAgICBnbG9iYWxfbHNfMzBtIFJFQUwsCiAgICAgICAgICAgIGdsb2JhbF9sc18xaCBSRUFMLAogICAgICAgICAgICBsb25nX2FjY291bnRfcGN0IFJFQUwsCiAgICAgICAgICAgIHNob3J0X2FjY291bnRfcGN0IFJFQUwsCiAgICAgICAgICAgIHRvcF9scyBSRUFMLAogICAgICAgICAgICB0b3BfbHNfYWNjb3VudHMgUkVBTCwKICAgICAgICAgICAgdG9wX2xzX3Bvc2l0aW9ucyBSRUFMLAogICAgICAgICAgICB0b3BfbHNfZGVsdGFfcGN0IFJFQUwsCiAgICAgICAgICAgIGxzX2RlbHRhX3BjdCBSRUFMLAogICAgICAgICAgICBjdmQgUkVBTCwKICAgICAgICAgICAgel9scyBSRUFMLAogICAgICAgICAgICB6X3Njb3JlIFJFQUwsCiAgICAgICAgICAgIHpfdG9wX2xzX2FjY291bnRzIFJFQUwsCiAgICAgICAgICAgIHpfdG9wX2xzX3Bvc2l0aW9ucyBSRUFMLAogICAgICAgICAgICBpbWJhbGFuY2UgUkVBTCwKICAgICAgICAgICAgZnVuZGluZyBSRUFMLAogICAgICAgICAgICByc2kgUkVBTCwKICAgICAgICAgICAgdm9sX3VzZCBSRUFMIERFRkFVTFQgMC4wLAogICAgICAgICAgICB3ZWlnaHRlZF9vaV91c2QgUkVBTCwKICAgICAgICAgICAgdnBpIFJFQUwsCiAgICAgICAgICAgIHpzYyBSRUFMLAogICAgICAgICAgICBsc20gUkVBTCwKICAgICAgICAgICAgdGltZXN0YW1wIERBVEVUSU1FIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsCiAgICAgICAgICAgIFVOSVFVRShzeW1ib2wsIHRpbWVmcmFtZSwgdGltZXN0YW1wKSBPTiBDT05GTElDVCBSRVBMQUNFCiAgICAgICAgKQogICAgICAgICIiIgogICAgKQogICAgY29ubi5jb21taXQoKQoKICAgICMgRW5zdXJlIG5ldyBjb2x1bW5zIGV4aXN0IGZvciBhZGRlZCBtZXRyaWNzIChzYWZlIHRvIHJlcnVuKQogICAgY29scyA9IFsKICAgICAgICAoInRvcF9sc19kZWx0YV9wY3QiLCAiUkVBTCIpLAogICAgICAgICgid2VpZ2h0ZWRfb2lfdXNkIiwgIlJFQUwiKSwKICAgICAgICAoInZwaSIsICJSRUFMIiksCiAgICAgICAgKCJ6X3RvcF9sc19hY2NvdW50cyIsICJSRUFMIiksCiAgICAgICAgKCJ6X3RvcF9sc19wb3NpdGlvbnMiLCAiUkVBTCIpLAogICAgICAgICgienNjIiwgIlJFQUwiKSwKICAgICAgICAoImxzbSIsICJSRUFMIiksCiAgICBdCiAgICBmb3IgY29sLCB0eXAgaW4gY29sczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1ci5leGVjdXRlKGYiQUxURVIgVEFCTEUgbWV0cmljcyBBREQgQ09MVU1OIHtjb2x9IHt0eXB9OyIpCiAgICAgICAgZXhjZXB0IHNxbGl0ZTMuT3BlcmF0aW9uYWxFcnJvcjoKICAgICAgICAgICAgcGFzcwoKICAgIGNvbm4uY29tbWl0KCkKICAgIGN1ci5jbG9zZSgpCiAgICBjb25uLmNsb3NlKCkKCgojIHNhZmUgZmxvYXQgcGFyc2VyCmRlZiBzYWZlX2Zsb2F0KG0sIGtleSwgZGVmYXVsdD1Ob25lKToKICAgIHZhbCA9IG0uZ2V0KGtleSwgZGVmYXVsdCkKICAgIGlmIHZhbCBpcyBOb25lIG9yIHZhbCA9PSAiTi9BIjoKICAgICAgICByZXR1cm4gTm9uZQogICAgdHJ5OgogICAgICAgIHMgPSBzdHIodmFsKS5yZXBsYWNlKCIkIiwgIiIpLnJlcGxhY2UoIiwiLCAiIikucmVwbGFjZSgiJSIsICIiKQogICAgICAgIHJldHVybiBmbG9hdChzKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXR1cm4gTm9uZQoKZGVmIGNhbGNfcnNpKGNsb3NlcywgcGVyaW9kPTE0KToKICAgICIiIgogICAgQ29tcHV0ZSBSU0kgZm9yIGEgc2VxdWVuY2Ugb2YgY2xvc2luZyBwcmljZXMuCiAgICBVc2VzIHN0YW5kYXJkIFdpbGRlcidzIHNtb290aGluZyBtZXRob2QuCiAgICAiIiIKICAgIGFyciA9IG5wLmFzYXJyYXkoY2xvc2VzLCBkdHlwZT1mbG9hdCkKICAgIGlmIGFyci5zaXplIDwgcGVyaW9kICsgMToKICAgICAgICByZXR1cm4gNTAuMAogICAgZGVsdGFzID0gbnAuZGlmZihhcnIpCiAgICBnYWlucyA9IG5wLndoZXJlKGRlbHRhcyA+IDAsIGRlbHRhcywgMC4wKQogICAgbG9zc2VzID0gbnAud2hlcmUoZGVsdGFzIDwgMCwgLWRlbHRhcywgMC4wKQoKICAgIGF2Z19nYWluID0gbnAubWVhbihnYWluc1s6cGVyaW9kXSkKICAgIGF2Z19sb3NzID0gbnAubWVhbihsb3NzZXNbOnBlcmlvZF0pCgogICAgZm9yIGkgaW4gcmFuZ2UocGVyaW9kLCBsZW4oZGVsdGFzKSk6CiAgICAgICAgYXZnX2dhaW4gPSAoYXZnX2dhaW4gKiAocGVyaW9kIC0gMSkgKyBnYWluc1tpXSkgLyBwZXJpb2QKICAgICAgICBhdmdfbG9zcyA9IChhdmdfbG9zcyAqIChwZXJpb2QgLSAxKSArIGxvc3Nlc1tpXSkgLyBwZXJpb2QKCiAgICBpZiBhdmdfbG9zcyA9PSAwOgogICAgICAgIHJldHVybiAxMDAuMCBpZiBhdmdfZ2FpbiA+IDAgZWxzZSA1MC4wCgogICAgcnMgPSBhdmdfZ2FpbiAvIGF2Z19sb3NzCiAgICByc2kgPSAxMDAgLSAoMTAwIC8gKDEgKyBycykpCiAgICByZXR1cm4gZmxvYXQobnAucm91bmQocnNpLCAyKSkKCgpkZWYgc2F2ZV9tZXRyaWNzX3YzKG1ldHJpY3M6IExpc3RbZGljdF0sIHRpbWVmcmFtZTogc3RyID0gIjVtIikgLT4gaW50OgogICAgIiIiCiAgICBRdWFudC1ncmFkZSB2ZXJzaW9uIG9mIHNhdmVfbWV0cmljcygpOgogICAgQ29tcHV0ZXMgUlNJLCBXZWlnaHRlZCBPSSwgVlBJLCBMUyBhbmQgVG9wLVRyYWRlciBkZWx0YXMgKyBaLXNjb3Jlcy4KICAgIFdyaXRlcyB0byBPUk0gbWV0cmljcyBhbmQgcGVyLXRpbWVmcmFtZSB0YWJsZXMuCiAgICAiIiIKICAgIGlmIG5vdCBtZXRyaWNzOgogICAgICAgIHJldHVybiAwCgogICAgc2Vzc2lvbiA9IFNlc3Npb24oKQogICAgc2F2ZWRfY291bnQgPSAwCiAgICB0cnk6CiAgICAgICAgZm9yIG0gaW4gbWV0cmljczoKICAgICAgICAgICAgaWYgImVycm9yIiBpbiBtOgogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgIG1ldHJpYyA9IE1ldHJpYygpCiAgICAgICAgICAgIG1ldHJpYy5zeW1ib2wgPSBtLmdldCgic3ltYm9sIikKICAgICAgICAgICAgbWV0cmljLnRpbWVmcmFtZSA9IHRpbWVmcmFtZQogICAgICAgICAgICBtZXRyaWMudGltZXN0YW1wID0gZGF0ZXRpbWUubm93KHRpbWV6b25lLnV0YykgKyB0aW1lZGVsdGEobWljcm9zZWNvbmRzPXJhbmRvbS5yYW5kaW50KDAsIDk5OTk5OSkpCiAgICAgICAgICAgIG1ldHJpYy5wcmljZSA9IHNhZmVfZmxvYXQobSwgIlByaWNlIikKICAgICAgICAgICAgbWV0cmljLnZvbF91c2QgPSBzYWZlX2Zsb2F0KG0sICJ2b2xfdXNkIikgb3IgMC4wCiAgICAgICAgICAgIG1ldHJpYy5vaV9hYnNfdXNkID0gc2FmZV9mbG9hdChtLCAib2lfYWJzX3VzZCIpIG9yIDAuMAoKICAgICAgICAgICAgIyAtLS0gT0kgbWV0cmljcyAtLS0KICAgICAgICAgICAgcHJldiA9ICgKICAgICAgICAgICAgICAgIHNlc3Npb24ucXVlcnkoTWV0cmljKQogICAgICAgICAgICAgICAgLmZpbHRlcihNZXRyaWMuc3ltYm9sID09IG1ldHJpYy5zeW1ib2wsIE1ldHJpYy50aW1lZnJhbWUgPT0gdGltZWZyYW1lKQogICAgICAgICAgICAgICAgLm9yZGVyX2J5KE1ldHJpYy50aW1lc3RhbXAuZGVzYygpKQogICAgICAgICAgICAgICAgLmZpcnN0KCkKICAgICAgICAgICAgKQogICAgICAgICAgICBwcmV2X29pID0gcHJldi5vaV9hYnNfdXNkIGlmIHByZXYgYW5kIHByZXYub2lfYWJzX3VzZCBlbHNlIDAuMAogICAgICAgICAgICBwcmV2X2xzID0gZ2V0YXR0cihwcmV2LCBmImdsb2JhbF9sc197dGltZWZyYW1lfSIsIDEuMCkgaWYgcHJldiBlbHNlIDEuMAogICAgICAgICAgICBwcmV2X3RvcF9hY2MgPSBnZXRhdHRyKHByZXYsICJ0b3BfbHNfYWNjb3VudHMiLCAxLjApIGlmIHByZXYgZWxzZSAxLjAKICAgICAgICAgICAgcHJldl90b3BfcG9zID0gZ2V0YXR0cihwcmV2LCAidG9wX2xzX3Bvc2l0aW9ucyIsIDEuMCkgaWYgcHJldiBlbHNlIDEuMAoKICAgICAgICAgICAgY3Vycl9vaSA9IG1ldHJpYy5vaV9hYnNfdXNkIG9yIDAuMAoKICAgICAgICAgICAgbWV0cmljLm9pX2RlbHRhX3BjdCA9ICgoY3Vycl9vaSAtIHByZXZfb2kpIC8gcHJldl9vaSAqIDEwMCkgaWYgcHJldl9vaSA+IDAgZWxzZSAwLjAKCiAgICAgICAgICAgICMgLS0tIEdsb2JhbCBML1MgcmF0aW8gLS0tCiAgICAgICAgICAgIGxzX2tleSA9IGYiZ2xvYmFsX2xzX3t0aW1lZnJhbWV9IgogICAgICAgICAgICBtZXRyaWNfdmFsID0gc2FmZV9mbG9hdChtLCBmIkdsb2JhbF9MU197dGltZWZyYW1lfSIpIG9yIHNhZmVfZmxvYXQobSwgbHNfa2V5KQogICAgICAgICAgICBpZiBtZXRyaWNfdmFsIGlzIG5vdCBOb25lIGFuZCBoYXNhdHRyKG1ldHJpYywgbHNfa2V5KToKICAgICAgICAgICAgICAgIHNldGF0dHIobWV0cmljLCBsc19rZXksIG1ldHJpY192YWwpCiAgICAgICAgICAgIG1ldHJpYy5sc19kZWx0YV9wY3QgPSAoCiAgICAgICAgICAgICAgICAoKG1ldHJpY192YWwgLSBwcmV2X2xzKSAvIHByZXZfbHMgKiAxMDApIGlmIChtZXRyaWNfdmFsIGlzIG5vdCBOb25lIGFuZCBwcmV2X2xzKSBlbHNlIDAuMAogICAgICAgICAgICApCgogICAgICAgICAgICAjIC0tLSBUb3AgdHJhZGVyIHJhdGlvcyAoYWNjb3VudHMgLyBwb3NpdGlvbnMpIC0tLQogICAgICAgICAgICBtZXRyaWMudG9wX2xzX2FjY291bnRzID0gc2FmZV9mbG9hdChtLCAiVG9wX0xTX0FjY291bnRzIikKICAgICAgICAgICAgbWV0cmljLnRvcF9sc19wb3NpdGlvbnMgPSBzYWZlX2Zsb2F0KG0sICJUb3BfTFNfUG9zaXRpb25zIikKICAgICAgICAgICAgbWV0cmljLnRvcF9scyA9IHNhZmVfZmxvYXQobSwgIlRvcF9MUyIpCgogICAgICAgICAgICBpZiBtZXRyaWMudG9wX2xzX2FjY291bnRzIGFuZCBwcmV2X3RvcF9hY2M6CiAgICAgICAgICAgICAgICBtZXRyaWMudG9wX2xzX2RlbHRhX3BjdCA9ICgobWV0cmljLnRvcF9sc19hY2NvdW50cyAtIHByZXZfdG9wX2FjYykgLyBwcmV2X3RvcF9hY2MpICogMTAwCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBtZXRyaWMudG9wX2xzX2RlbHRhX3BjdCA9IDAuMAoKICAgICAgICAgICAgIyAtLS0gUlNJIGNvbXB1dGF0aW9uIGZyb20gbGFzdCBOIHByaWNlcyAtLS0KICAgICAgICAgICAgcmVjZW50ID0gKAogICAgICAgICAgICAgICAgc2Vzc2lvbi5xdWVyeShNZXRyaWMpCiAgICAgICAgICAgICAgICAuZmlsdGVyKE1ldHJpYy5zeW1ib2wgPT0gbWV0cmljLnN5bWJvbCwgTWV0cmljLnRpbWVmcmFtZSA9PSB0aW1lZnJhbWUpCiAgICAgICAgICAgICAgICAub3JkZXJfYnkoTWV0cmljLnRpbWVzdGFtcC5kZXNjKCkpCiAgICAgICAgICAgICAgICAubGltaXQoNTApCiAgICAgICAgICAgICAgICAuYWxsKCkKICAgICAgICAgICAgKQogICAgICAgICAgICBwcmljZXMgPSBbci5wcmljZSBmb3IgciBpbiByZWNlbnQgaWYgci5wcmljZV0KICAgICAgICAgICAgaWYgbWV0cmljLnByaWNlOgogICAgICAgICAgICAgICAgcHJpY2VzLmluc2VydCgwLCBtZXRyaWMucHJpY2UpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG1ldHJpYy5yc2kgPSBjYWxjX3JzaShwcmljZXMsIHBlcmlvZD0xNCkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIG1ldHJpYy5yc2kgPSA1MC4wCgogICAgICAgICAgICAjIC0tLSBXZWlnaHRlZCBPSSBwZXIgc3ltYm9sIChsb2NhbCB3ZWlnaHRpbmcpIC0tLQogICAgICAgICAgICB0b3RhbF92b2wgPSBzdW0oW3Iudm9sX3VzZCBvciAwIGZvciByIGluIHJlY2VudF0pICsgbWV0cmljLnZvbF91c2QKICAgICAgICAgICAgbWV0cmljLndlaWdodGVkX29pX3VzZCA9ICgKICAgICAgICAgICAgICAgIG1ldHJpYy5vaV9hYnNfdXNkICogKG1ldHJpYy52b2xfdXNkIC8gdG90YWxfdm9sKSBpZiB0b3RhbF92b2wgPiAwIGVsc2UgbWV0cmljLm9pX2Fic191c2QKICAgICAgICAgICAgKQoKICAgICAgICAgICAgIyAtLS0gVm9sdW1lIFByZXNzdXJlIEluZGV4IChWUEkpIC0tLQogICAgICAgICAgICBtZXRyaWMudnBpID0gbWV0cmljLnZvbF91c2QgKiAobWV0cmljLm9pX2RlbHRhX3BjdCBvciAwLjApIC8gMTAwLjAKCiAgICAgICAgICAgICMgLS0tIFotc2NvcmUgY29tcHV0YXRpb25zIGZvciBMUyArIFRvcCBUcmFkZXIgbWV0cmljcyAtLS0KICAgICAgICAgICAgbHNfdmFscyA9IFtnZXRhdHRyKHIsIGYiZ2xvYmFsX2xzX3t0aW1lZnJhbWV9IiwgTm9uZSkgZm9yIHIgaW4gcmVjZW50IGlmIGdldGF0dHIociwgZiJnbG9iYWxfbHNfe3RpbWVmcmFtZX0iLCBOb25lKV0KICAgICAgICAgICAgdG9wX2FjY192YWxzID0gW3IudG9wX2xzX2FjY291bnRzIGZvciByIGluIHJlY2VudCBpZiByLnRvcF9sc19hY2NvdW50c10KICAgICAgICAgICAgdG9wX3Bvc192YWxzID0gW3IudG9wX2xzX3Bvc2l0aW9ucyBmb3IgciBpbiByZWNlbnQgaWYgci50b3BfbHNfcG9zaXRpb25zXQoKICAgICAgICAgICAgZGVmIHpfc2NvcmUodmFsLCBhcnIpOgogICAgICAgICAgICAgICAgaWYgbm90IGFyciBvciBsZW4oYXJyKSA8IDM6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuMAogICAgICAgICAgICAgICAgbXUsIHNpZ21hID0gbnAubWVhbihhcnIpLCBucC5zdGQoYXJyKQogICAgICAgICAgICAgICAgcmV0dXJuIGZsb2F0KCh2YWwgLSBtdSkgLyBzaWdtYSkgaWYgc2lnbWEgPiAwIGVsc2UgMC4wCgogICAgICAgICAgICBtZXRyaWMuel9scyA9IHpfc2NvcmUobWV0cmljX3ZhbCBvciAwLjAsIGxzX3ZhbHMpCiAgICAgICAgICAgIG1ldHJpYy56X3Njb3JlID0gbWV0cmljLnpfbHMKICAgICAgICAgICAgbWV0cmljLnpfdG9wX2xzX2FjY291bnRzID0gel9zY29yZShtZXRyaWMudG9wX2xzX2FjY291bnRzIG9yIDAuMCwgdG9wX2FjY192YWxzKQogICAgICAgICAgICBtZXRyaWMuel90b3BfbHNfcG9zaXRpb25zID0gel9zY29yZShtZXRyaWMudG9wX2xzX3Bvc2l0aW9ucyBvciAwLjAsIHRvcF9wb3NfdmFscykKCiAgICAgICAgICAgICMgLS0tIFotU3RyZW5ndGggQ29tcG9zaXRlIChaU0MpOiB3ZWlnaHRlZCBhdmVyYWdlICgwLjUgel9scywgMC4yNSBhY2NvdW50cywgMC4yNSBwb3NpdGlvbnMpIC0tLQogICAgICAgICAgICB6X2NvbXBvbmVudHMgPSBbXQogICAgICAgICAgICB6X3dlaWdodHMgPSBbXQogICAgICAgICAgICBpZiBtZXRyaWMuel9scyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHpfY29tcG9uZW50cy5hcHBlbmQobWV0cmljLnpfbHMpOyB6X3dlaWdodHMuYXBwZW5kKDAuNSkKICAgICAgICAgICAgaWYgbWV0cmljLnpfdG9wX2xzX2FjY291bnRzIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgel9jb21wb25lbnRzLmFwcGVuZChtZXRyaWMuel90b3BfbHNfYWNjb3VudHMpOyB6X3dlaWdodHMuYXBwZW5kKDAuMjUpCiAgICAgICAgICAgIGlmIG1ldHJpYy56X3RvcF9sc19wb3NpdGlvbnMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICB6X2NvbXBvbmVudHMuYXBwZW5kKG1ldHJpYy56X3RvcF9sc19wb3NpdGlvbnMpOyB6X3dlaWdodHMuYXBwZW5kKDAuMjUpCiAgICAgICAgICAgIGlmIHpfY29tcG9uZW50czoKICAgICAgICAgICAgICAgIHdzdW0gPSBzdW0oel93ZWlnaHRzKQogICAgICAgICAgICAgICAgbWV0cmljLnpzYyA9IGZsb2F0KHN1bShjICogdyBmb3IgYywgdyBpbiB6aXAoel9jb21wb25lbnRzLCB6X3dlaWdodHMpKSAvIHdzdW0pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBtZXRyaWMuenNjID0gMC4wCgogICAgICAgICAgICAjIC0tLSBML1MgU2tldyBNb21lbnR1bSAoTFNNKTogc21vb3RoZWQgcmVjZW50IGNoYW5nZSBpbiBMUyByYXRpbyAocGVyY2VudCkgLS0tCiAgICAgICAgICAgIGxzbSA9IDAuMAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIGxzX3ZhbHMgaXMgZGVzY2VuZGluZyBieSB0aW1lc3RhbXAgKHJlY2VudCBmaXJzdCksIHJldmVyc2UgdG8gY2hyb25vbG9naWNhbAogICAgICAgICAgICAgICAgY2hyb24gPSBsaXN0KHJldmVyc2VkKGxzX3ZhbHMpKQogICAgICAgICAgICAgICAgZGlmZnMgPSBbXQogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGNocm9uKSAtIDEpOgogICAgICAgICAgICAgICAgICAgIHByZXZ2ID0gY2hyb25baV0KICAgICAgICAgICAgICAgICAgICBueHQgPSBjaHJvbltpICsgMV0KICAgICAgICAgICAgICAgICAgICBpZiBwcmV2diBhbmQgcHJldnYgIT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgZGlmZnMuYXBwZW5kKCgobnh0IC0gcHJldnYpIC8gcHJldnYpICogMTAwLjApCiAgICAgICAgICAgICAgICBpZiBkaWZmczoKICAgICAgICAgICAgICAgICAgICAjIHVzZSBleHBvbmVudGlhbGx5LXdlaWdodGVkIHNtb290aGluZyBmYXZvcmluZyB0aGUgbmV3ZXN0IGRpZmYKICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzID0gbnAuYXJyYXkoWzAuMiwgMC4zLCAwLjVdKSBpZiBsZW4oZGlmZnMpID49IDMgZWxzZSBucC5vbmVzKGxlbihkaWZmcykpIC8gbGVuKGRpZmZzKQogICAgICAgICAgICAgICAgICAgIGRpZmZzX3RyaW0gPSBucC5hcnJheShkaWZmc1stbGVuKHdlaWdodHMpOl0pCiAgICAgICAgICAgICAgICAgICAgbHNtID0gZmxvYXQobnAuc3VtKGRpZmZzX3RyaW0gKiB3ZWlnaHRzKSkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIGxzbSA9IDAuMAogICAgICAgICAgICBtZXRyaWMubHNtID0gbHNtCgogICAgICAgICAgICAjIC0tLSBHdWFyZHM6IGRyb3AgaW52YWxpZCB2YWx1ZXMgLS0tCiAgICAgICAgICAgIGZvciBmaWVsZCBpbiBbCiAgICAgICAgICAgICAgICAib2lfYWJzX3VzZCIsICJ2b2xfdXNkIiwgIm9pX2RlbHRhX3BjdCIsICJsc19kZWx0YV9wY3QiLAogICAgICAgICAgICAgICAgInRvcF9sc19kZWx0YV9wY3QiLCAidnBpIiwgIndlaWdodGVkX29pX3VzZCIsICJyc2kiLCAienNjIiwgImxzbSIsCiAgICAgICAgICAgIF06CiAgICAgICAgICAgICAgICB2ID0gZ2V0YXR0cihtZXRyaWMsIGZpZWxkLCBOb25lKQogICAgICAgICAgICAgICAgaWYgdiBpcyBub3QgTm9uZSBhbmQgbm90IG5wLmlzZmluaXRlKHYpOgogICAgICAgICAgICAgICAgICAgIHNldGF0dHIobWV0cmljLCBmaWVsZCwgMC4wKQoKICAgICAgICAgICAgc2Vzc2lvbi5tZXJnZShtZXRyaWMpCgogICAgICAgICAgICAjIC0tLSBNaXJyb3IgdG8gcGVyLXRpbWVmcmFtZSB0YWJsZSBmb3IgZmFzdCBxdWVyaWVzIC0tLQogICAgICAgICAgICB0Zl90YWJsZSA9IGYibWV0cmljc197dGltZWZyYW1lfSIKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgY29scyA9IFtjLm5hbWUgZm9yIGMgaW4gTWV0cmljLl9fdGFibGVfXy5jb2x1bW5zXQogICAgICAgICAgICAgICAgdmFscyA9IFtnZXRhdHRyKG1ldHJpYywgYykgZm9yIGMgaW4gY29sc10KICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVycyA9ICIsIi5qb2luKCI/IiBmb3IgXyBpbiBjb2xzKQogICAgICAgICAgICAgICAgY29ubiA9IGdldF9kYl9jb25uKCkKICAgICAgICAgICAgICAgIGNvbm4uZXhlY3V0ZShmIklOU0VSVCBPUiBSRVBMQUNFIElOVE8ge3RmX3RhYmxlfSAoeycsJy5qb2luKGNvbHMpfSkgVkFMVUVTICh7cGxhY2Vob2xkZXJzfSkiLCB2YWxzKQogICAgICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICAgICAgY29ubi5jbG9zZSgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgICAgICBzYXZlZF9jb3VudCArPSAxCgogICAgICAgIHNlc3Npb24uY29tbWl0KCkKICAgICAgICBsb2dnZXIuaW5mbyhmIltzYXZlX21ldHJpY3NfdjNdIFNhdmVkIHtzYXZlZF9jb3VudH0gcmVjb3JkcyBmb3Ige3RpbWVmcmFtZX0iKQogICAgICAgIHJldHVybiBzYXZlZF9jb3VudAoKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBzZXNzaW9uLnJvbGxiYWNrKCkKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgICAgICBsb2dnZXIuZXJyb3IoZiJzYXZlX21ldHJpY3NfdjMgZmFpbGVkOiB7ZX0iKQogICAgICAgIHJldHVybiAwCiAgICBmaW5hbGx5OgogICAgICAgIHNlc3Npb24uY2xvc2UoKQoKCmRlZiBnZXRfbGF0ZXN0X21ldHJpY3MobGltaXQ6IGludCA9IDUwLCB0Zjogc3RyIHwgTm9uZSA9IE5vbmUpIC0+IGxpc3Q6CiAgICAiIiIKICAgIEh5YnJpZCBmZXRjaCAoT1JNIGZpcnN0LCB0aGVuIHJhdyBTUUxpdGUgZmFsbGJhY2spLgogICAgIiIiCiAgICBzZXNzaW9uID0gU2Vzc2lvbigpCiAgICB0cnk6CiAgICAgICAgcSA9IHNlc3Npb24ucXVlcnkoTWV0cmljKQogICAgICAgIGlmIHRmOgogICAgICAgICAgICBxID0gcS5maWx0ZXIoTWV0cmljLnRpbWVmcmFtZSA9PSB0ZikKICAgICAgICBxID0gcS5vcmRlcl9ieShNZXRyaWMudGltZXN0YW1wLmRlc2MoKSkKICAgICAgICByb3dzID0gcS5saW1pdChsaW1pdCkuYWxsKCkKICAgICAgICBpZiByb3dzOgogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIltEQl0gT1JNIHJldHVybmVkIHtsZW4ocm93cyl9IHJvd3MgKHRmPXt0ZiBvciAnYWxsJ30pIikKICAgICAgICAgICAgcmV0dXJuIHJvd3MKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIud2FybmluZyhmIltEQl0gT1JNIGZhaWxlZDoge2V9IikKICAgIGZpbmFsbHk6CiAgICAgICAgc2Vzc2lvbi5jbG9zZSgpCgogICAgIyBmYWxsYmFjayByYXcgc3FsaXRlCiAgICBpbXBvcnQgc3FsaXRlMwogICAgY29ubiA9IHNxbGl0ZTMuY29ubmVjdChEQl9QQVRIKQogICAgY29ubi5yb3dfZmFjdG9yeSA9IHNxbGl0ZTMuUm93CiAgICBjdXIgPSBjb25uLmN1cnNvcigpCiAgICBxID0gIlNFTEVDVCAqIEZST00gbWV0cmljcyIKICAgIGlmIHRmOgogICAgICAgIHEgKz0gIiBXSEVSRSB0aW1lZnJhbWUgPSA/IgogICAgICAgIGN1ci5leGVjdXRlKHEgKyAiIE9SREVSIEJZIHRpbWVzdGFtcCBERVNDIExJTUlUID8iLCAodGYsIGxpbWl0KSkKICAgIGVsc2U6CiAgICAgICAgY3VyLmV4ZWN1dGUocSArICIgT1JERVIgQlkgdGltZXN0YW1wIERFU0MgTElNSVQgPyIsIChsaW1pdCwpKQogICAgcm93cyA9IGN1ci5mZXRjaGFsbCgpCiAgICBjb25uLmNsb3NlKCkKICAgIGxvZ2dlci5pbmZvKGYiW0RCXSBSQVcgZmFsbGJhY2sgcmV0dXJuZWQge2xlbihyb3dzKX0gcm93cyAodGY9e3RmIG9yICdhbGwnfSkiKQogICAgcmV0dXJuIHJvd3MKCgpkZWYgZ2V0X21ldHJpY3NfYnlfc3ltYm9sKHN5bWJvbDogc3RyLCBsaW1pdDogaW50ID0gMTAwLCB0Zjogc3RyIHwgTm9uZSA9IE5vbmUpIC0+IGxpc3Q6CiAgICAiIiIKICAgIEh5YnJpZCBmZXRjaCAoT1JNIGZpcnN0LCB0aGVuIHJhdyBTUUxpdGUgZmFsbGJhY2spLgogICAgIiIiCiAgICBzZXNzaW9uID0gU2Vzc2lvbigpCiAgICB0cnk6CiAgICAgICAgcSA9IHNlc3Npb24ucXVlcnkoTWV0cmljKS5maWx0ZXIoTWV0cmljLnN5bWJvbCA9PSBzeW1ib2wpCiAgICAgICAgaWYgdGY6CiAgICAgICAgICAgIHEgPSBxLmZpbHRlcihNZXRyaWMudGltZWZyYW1lID09IHRmKQogICAgICAgIHEgPSBxLm9yZGVyX2J5KE1ldHJpYy50aW1lc3RhbXAuZGVzYygpKQogICAgICAgIHJvd3MgPSBxLmxpbWl0KGxpbWl0KS5hbGwoKQogICAgICAgIGlmIHJvd3M6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiW0RCXSBPUk0gcmV0dXJuZWQge2xlbihyb3dzKX0gcm93cyBmb3Ige3N5bWJvbH0gKHRmPXt0ZiBvciAnYWxsJ30pIikKICAgICAgICAgICAgcmV0dXJuIHJvd3MKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIud2FybmluZyhmIltEQl0gT1JNIGZhaWxlZDoge2V9IikKICAgIGZpbmFsbHk6CiAgICAgICAgc2Vzc2lvbi5jbG9zZSgpCgogICAgIyBmYWxsYmFjayByYXcgc3FsaXRlCiAgICBpbXBvcnQgc3FsaXRlMwogICAgY29ubiA9IHNxbGl0ZTMuY29ubmVjdChEQl9QQVRIKQogICAgY29ubi5yb3dfZmFjdG9yeSA9IHNxbGl0ZTMuUm93CiAgICBjdXIgPSBjb25uLmN1cnNvcigpCiAgICBxID0gIlNFTEVDVCAqIEZST00gbWV0cmljcyBXSEVSRSBzeW1ib2wgPSA/IgogICAgcGFyYW1zID0gW3N5bWJvbF0KICAgIGlmIHRmOgogICAgICAgIHEgKz0gIiBBTkQgdGltZWZyYW1lID0gPyIKICAgICAgICBwYXJhbXMuYXBwZW5kKHRmKQogICAgcSArPSAiIE9SREVSIEJZIHRpbWVzdGFtcCBERVNDIExJTUlUID8iCiAgICBwYXJhbXMuYXBwZW5kKGxpbWl0KQogICAgY3VyLmV4ZWN1dGUocSwgdHVwbGUocGFyYW1zKSkKICAgIHJvd3MgPSBjdXIuZmV0Y2hhbGwoKQogICAgY29ubi5jbG9zZSgpCiAgICBsb2dnZXIuaW5mbyhmIltEQl0gUkFXIGZhbGxiYWNrIHJldHVybmVkIHtsZW4ocm93cyl9IHJvd3MgZm9yIHtzeW1ib2x9ICh0Zj17dGYgb3IgJ2FsbCd9KSIpCiAgICByZXR1cm4gcm93cwo=",
        "summary": "520L | db.py | .py | 18.8 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\metrics.py",
        "type": ".py",
        "size_kb": 8.6,
        "content": "",
        "summary": "220L | metrics.py | .py | 8.6 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\scraper.py",
        "type": ".py",
        "size_kb": 11.0,
        "content": "",
        "summary": "316L | scraper.py | .py | 11.0 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\utils.py",
        "type": ".py",
        "size_kb": 2.5,
        "content": "aW1wb3J0IHJlcXVlc3RzCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IE9yZGVyZWREaWN0CmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxlbmNvZGUKZnJvbSBmbGFzayBpbXBvcnQgY3VycmVudF9hcHAKCmRlZiBzZW5kX3B1YmxpY19yZXF1ZXN0KHVybF9wYXRoLCBwYXlsb2FkPXt9LCBhcGlfYmFzZT1Ob25lKToKICAgICIiIlB1YmxpYyBBUEkgcmVxdWVzdCB3aXRoIG9wdGlvbmFsIGJhc2UgVVJMIChkZWZhdWx0IGZhcGkpLiIiIgogICAgYmFzZSA9IGFwaV9iYXNlIG9yIGN1cnJlbnRfYXBwLmNvbmZpZy5nZXQoJ0FQSV9CQVNFX1VSTCcsICdodHRwczovL2ZhcGkuYmluYW5jZS5jb20nKQogICAgcXVlcnlfc3RyaW5nID0gdXJsZW5jb2RlKHBheWxvYWQsIFRydWUpCiAgICB1cmwgPSBiYXNlICsgdXJsX3BhdGgKICAgIGlmIHF1ZXJ5X3N0cmluZzoKICAgICAgICB1cmwgPSB1cmwgKyAiPyIgKyBxdWVyeV9zdHJpbmcKICAgIHRyeToKICAgICAgICBzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgc2Vzc2lvbi5oZWFkZXJzLnVwZGF0ZSh7IkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgifSkKICAgICAgICByZXNwb25zZSA9IHNlc3Npb24uZ2V0KHVybCkKICAgICAgICBwcmludChmIkRFQlVHIEFQSToge3VybH0gLSBTdGF0dXM6IHtyZXNwb25zZS5zdGF0dXNfY29kZX0iKSAgIyBLZWVwIGRlYnVnCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOgogICAgICAgICAgICBwcmludChmIk5vbi0yMDAgc3RhdHVzIGZvciB7dXJsfToge3Jlc3BvbnNlLnRleHRbOjEwMF19IikKICAgICAgICAgICAgcmV0dXJuIHt9LCBbXSAgIyBGYWxsYmFjawogICAgICAgIAogICAgICAgIGlmIG5vdCByZXNwb25zZS50ZXh0LnN0cmlwKCk6CiAgICAgICAgICAgIHByaW50KGYiRW1wdHkgcmVzcG9uc2UgZm9yIHt1cmx9IikKICAgICAgICAgICAgcmV0dXJuIHt9LCBbXQogICAgICAgIAogICAgICAgICMgRGV0ZWN0IEhUTUwgZXJyb3IgcGFnZQogICAgICAgIGlmIHJlc3BvbnNlLnRleHQuc3RhcnRzd2l0aCgnPCFET0NUWVBFJykgb3IgJ2JpbmFuY2UuY29tL2VuL2Vycm9yJyBpbiByZXNwb25zZS50ZXh0Lmxvd2VyKCk6CiAgICAgICAgICAgIHByaW50KGYiSFRNTCBlcnJvciBwYWdlIGZvciB7dXJsfTogUmVnaW9uYWwgYmxvY2sgb3IgaW52YWxpZCBhY2Nlc3MuIEZhbGxiYWNrIGVtcHR5LiIpCiAgICAgICAgICAgIHJldHVybiB7fSwgW10KICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIGpzb25fcmVzcG9uc2UgPSByZXNwb25zZS5qc29uKCkKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5KU09ORGVjb2RlRXJyb3IgYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJOb24tSlNPTiByZXNwb25zZSBmb3Ige3VybH06IHtyZXNwb25zZS50ZXh0WzoyMDBdfSIpCiAgICAgICAgICAgIGpzb25fcmVzcG9uc2UgPSBbXSAgIyBGYWxsYmFjayBlbXB0eSBsaXN0CiAgICAgICAgCiAgICAgICAgaWYgImNvZGUiIGluIGpzb25fcmVzcG9uc2UgYW5kIGpzb25fcmVzcG9uc2VbImNvZGUiXSA8IDA6CiAgICAgICAgICAgIHByaW50KGYiQVBJIGVycm9yIGZvciB7dXJsfToge2pzb25fcmVzcG9uc2VbJ21zZyddfSIpCiAgICAgICAgICAgIHJldHVybiB7fSwgW10KICAgICAgICAKICAgICAgICByZXR1cm4gcmVzcG9uc2UuaGVhZGVycywganNvbl9yZXNwb25zZQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yIGFzIGU6CiAgICAgICAgcHJpbnQoZiJDb25uZWN0aW9uIGVycm9yIGZvciB7dXJsfToge2V9IikKICAgICAgICByZXR1cm4ge30sIFtdCgpkZWYgaGFzaGluZyhxdWVyeV9zdHJpbmcsIGV4Y2hhbmdlPSJiaW5hbmNlIiwgdGltZXN0YW1wPU5vbmUpOgogICAgIiIiU2lnbmF0dXJlIGhhc2hpbmcgKGZyb20gc2NyYXBlci5weSkuIiIiCiAgICBpbXBvcnQgaG1hYwogICAgaW1wb3J0IGhhc2hsaWIKICAgIGlmIGV4Y2hhbmdlID09ICJieWJpdCI6CiAgICAgICAgcXVlcnlfc3RyaW5nID0gZiJ7dGltZXN0YW1wfXtjdXJyZW50X2FwcC5jb25maWdbJ0FQSV9LRVknXX01MDAwIiArIHF1ZXJ5X3N0cmluZwogICAgICAgIHJldHVybiBobWFjLm5ldygKICAgICAgICAgICAgYnl0ZXMoY3VycmVudF9hcHAuY29uZmlnWyJBUElfU0VDUkVUIl0uZW5jb2RlKCJ1dGYtOCIpKSwKICAgICAgICAgICAgcXVlcnlfc3RyaW5nLmVuY29kZSgidXRmLTgiKSwKICAgICAgICAgICAgaGFzaGxpYi5zaGEyNTYsCiAgICAgICAgKS5oZXhkaWdlc3QoKQogICAgcmV0dXJuIGhtYWMubmV3KAogICAgICAgIGJ5dGVzKGN1cnJlbnRfYXBwLmNvbmZpZ1siQVBJX1NFQ1JFVCJdLmVuY29kZSgidXRmLTgiKSksCiAgICAgICAgcXVlcnlfc3RyaW5nLmVuY29kZSgidXRmLTgiKSwKICAgICAgICBoYXNobGliLnNoYTI1NiwKICAgICkuaGV4ZGlnZXN0KCk=",
        "summary": "61L | utils.py | .py | 2.5 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\version.py",
        "type": ".py",
        "size_kb": 0.1,
        "content": "IyBweWxpbnQ6IHNraXAtZmlsZQoKX192ZXJzaW9uX18gPSAiMC4zLjQuZGV2MCtnNTcxMzdkNGU4LmQyMDI1MTAxNiI=",
        "summary": "3L | version.py | .py | 0.1 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\wsgi.py",
        "type": ".py",
        "size_kb": 0.1,
        "content": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKaW1wb3J0IGZ1dHVyZXNib2FyZC5hcHAKCgphcHAgPSBmdXR1cmVzYm9hcmQuYXBwLmluaXRfYXBwKCkK",
        "summary": "6L | wsgi.py | .py | 0.1 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\__init__.py",
        "type": ".py",
        "size_kb": 0.9,
        "content": "Iwpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFubm90YXRpb25zCgppbXBvcnQgcGF0aGxpYgoKUEFDS0FHRV9ST09UID0gcGF0aGxpYi5QYXRoKF9fZmlsZV9fKS5yZXNvbHZlKCkucGFyZW50CnRyeToKICAgIGZyb20gLnZlcnNpb24gaW1wb3J0IF9fdmVyc2lvbl9fCmV4Y2VwdCBJbXBvcnRFcnJvcjogICMgcHJhZ21hOiBubyBjb3ZlcgogICAgX192ZXJzaW9uX18gPSAiMC4wLjAubm90LWluc3RhbGxlZCIKICAgIHRyeToKICAgICAgICBmcm9tIGltcG9ydGxpYi5tZXRhZGF0YSBpbXBvcnQgUGFja2FnZU5vdEZvdW5kRXJyb3IsIHZlcnNpb24KCiAgICAgICAgdHJ5OgogICAgICAgICAgICBfX3ZlcnNpb25fXyA9IHZlcnNpb24oImZ1dHVyZXNib2FyZCIpCiAgICAgICAgZXhjZXB0IFBhY2thZ2VOb3RGb3VuZEVycm9yOgogICAgICAgICAgICAjIHBhY2thZ2UgaXMgbm90IGluc3RhbGxlZAogICAgICAgICAgICBwYXNzCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmcm9tIHBrZ19yZXNvdXJjZXMgaW1wb3J0ICggICMgdHlwZTogaWdub3JlCiAgICAgICAgICAgICAgICBEaXN0cmlidXRpb25Ob3RGb3VuZCwKICAgICAgICAgICAgICAgIGdldF9kaXN0cmlidXRpb24sCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIF9fdmVyc2lvbl9fID0gZ2V0X2Rpc3RyaWJ1dGlvbigiZnV0dXJlc2JvYXJkIikudmVyc2lvbgogICAgICAgICAgICBleGNlcHQgRGlzdHJpYnV0aW9uTm90Rm91bmQ6CiAgICAgICAgICAgICAgICAjIHBhY2thZ2UgaXMgbm90IGluc3RhbGxlZAogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICAgICAgIyBwa2cgcmVzb3VyY2VzIGlzbid0IGV2ZW4gYXZhaWxhYmxlPyEKICAgICAgICAgICAgcGFzcwo=",
        "summary": "33L | __init__.py | .py | 0.9 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\templates\\base.html",
        "type": ".html",
        "size_kb": 10.5,
        "content": "",
        "summary": "141L | base.html | .html | 10.5 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\templates\\coin.html",
        "type": ".html",
        "size_kb": 30.7,
        "content": "",
        "summary": "707L | coin.html | .html | 30.7 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\templates\\error.html",
        "type": ".html",
        "size_kb": 0.4,
        "content": "eyUgZXh0ZW5kcyAiYmFzZS5odG1sIiAlfQp7JSBibG9jayB0aXRsZSAlfTQwNHslIGVuZGJsb2NrICV9CnslIGJsb2NrIGNvbnRlbnQgJX0KICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBmbGV4LXdyYXAgZmxleC1tZC1ub3dyYXAgYWxpZ24taXRlbXMtY2VudGVyIHB0LTMgcGItMiBtYi0zIGJvcmRlci1ib3R0b20iPgogICAgICAgIDxoMz48aSBjbGFzcz0iZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZSI+PC9pPiBFcnJvciA0MDQ8L2gzPgogICAgPC9kaXY+CiAgICA8cCBjbGFzcz0iaW1wb3J0YW50Ij4KICAgICAgICBQYWdlIG5vdCBmb3VuZAogICAgPC9wPgp7JSBlbmRibG9jayAlfQo=",
        "summary": "10L | error.html | .html | 0.4 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\templates\\history.html",
        "type": ".html",
        "size_kb": 3.6,
        "content": "eyUgZXh0ZW5kcyAiYmFzZS5odG1sIiAlfQp7JSBibG9jayBhdXRvcmVsb2FkICV9eyUgZW5kYmxvY2sgJX0KeyUgYmxvY2sgdGl0bGUgJX1JbmNvbWUgaGlzdG9yeXslIGVuZGJsb2NrICV9CnslIGJsb2NrIGNvbnRlbnQgJX0KICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBmbGV4LXdyYXAgZmxleC1tZC1ub3dyYXAgYWxpZ24taXRlbXMtY2VudGVyIHB0LTMgcGItMiBtYi0zIGJvcmRlci1ib3R0b20iPgogICAgICAgIDxoMz48aSBjbGFzcz0iZmFzIGZhLWhpc3RvcnkiPjwvaT4gSW5jb21lIGhpc3Rvcnk8L2gzPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgIHslIGlmIGZpbGVuYW1lICE9ICItIiAlfQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtaW5mbyIgcm9sZT0iYWxlcnQiPjxpIGNsYXNzPSJmYXMgZmEtZmlsZS1kb3dubG9hZCI+PC9pPiBZb3VyIGZpbGUgaGFzIGJlZW4gc2F2ZWQgdG8gPGNvZGU+e3sgZm5hbWUgfX08L2NvZGU+IHdoaWNoIGNhbiBiZSBkb3dubG9hZGVkIGJ5IGNsaWNraW5nIDxhIGhyZWY9ICJ7eyB1cmxfZm9yKCdzdGF0aWMnLCBmaWxlbmFtZT1mbmFtZSkgfX0iPmhlcmU8L2E+PC9kaXY+PGJyPgogICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0ib3JkZXJzIiBjbGFzcz0ndGFibGUgdGFibGUtc20gdGFibGUtYm9yZGVyZWQgdGV4dC1jZW50ZXInPgogICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idGhlYWQtZGFyayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Eb3dubG9hZDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VGltZSBwZXJpb2Q8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlRvdGFsIHJlY29yZHM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZm9yIGNvbCBpbiBoaXN0b3J5WyJjb2x1bW5zIl0gJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+e3sgY29sIH19PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3IgdGltZWZyYW1lIGluIGhpc3RvcnkgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIHRpbWVmcmFtZSAhPSAiY29sdW1ucyIgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtIiBocmVmPSJ7eyB1cmxfZm9yKCJtYWluLmhpc3RvcnlfcGFnZV90aW1lZnJhbWUiLCBzdGFydD1oaXN0b3J5W3RpbWVmcmFtZV1bInN0YXJ0Il0sIGVuZD1oaXN0b3J5W3RpbWVmcmFtZV1bImVuZCJdKSB9fSIgcm9sZT0iYnV0dG9uIj5TYXZlIHRvIGZpbGU8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHRpbWVmcmFtZSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBoaXN0b3J5W3RpbWVmcmFtZV1bInRvdGFsIl0gfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3IgY29sIGluIGhpc3RvcnlbImNvbHVtbnMiXSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGhpc3RvcnlbdGltZWZyYW1lXVtjb2xdIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kZm9yICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGJyPjxocj48YnI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICA8dGFibGUgaWQ9Im9sZGZpbGVzIiBjbGFzcz0ndGFibGUgdGFibGUtc20gdGFibGUtYm9yZGVyZWQgdGV4dC1jZW50ZXInPgogICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idGhlYWQtZGFyayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Eb3dubG9hZDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RmlsZW5hbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3IgZmlsZSBpbiBmaWxlcyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtIiBocmVmPSJ7eyB1cmxfZm9yKCdzdGF0aWMnLCBmaWxlbmFtZT1maWxlKSB9fSIgcm9sZT0iYnV0dG9uIj5Eb3dubG9hZDwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBmaWxlIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCiAgICA8c2NyaXB0PgogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoJyNvcmRlcnMnKS5EYXRhVGFibGUoewogICAgICAgICAgICAgICAgInBhZ2luZyI6IGZhbHNlLAogICAgICAgICAgICAgICAgInNlYXJjaGluZyI6IGZhbHNlLAogICAgICAgICAgICAgICAgIm9yZGVyIjogW10sCiAgICAgICAgICAgICAgICAiaW5mbyI6IGZhbHNlLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgJCgnI29sZGZpbGVzJykuRGF0YVRhYmxlKHsKICAgICAgICAgICAgICAgICJwYWdpbmciOiB0cnVlLAogICAgICAgICAgICAgICAgInNlYXJjaGluZyI6IHRydWUsCiAgICAgICAgICAgICAgICAib3JkZXIiOiBbWyAxLCAnZGVzYycgXV0sCiAgICAgICAgICAgICAgICAiaW5mbyI6IHRydWUsCiAgICAgICAgICAgIH0pOwogICAgICAgIH0gKTsKICAgIDwvc2NyaXB0Pgp7JSBlbmRibG9jayAlfQo=",
        "summary": "87L | history.html | .html | 3.6 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\templates\\home.html",
        "type": ".html",
        "size_kb": 9.4,
        "content": "",
        "summary": "300L | home.html | .html | 9.4 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\templates\\positions.html",
        "type": ".html",
        "size_kb": 4.5,
        "content": "eyUgZXh0ZW5kcyAiYmFzZS5odG1sIiAlfQp7JSBibG9jayBhdXRvcmVsb2FkICV9PG1ldGEgaHR0cC1lcXVpdj0icmVmcmVzaCIgY29udGVudD0iNjAiPnslIGVuZGJsb2NrICV9CnslIGJsb2NrIHRpdGxlICV9UG9zaXRpb25zeyUgZW5kYmxvY2sgJX0KeyUgYmxvY2sgY29udGVudCAlfQogICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGZsZXgtd3JhcCBmbGV4LW1kLW5vd3JhcCBhbGlnbi1pdGVtcy1jZW50ZXIgcHQtMyBwYi0yIG1iLTMgYm9yZGVyLWJvdHRvbSI+CiAgICAgICAgPGgzPjxpIGNsYXNzPSJmYXMgZmEtaGFuZC1ob2xkaW5nLXVzZCI+PC9pPiBQb3NpdGlvbnM8L2gzPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiB0YWJsZS1yZXNwb25zaXZlIj4KICAgICAgICAgICAgPHRhYmxlIGlkPSJvcmRlcnMiIGNsYXNzPSd0YWJsZSB0YWJsZS1zbSB0YWJsZS1ib3JkZXJlZCB0ZXh0LWNlbnRlcic+CiAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InRoZWFkLWRhcmsiPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN5bWJvbDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MZXZlcmFnZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Qb3MuIFZvbHVtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Qb3MuIFByaWNlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBvcy4gVmFsdWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+VW5yZWFsaXNlZCBQbkw8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q3VycmVudCBQcmljZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGFibGUtc3VjY2VzcyI+QnV5cyBsZWZ0PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0YWJsZS1zdWNjZXNzIj5OZXh0IGJ1eTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGFibGUtc3VjY2VzcyI+RGlzdGFuY2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRhYmxlLXN1Y2Nlc3MiPkRpc3RhbmNlICU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRhYmxlLWRhbmdlciI+U2VsbHMgbGVmdDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGFibGUtZGFuZ2VyIj5OZXh0IHNlbGw8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRhYmxlLWRhbmdlciI+RGlzdGFuY2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRhYmxlLWRhbmdlciI+RGlzdGFuY2UgJTwvdGg+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgeyUgZm9yIGNvaW4gaW4gcG9zaXRpb25zICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBjb2luIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMF1bMF1bNV19fSB7eyBwb3NpdGlvbnNbY29pbl1bMF1bMF1bM10gfX14PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMF1bMF1bNl0gfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHBvc2l0aW9uc1tjb2luXVswXVswXVs0XSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgKHBvc2l0aW9uc1tjb2luXVswXVswXVs2XSAqIHBvc2l0aW9uc1tjb2luXVswXVswXVs0XSl8cm91bmQoMikgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7ICIkJS4yZiJ8Zm9ybWF0KHBvc2l0aW9uc1tjb2luXVswXVswXVsyXSkgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IG1hcmtwcmljZXNbY29pbl18cm91bmQoOCl9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcG9zaXRpb25zW2NvaW5dWzJdWzBdfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHBvc2l0aW9uc1tjb2luXVsyXVs0XX19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMl1bNV19fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+eyUgaWYgcG9zaXRpb25zW2NvaW5dWzJdWzRdICE9ICItIiAlfXt7ICgocG9zaXRpb25zW2NvaW5dWzJdWzVdfGZsb2F0L21hcmtwcmljZXNbY29pbl0pKjEwMCl8cm91bmQoMil9fSUgeyUgZW5kaWYgJX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHBvc2l0aW9uc1tjb2luXVsyXVsxXX19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMl1bNl19fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcG9zaXRpb25zW2NvaW5dWzJdWzddfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnslIGlmIHBvc2l0aW9uc1tjb2luXVsyXVs2XSAhPSAiLSIgJX17eyAoKHBvc2l0aW9uc1tjb2luXVsyXVs3XXxmbG9hdC9tYXJrcHJpY2VzW2NvaW5dKSoxMDApfHJvdW5kKDIpfX0lIHslIGVuZGlmICV9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICB7JSBpZiBwb3NpdGlvbnNbY29pbl1bMF18bGVuZ3RoID4gMSAlfQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgY29pbiB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcG9zaXRpb25zW2NvaW5dWzBdWzFdWzVdfX0ge3sgcG9zaXRpb25zW2NvaW5dWzBdWzFdWzNdIH19eDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcG9zaXRpb25zW2NvaW5dWzBdWzFdWzZdIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMF1bMV1bNF0gfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IChwb3NpdGlvbnNbY29pbl1bMF1bMV1bNl0gKiBwb3NpdGlvbnNbY29pbl1bMF1bMV1bNF0pfHJvdW5kKDIpIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyAiJCUuMmYifGZvcm1hdChwb3NpdGlvbnNbY29pbl1bMF1bMV1bMl0pIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBtYXJrcHJpY2VzW2NvaW5dfHJvdW5kKDgpfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHBvc2l0aW9uc1tjb2luXVsyXVsyXX19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMl1bOF19fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcG9zaXRpb25zW2NvaW5dWzJdWzldfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnslIGlmIHBvc2l0aW9uc1tjb2luXVsyXVs4XSAhPSAiLSIgJX17eyAoKHBvc2l0aW9uc1tjb2luXVsyXVs5XXxmbG9hdC9tYXJrcHJpY2VzW2NvaW5dKSoxMDApfHJvdW5kKDIpfX0lIHslIGVuZGlmICV9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMl1bM119fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcG9zaXRpb25zW2NvaW5dWzJdWzEwXX19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwb3NpdGlvbnNbY29pbl1bMl1bMTFdfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnslIGlmIHBvc2l0aW9uc1tjb2luXVsyXVsxMF0gIT0gIi0iICV9e3sgKChwb3NpdGlvbnNbY29pbl1bMl1bMTFdfGZsb2F0L21hcmtwcmljZXNbY29pbl0pKjEwMCl8cm91bmQoMil9fSUgeyUgZW5kaWYgJX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgeyUgZW5kZm9yICV9CiAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPHNjcmlwdD4KCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgnI29yZGVycycpLkRhdGFUYWJsZSh7CiAgICAgICAgICAgICAgICAicGFnaW5nIjogZmFsc2UsCiAgICAgICAgICAgICAgICAib3JkZXIiOiBbWzAsImFzYyJdXSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfSApOwoKICAgIDwvc2NyaXB0Pgp7JSBlbmRibG9jayAlfQo=",
        "summary": "84L | positions.html | .html | 4.5 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\templates\\projection.html",
        "type": ".html",
        "size_kb": 5.0,
        "content": "eyUgZXh0ZW5kcyAiYmFzZS5odG1sIiAlfQp7JSBibG9jayB0aXRsZSAlfVByb2plY3Rpb257JSBlbmRibG9jayAlfQp7JSBibG9jayBjb250ZW50ICV9CiAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gZmxleC13cmFwIGZsZXgtbWQtbm93cmFwIGFsaWduLWl0ZW1zLWNlbnRlciBwdC0zIHBiLTIgbWItMyBib3JkZXItYm90dG9tIj4KICAgICAgICA8aDM+PGkgY2xhc3M9ImZhcyBmYS1jaGFydC1saW5lIj48L2k+IFByb2plY3Rpb248L2gzPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgQmFsYW5jZSBwcm9qZWN0aW9uIHZpc3VhbGlzZWQKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGNhbnZhcyBpZD0ibGluZUNoYXJ0IiBoZWlnaHQ9IjQwMCI+PC9jYW52YXM+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8YnI+CgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgIEJhbGFuY2UgcHJvamVjdGlvbiBicmVha2Rvd24KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHRhYmxlIGlkPSJoeXBlIiBjbGFzcz0ndGFibGUgdGFibGUtc20gdGFibGUtYm9yZGVyZWQgdGV4dC1jZW50ZXInPgogICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idGhlYWQtZGFyayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYWlseSAlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4zMCBkYXlzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD42MCBkYXlzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD45MCBkYXlzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4xMjAgZGF5czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+MjQwIGRheXM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjM2NSBkYXlzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgeyUgZm9yIHZhbHVlIGluIGRhdGFbInByb2oiXSAlfQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgKCh2YWx1ZSAtIDEpICogMTAwKXxyb3VuZCgyKSB9fSU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGRhdGFbInByb2oiXVt2YWx1ZV1bMzBdfHJvdW5kKDIpIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBkYXRhWyJwcm9qIl1bdmFsdWVdWzYwXXxyb3VuZCgyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZGF0YVsicHJvaiJdW3ZhbHVlXVs5MF18cm91bmQoMikgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGRhdGFbInByb2oiXVt2YWx1ZV1bMTIwXXxyb3VuZCgyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZGF0YVsicHJvaiJdW3ZhbHVlXVsyNDBdfHJvdW5kKDIpIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBkYXRhWyJwcm9qIl1bdmFsdWVdWy0xXXxyb3VuZCgyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZGF0YVsicGN1c3RvbV92YWx1ZSJdIH19JSAoYXZnIHBhc3QgNyBkYXlzKTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZGF0YVsicGN1c3RvbSJdWzMwXXxyb3VuZCgyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZGF0YVsicGN1c3RvbSJdWzYwXXxyb3VuZCgyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZGF0YVsicGN1c3RvbSJdWzkwXXxyb3VuZCgyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZGF0YVsicGN1c3RvbSJdWzEyMF18cm91bmQoMikgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGRhdGFbInBjdXN0b20iXVsyNDBdfHJvdW5kKDIpIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBkYXRhWyJwY3VzdG9tIl1bLTFdfHJvdW5kKDIpIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0PgoKICAgICAgICAkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKCcjaHlwZScpLkRhdGFUYWJsZSh7CiAgICAgICAgICAgICAgICAicGFnaW5nIjogZmFsc2UsCiAgICAgICAgICAgICAgICAic2VhcmNoaW5nIjogZmFsc2UsCiAgICAgICAgICAgICAgICAib3JkZXIiOiBbXSwKICAgICAgICAgICAgICAgICJpbmZvIjogZmFsc2UsCiAgICAgICAgICAgIH0pOwogICAgICAgIH0gKTsKCiAgICAgICAgQ2hhcnQucmVnaXN0ZXIoQ2hhcnREYXRhTGFiZWxzKTsKCiAgICAgICAgY29uc3QgZmxhdF9jb2xvdXJzID0gWwogICAgICAgICAgICAicmdiYSg0NiwgMjA0LCAxMTMsIDAuMykiLCAicmdiYSg1MiwgMTUyLCAyMTksIDAuMykiLCAicmdiYSgxNTUsIDg5LCAxODIsIDAuMykiLCAicmdiYSg1MiwgNzMsIDk0LCAwLjMpIiwgInJnYmEoMjQxLCAxOTYsIDE1LCAwLjMpIiwgCiAgICAgICAgICAgICJyZ2JhKDIzMCwgMTI2LCAzNCwgMC4zKSIsICJyZ2JhKDIzMSwgNzYsIDYwLCAwLjMpIiwgInJnYmEoMTI3LCAxNDAsIDE0MSwgMC4zKSIsICJyZ2JhKDQ0LCA2MiwgODAsIDAuMykiLCAicmdiYSgyNiwgMTg4LCAxNTYsIDAuMykiLAogICAgICAgICAgICAKICAgICAgICBdCiAgICAgICAgCiAgICAgICAgY29uc3QgZGF0YSA9IHsKICAgICAgICAgICAgbGFiZWxzOiB7eyBkYXRhWyJkYXRlcyJdIHwgc2FmZSB9fSwKICAgICAgICAgICAgZGF0YXNldHM6IFsKICAgICAgICAgICAgICAgIHslIGZvciB2YWx1ZSBpbiBkYXRhWyJwcm9qIl0gJX0KICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ3t7ICgodmFsdWUgLSAxKSAqIDEwMCl8cm91bmQoMikgfX0lJywKICAgICAgICAgICAgICAgICAgICBkYXRhOiB7eyBkYXRhWyJwcm9qIl1bdmFsdWVdIH19LAogICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBmbGF0X2NvbG91cnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmZsYXRfY29sb3Vycy5sZW5ndGgpXSwKICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uOiAwLjEsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgeyUgZW5kZm9yICV9CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICd7eyBkYXRhWyJwY3VzdG9tX3ZhbHVlIl0gfX0lJywKICAgICAgICAgICAgICAgICAgICBkYXRhOiB7eyBkYXRhWyJwY3VzdG9tIl0gfX0sCiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDc1LCAxOTIsIDE5MiwgMC4zKScsCiAgICAgICAgICAgICAgICAgICAgdGVuc2lvbjogMC4xLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgXQogICAgICAgIH07CiAgICAgICAgY29uc3QgY29uZmlnMiA9IHsKICAgICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLAogICAgICAgICAgICAgICAgbGF5b3V0OiB7CiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogewogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDIwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBsdWdpbnM6ewogICAgICAgICAgICAgICAgICAgIGRhdGFsYWJlbHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNjYWxlczogewogICAgICAgICAgICAgICAgICAgIHk6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcicsCiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvU2tpcDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgbXlDaGFydCA9IG5ldyBDaGFydCgKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmVDaGFydCcpLAogICAgICAgICAgICBjb25maWcyCiAgICAgICAgKTsKICAgIDwvc2NyaXB0Pgp7JSBlbmRibG9jayAlfQo=",
        "summary": "135L | projection.html | .html | 5.0 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\static\\js\\chartjs-chart-financial.js",
        "type": ".js",
        "size_kb": 14.6,
        "content": "",
        "summary": "522L | chartjs-chart-financial.js | .js | 14.6 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\static\\js\\hammer.min.js",
        "type": ".js",
        "size_kb": 20.3,
        "content": "",
        "summary": "7L | hammer.min.js | .js | 20.3 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\static\\styles\\dashboard.css",
        "type": ".css",
        "size_kb": 1.6,
        "content": "Ym9keSB7CiAgZm9udC1zaXplOiAuODc1cmVtOwp9CgouZmVhdGhlciB7CiAgd2lkdGg6IDE2cHg7CiAgaGVpZ2h0OiAxNnB4OwogIHZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTsKfQoKLyoKICogU2lkZWJhcgogKi8KCi5zaWRlYmFyIHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdG9wOiAwOwogIC8qIHJ0bDpyYXc6CiAgcmlnaHQ6IDA7CiAgKi8KICBib3R0b206IDA7CiAgLyogcnRsOnJlbW92ZSAqLwogIGxlZnQ6IDA7CiAgei1pbmRleDogMTAwOyAvKiBCZWhpbmQgdGhlIG5hdmJhciAqLwogIHBhZGRpbmc6IDQ4cHggMCAwOyAvKiBIZWlnaHQgb2YgbmF2YmFyICovCiAgYm94LXNoYWRvdzogaW5zZXQgLTFweCAwIDAgcmdiYSgwLCAwLCAwLCAuMSk7Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA3NjcuOThweCkgewogIC5zaWRlYmFyIHsKICAgIHRvcDogNXJlbTsKICB9Cn0KCi5zaWRlYmFyLXN0aWNreSB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHRvcDogMDsKICBoZWlnaHQ6IGNhbGMoMTAwdmggLSA0OHB4KTsKICBwYWRkaW5nLXRvcDogLjVyZW07CiAgb3ZlcmZsb3cteDogaGlkZGVuOwogIG92ZXJmbG93LXk6IGF1dG87IC8qIFNjcm9sbGFibGUgY29udGVudHMgaWYgdmlld3BvcnQgaXMgc2hvcnRlciB0aGFuIGNvbnRlbnQuICovCn0KCi5zaWRlYmFyIC5uYXYtbGluayB7CiAgZm9udC13ZWlnaHQ6IDUwMDsKICBjb2xvcjogIzMzMzsKfQoKLnNpZGViYXIgLm5hdi1saW5rIC5mZWF0aGVyIHsKICBtYXJnaW4tcmlnaHQ6IDRweDsKICBjb2xvcjogIzcyNzI3MjsKfQoKLnNpZGViYXIgLm5hdi1saW5rLmFjdGl2ZSB7CiAgY29sb3I6ICMyNDcwZGM7Cn0KCi5zaWRlYmFyIC5uYXYtbGluazpob3ZlciAuZmVhdGhlciwKLnNpZGViYXIgLm5hdi1saW5rLmFjdGl2ZSAuZmVhdGhlciB7CiAgY29sb3I6IGluaGVyaXQ7Cn0KCi5zaWRlYmFyLWhlYWRpbmcgewogIGZvbnQtc2l6ZTogLjc1cmVtOwogIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Cn0KCi8qCiAqIE5hdmJhcgogKi8KCi5uYXZiYXItYnJhbmQgewogIHBhZGRpbmctdG9wOiAuNzVyZW07CiAgcGFkZGluZy1ib3R0b206IC43NXJlbTsKICBmb250LXNpemU6IDFyZW07CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAuMjUpOwogIGJveC1zaGFkb3c6IGluc2V0IC0xcHggMCAwIHJnYmEoMCwgMCwgMCwgLjI1KTsKfQoKLm5hdmJhciAubmF2YmFyLXRvZ2dsZXIgewogIHRvcDogLjI1cmVtOwogIHJpZ2h0OiAxcmVtOwp9CgoubmF2YmFyIC5mb3JtLWNvbnRyb2wgewogIHBhZGRpbmc6IC43NXJlbSAxcmVtOwogIGJvcmRlci13aWR0aDogMDsKICBib3JkZXItcmFkaXVzOiAwOwp9CgouZm9ybS1jb250cm9sLWRhcmsgewogIGNvbG9yOiAjZmZmOwogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgLjEpOwogIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAuMSk7Cn0KCi5mb3JtLWNvbnRyb2wtZGFyazpmb2N1cyB7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAuMjUpOwp9Cg==",
        "summary": "100L | dashboard.css | .css | 1.6 KB"
      },
      {
        "path": "backend\\src\\futuresboard\\static\\styles\\sidebars.css",
        "type": ".css",
        "size_kb": 1.9,
        "content": "Ym9keSB7CiAgbWluLWhlaWdodDogMTAwdmg7CiAgbWluLWhlaWdodDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTsKfQoKaHRtbCB7CiAgaGVpZ2h0OiAtd2Via2l0LWZpbGwtYXZhaWxhYmxlOwp9CgptYWluIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtd3JhcDogbm93cmFwOwogIGhlaWdodDogMTAwdmg7CiAgaGVpZ2h0OiAtd2Via2l0LWZpbGwtYXZhaWxhYmxlOwogIG1heC1oZWlnaHQ6IDEwMHZoOwogIG92ZXJmbG93LXg6IGF1dG87CiAgb3ZlcmZsb3cteTogaGlkZGVuOwp9CgouYi1leGFtcGxlLWRpdmlkZXIgewogIGZsZXgtc2hyaW5rOiAwOwogIHdpZHRoOiAxLjVyZW07CiAgaGVpZ2h0OiAxMDB2aDsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC4xKTsKICBib3JkZXI6IHNvbGlkIHJnYmEoMCwgMCwgMCwgLjE1KTsKICBib3JkZXItd2lkdGg6IDFweCAwOwogIGJveC1zaGFkb3c6IGluc2V0IDAgLjVlbSAxLjVlbSByZ2JhKDAsIDAsIDAsIC4xKSwgaW5zZXQgMCAuMTI1ZW0gLjVlbSByZ2JhKDAsIDAsIDAsIC4xNSk7Cn0KCi5iaSB7CiAgdmVydGljYWwtYWxpZ246IC0uMTI1ZW07CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgZmlsbDogY3VycmVudENvbG9yOwp9CgouZHJvcGRvd24tdG9nZ2xlIHsgb3V0bGluZTogMDsgfQoKLm5hdi1mbHVzaCAubmF2LWxpbmsgewogIGJvcmRlci1yYWRpdXM6IDA7Cn0KCi5idG4tdG9nZ2xlIHsKICBkaXNwbGF5OiBpbmxpbmUtZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIHBhZGRpbmc6IC4yNXJlbSAuNXJlbTsKICBmb250LXdlaWdodDogNjAwOwogIGNvbG9yOiByZ2JhKDAsIDAsIDAsIC42NSk7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgYm9yZGVyOiAwOwp9Ci5idG4tdG9nZ2xlOmhvdmVyLAouYnRuLXRvZ2dsZTpmb2N1cyB7CiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgLjg1KTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDJmNGVhOwp9CgouYnRuLXRvZ2dsZTo6YmVmb3JlIHsKICB3aWR0aDogMS4yNWVtOwogIGxpbmUtaGVpZ2h0OiAwOwogIGNvbnRlbnQ6IHVybCgiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScxNicgaGVpZ2h0PScxNicgdmlld0JveD0nMCAwIDE2IDE2JyUzZSUzY3BhdGggZmlsbD0nbm9uZScgc3Ryb2tlPSdyZ2JhJTI4MCwwLDAsLjUlMjknIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcgc3Ryb2tlLXdpZHRoPScyJyBkPSdNNSAxNGw2LTYtNi02Jy8lM2UlM2Mvc3ZnJTNlIik7CiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4zNXMgZWFzZTsKICB0cmFuc2Zvcm0tb3JpZ2luOiAuNWVtIDUwJTsKfQoKLmJ0bi10b2dnbGVbYXJpYS1leHBhbmRlZD0idHJ1ZSJdIHsKICBjb2xvcjogcmdiYSgwLCAwLCAwLCAuODUpOwp9Ci5idG4tdG9nZ2xlW2FyaWEtZXhwYW5kZWQ9InRydWUiXTo6YmVmb3JlIHsKICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7Cn0KCi5idG4tdG9nZ2xlLW5hdiBhIHsKICBkaXNwbGF5OiBpbmxpbmUtZmxleDsKICBwYWRkaW5nOiAuMTg3NXJlbSAuNXJlbTsKICBtYXJnaW4tdG9wOiAuMTI1cmVtOwogIG1hcmdpbi1sZWZ0OiAxLjI1cmVtOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQouYnRuLXRvZ2dsZS1uYXYgYTpob3ZlciwKLmJ0bi10b2dnbGUtbmF2IGE6Zm9jdXMgewogIGJhY2tncm91bmQtY29sb3I6ICNkMmY0ZWE7Cn0KCi5zY3JvbGxhcmVhIHsKICBvdmVyZmxvdy15OiBhdXRvOwp9CgouZnctc2VtaWJvbGQgeyBmb250LXdlaWdodDogNjAwOyB9Ci5saC10aWdodCB7IGxpbmUtaGVpZ2h0OiAxLjI1OyB9Cg==",
        "summary": "89L | sidebars.css | .css | 1.9 KB"
      },
      {
        "path": "frontend\\src\\App.css",
        "type": ".css",
        "size_kb": 0.1,
        "content": "QHRhaWx3aW5kIGJhc2U7CkB0YWlsd2luZCBjb21wb25lbnRzOwpAdGFpbHdpbmQgdXRpbGl0aWVzOwo=",
        "summary": "3L | App.css | .css | 0.1 KB"
      },
      {
        "path": "frontend\\src\\App.jsx",
        "type": ".jsx",
        "size_kb": 14.2,
        "content": "",
        "summary": "346L | App.jsx | .jsx | 14.2 KB"
      },
      {
        "path": "frontend\\src\\index.css",
        "type": ".css",
        "size_kb": 1.1,
        "content": "OnJvb3QgewogIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWksIEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICBsaW5lLWhlaWdodDogMS41OwogIGZvbnQtd2VpZ2h0OiA0MDA7CgogIGNvbG9yLXNjaGVtZTogbGlnaHQgZGFyazsKICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg3KTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjQyNDI0OwoKICBmb250LXN5bnRoZXNpczogbm9uZTsKICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5OwogIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7Cn0KCmEgewogIGZvbnQtd2VpZ2h0OiA1MDA7CiAgY29sb3I6ICM2NDZjZmY7CiAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0Owp9CmE6aG92ZXIgewogIGNvbG9yOiAjNTM1YmYyOwp9Cgpib2R5IHsKICBtYXJnaW46IDA7CiAgZGlzcGxheTogZmxleDsKICBwbGFjZS1pdGVtczogY2VudGVyOwogIG1pbi13aWR0aDogMzIwcHg7CiAgbWluLWhlaWdodDogMTAwdmg7Cn0KCmgxIHsKICBmb250LXNpemU6IDMuMmVtOwogIGxpbmUtaGVpZ2h0OiAxLjE7Cn0KCmJ1dHRvbiB7CiAgYm9yZGVyLXJhZGl1czogOHB4OwogIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50OwogIHBhZGRpbmc6IDAuNmVtIDEuMmVtOwogIGZvbnQtc2l6ZTogMWVtOwogIGZvbnQtd2VpZ2h0OiA1MDA7CiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7CiAgYmFja2dyb3VuZC1jb2xvcjogIzFhMWExYTsKICBjdXJzb3I6IHBvaW50ZXI7CiAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMjVzOwp9CmJ1dHRvbjpob3ZlciB7CiAgYm9yZGVyLWNvbG9yOiAjNjQ2Y2ZmOwp9CmJ1dHRvbjpmb2N1cywKYnV0dG9uOmZvY3VzLXZpc2libGUgewogIG91dGxpbmU6IDRweCBhdXRvIC13ZWJraXQtZm9jdXMtcmluZy1jb2xvcjsKfQoKQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogbGlnaHQpIHsKICA6cm9vdCB7CiAgICBjb2xvcjogIzIxMzU0NzsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgfQogIGE6aG92ZXIgewogICAgY29sb3I6ICM3NDdiZmY7CiAgfQogIGJ1dHRvbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5OwogIH0KfQo=",
        "summary": "68L | index.css | .css | 1.1 KB"
      },
      {
        "path": "frontend\\src\\main.jsx",
        "type": ".jsx",
        "size_kb": 0.2,
        "content": "aW1wb3J0IHsgU3RyaWN0TW9kZSB9IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCcKaW1wb3J0ICcuL2luZGV4LmNzcycKaW1wb3J0IEFwcCBmcm9tICcuL0FwcC5qc3gnCgpjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpLnJlbmRlcigKICA8U3RyaWN0TW9kZT4KICAgIDxBcHAgLz4KICA8L1N0cmljdE1vZGU+LAopCg==",
        "summary": "10L | main.jsx | .jsx | 0.2 KB"
      },
      {
        "path": "frontend\\src\\components\\Badge.tsx",
        "type": ".tsx",
        "size_kb": 1.7,
        "content": "Ly8gVHJlbW9yIFJhdyBCYWRnZSBbdjAuMC4wXQoKaW1wb3J0IFJlYWN0IGZyb20gInJlYWN0IgppbXBvcnQgeyB0diwgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tICJ0YWlsd2luZC12YXJpYW50cyIKCmltcG9ydCB7IGN4IH0gZnJvbSAiQC9saWIvdXRpbHMiCgpjb25zdCBiYWRnZVZhcmlhbnRzID0gdHYoewogIGJhc2U6IGN4KAogICAgImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBnYXAteC0xIHdoaXRlc3BhY2Utbm93cmFwIHJvdW5kZWQgcHgtMS41IHB5LTAuNSB0ZXh0LXhzIGZvbnQtc2VtaWJvbGQgcmluZy0xIiwKICApLAogIHZhcmlhbnRzOiB7CiAgICB2YXJpYW50OiB7CiAgICAgIGRlZmF1bHQ6IFsKICAgICAgICAiYmctaW5kaWdvLTUwIHRleHQtaW5kaWdvLTgwMCByaW5nLWluZGlnby01MDAvMzAiLAogICAgICAgICJkYXJrOmJnLWluZGlnby00MDAvMTAgZGFyazp0ZXh0LWluZGlnby00MDAgZGFyazpyaW5nLWluZGlnby00MDAvMzAiLAogICAgICBdLAogICAgICBuZXV0cmFsOiBbCiAgICAgICAgImJnLWdyYXktNTAgdGV4dC1ncmF5LTcwMCByaW5nLWdyYXktNTAwLzMwIiwKICAgICAgICAiZGFyazpiZy1ncmF5LTQwMC8xMCBkYXJrOnRleHQtZ3JheS0zMDAgZGFyazpyaW5nLWdyYXktNDAwLzIwIiwKICAgICAgXSwKICAgICAgc3VjY2VzczogWwogICAgICAgICJiZy1lbWVyYWxkLTUwIHRleHQtZW1lcmFsZC04MDAgcmluZy1lbWVyYWxkLTYwMC8zMCIsCiAgICAgICAgImRhcms6YmctZW1lcmFsZC00MDAvMTAgZGFyazp0ZXh0LWVtZXJhbGQtNDAwIGRhcms6cmluZy1lbWVyYWxkLTQwMC8yMCIsCiAgICAgIF0sCiAgICAgIGVycm9yOiBbCiAgICAgICAgImJnLXJlZC01MCB0ZXh0LXJlZC04MDAgcmluZy1yZWQtNjAwLzIwIiwKICAgICAgICAiZGFyazpiZy1yZWQtNDAwLzEwIGRhcms6dGV4dC1yZWQtNDAwIGRhcms6cmluZy1yZWQtNDAwLzIwIiwKICAgICAgXSwKICAgICAgd2FybmluZzogWwogICAgICAgICJiZy15ZWxsb3ctNTAgdGV4dC15ZWxsb3ctODAwIHJpbmcteWVsbG93LTYwMC8zMCIsCiAgICAgICAgImRhcms6YmcteWVsbG93LTQwMC8xMCBkYXJrOnRleHQteWVsbG93LTUwMCBkYXJrOnJpbmcteWVsbG93LTQwMC8yMCIsCiAgICAgIF0sCiAgICB9LAogIH0sCiAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICB2YXJpYW50OiAiZGVmYXVsdCIsCiAgfSwKfSkKCmludGVyZmFjZSBCYWRnZVByb3BzCiAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8InNwYW4iPiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgYmFkZ2VWYXJpYW50cz4ge30KCmNvbnN0IEJhZGdlID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MU3BhbkVsZW1lbnQsIEJhZGdlUHJvcHM+KAogICh7IGNsYXNzTmFtZSwgdmFyaWFudCwgLi4ucHJvcHMgfTogQmFkZ2VQcm9wcywgZm9yd2FyZGVkUmVmKSA9PiB7CiAgICByZXR1cm4gKAogICAgICA8c3BhbgogICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfQogICAgICAgIGNsYXNzTmFtZT17Y3goYmFkZ2VWYXJpYW50cyh7IHZhcmlhbnQgfSksIGNsYXNzTmFtZSl9CiAgICAgICAgey4uLnByb3BzfQogICAgICAvPgogICAgKQogIH0sCikKCkJhZGdlLmRpc3BsYXlOYW1lID0gIkJhZGdlIgoKZXhwb3J0IHsgQmFkZ2UsIGJhZGdlVmFyaWFudHMsIHR5cGUgQmFkZ2VQcm9wcyB9Cg==",
        "summary": "59L | Badge.tsx | .tsx | 1.7 KB"
      },
      {
        "path": "frontend\\src\\components\\Button.tsx",
        "type": ".tsx",
        "size_kb": 4.1,
        "content": "Ly8gVHJlbW9yIFJhdyBCdXR0b24gW3YwLjEuMV0KCmltcG9ydCB7IFNsb3QgfSBmcm9tICJAcmFkaXgtdWkvcmVhY3Qtc2xvdCIKaW1wb3J0IHsgUmlMb2FkZXIyRmlsbCB9IGZyb20gIkByZW1peGljb24vcmVhY3QiCmltcG9ydCBSZWFjdCBmcm9tICJyZWFjdCIKaW1wb3J0IHsgdHYsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAidGFpbHdpbmQtdmFyaWFudHMiCgppbXBvcnQgeyBjeCwgZm9jdXNSaW5nIH0gZnJvbSAiQC9saWIvdXRpbHMiCgpjb25zdCBidXR0b25WYXJpYW50cyA9IHR2KHsKICBiYXNlOiBbCiAgICAvLyBiYXNlCiAgICAicmVsYXRpdmUgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHdoaXRlc3BhY2Utbm93cmFwIHJvdW5kZWQtbWQgYm9yZGVyIHB4LTMgcHktMiB0ZXh0LWNlbnRlciB0ZXh0LXNtIGZvbnQtbWVkaXVtIHNoYWRvdy1zbSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0xMDAgZWFzZS1pbi1vdXQgc206dGV4dC1zbSIsCiAgICAvLyBkaXNhYmxlZAogICAgImRpc2FibGVkOnBvaW50ZXItZXZlbnRzLW5vbmUgZGlzYWJsZWQ6c2hhZG93LW5vbmUiLAogICAgLy8gZm9jdXMKICAgIGZvY3VzUmluZywKICBdLAogIHZhcmlhbnRzOiB7CiAgICB2YXJpYW50OiB7CiAgICAgIHByaW1hcnk6IFsKICAgICAgICAvLyBib3JkZXIKICAgICAgICAiYm9yZGVyLXRyYW5zcGFyZW50IiwKICAgICAgICAvLyB0ZXh0IGNvbG9yCiAgICAgICAgInRleHQtd2hpdGUgZGFyazp0ZXh0LWdyYXktOTAwIiwKICAgICAgICAvLyBiYWNrZ3JvdW5kIGNvbG9yCiAgICAgICAgImJnLWdyYXktOTAwIGRhcms6YmctZ3JheS01MCIsCiAgICAgICAgLy8gaG92ZXIgY29sb3IKICAgICAgICAiaG92ZXI6YmctZ3JheS04MDAgZGFyazpob3ZlcjpiZy1ncmF5LTIwMCIsCiAgICAgICAgLy8gZGlzYWJsZWQKICAgICAgICAiZGlzYWJsZWQ6YmctZ3JheS0xMDAgZGlzYWJsZWQ6dGV4dC1ncmF5LTQwMCIsCiAgICAgICAgImRpc2FibGVkOmRhcms6YmctZ3JheS04MDAgZGlzYWJsZWQ6ZGFyazp0ZXh0LWdyYXktNjAwIiwKICAgICAgXSwKICAgICAgc2Vjb25kYXJ5OiBbCiAgICAgICAgLy8gYm9yZGVyCiAgICAgICAgImJvcmRlci1ncmF5LTMwMCBkYXJrOmJvcmRlci1ncmF5LTgwMCIsCiAgICAgICAgLy8gdGV4dCBjb2xvcgogICAgICAgICJ0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTUwIiwKICAgICAgICAvLyBiYWNrZ3JvdW5kIGNvbG9yCiAgICAgICAgImJnLXdoaXRlIGRhcms6YmctZ3JheS05NTAiLAogICAgICAgIC8vaG92ZXIgY29sb3IKICAgICAgICAiaG92ZXI6YmctZ3JheS01MCBkYXJrOmhvdmVyOmJnLWdyYXktOTAwLzYwIiwKICAgICAgICAvLyBkaXNhYmxlZAogICAgICAgICJkaXNhYmxlZDp0ZXh0LWdyYXktNDAwIiwKICAgICAgICAiZGlzYWJsZWQ6ZGFyazp0ZXh0LWdyYXktNjAwIiwKICAgICAgXSwKICAgICAgbGlnaHQ6IFsKICAgICAgICAvLyBiYXNlCiAgICAgICAgInNoYWRvdy1ub25lIiwKICAgICAgICAvLyBib3JkZXIKICAgICAgICAiYm9yZGVyLXRyYW5zcGFyZW50IiwKICAgICAgICAvLyB0ZXh0IGNvbG9yCiAgICAgICAgInRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktNTAiLAogICAgICAgIC8vIGJhY2tncm91bmQgY29sb3IKICAgICAgICAiYmctZ3JheS0yMDAgZGFyazpiZy1ncmF5LTkwMCIsCiAgICAgICAgLy8gaG92ZXIgY29sb3IKICAgICAgICAiaG92ZXI6YmctZ3JheS0zMDAvNzAgZGFyazpob3ZlcjpiZy1ncmF5LTgwMC84MCIsCiAgICAgICAgLy8gZGlzYWJsZWQKICAgICAgICAiZGlzYWJsZWQ6YmctZ3JheS0xMDAgZGlzYWJsZWQ6dGV4dC1ncmF5LTQwMCIsCiAgICAgICAgImRpc2FibGVkOmRhcms6YmctZ3JheS04MDAgZGlzYWJsZWQ6ZGFyazp0ZXh0LWdyYXktNjAwIiwKICAgICAgXSwKICAgICAgZ2hvc3Q6IFsKICAgICAgICAvLyBiYXNlCiAgICAgICAgInNoYWRvdy1ub25lIiwKICAgICAgICAvLyBib3JkZXIKICAgICAgICAiYm9yZGVyLXRyYW5zcGFyZW50IiwKICAgICAgICAvLyB0ZXh0IGNvbG9yCiAgICAgICAgInRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktNTAiLAogICAgICAgIC8vIGhvdmVyIGNvbG9yCiAgICAgICAgImJnLXRyYW5zcGFyZW50IGhvdmVyOmJnLWdyYXktMTAwIGRhcms6aG92ZXI6YmctZ3JheS04MDAvODAiLAogICAgICAgIC8vIGRpc2FibGVkCiAgICAgICAgImRpc2FibGVkOnRleHQtZ3JheS00MDAiLAogICAgICAgICJkaXNhYmxlZDpkYXJrOnRleHQtZ3JheS02MDAiLAogICAgICBdLAogICAgICBkZXN0cnVjdGl2ZTogWwogICAgICAgIC8vIHRleHQgY29sb3IKICAgICAgICAidGV4dC13aGl0ZSIsCiAgICAgICAgLy8gYm9yZGVyCiAgICAgICAgImJvcmRlci10cmFuc3BhcmVudCIsCiAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgICAgICJiZy1yZWQtNjAwIGRhcms6YmctcmVkLTcwMCIsCiAgICAgICAgLy8gaG92ZXIgY29sb3IKICAgICAgICAiaG92ZXI6YmctcmVkLTcwMCBkYXJrOmhvdmVyOmJnLXJlZC02MDAiLAogICAgICAgIC8vIGRpc2FibGVkCiAgICAgICAgImRpc2FibGVkOmJnLXJlZC0zMDAgZGlzYWJsZWQ6dGV4dC13aGl0ZSIsCiAgICAgICAgImRpc2FibGVkOmRhcms6YmctcmVkLTk1MCBkaXNhYmxlZDpkYXJrOnRleHQtcmVkLTQwMCIsCiAgICAgIF0sCiAgICB9LAogIH0sCiAgZGVmYXVsdFZhcmlhbnRzOiB7CiAgICB2YXJpYW50OiAicHJpbWFyeSIsCiAgfSwKfSkKCmludGVyZmFjZSBCdXR0b25Qcm9wcwogIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCJidXR0b24iPiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgYnV0dG9uVmFyaWFudHM+IHsKICBhc0NoaWxkPzogYm9vbGVhbgogIGlzTG9hZGluZz86IGJvb2xlYW4KICBsb2FkaW5nVGV4dD86IHN0cmluZwp9Cgpjb25zdCBCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxCdXR0b25FbGVtZW50LCBCdXR0b25Qcm9wcz4oCiAgKAogICAgewogICAgICBhc0NoaWxkLAogICAgICBpc0xvYWRpbmcgPSBmYWxzZSwKICAgICAgbG9hZGluZ1RleHQsCiAgICAgIGNsYXNzTmFtZSwKICAgICAgZGlzYWJsZWQsCiAgICAgIHZhcmlhbnQsCiAgICAgIGNoaWxkcmVuLAogICAgICAuLi5wcm9wcwogICAgfTogQnV0dG9uUHJvcHMsCiAgICBmb3J3YXJkZWRSZWYsCiAgKSA9PiB7CiAgICBjb25zdCBDb21wb25lbnQgPSBhc0NoaWxkID8gU2xvdCA6ICJidXR0b24iCiAgICByZXR1cm4gKAogICAgICA8Q29tcG9uZW50CiAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9CiAgICAgICAgY2xhc3NOYW1lPXtjeChidXR0b25WYXJpYW50cyh7IHZhcmlhbnQgfSksIGNsYXNzTmFtZSl9CiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkIHx8IGlzTG9hZGluZ30KICAgICAgICB7Li4ucHJvcHN9CiAgICAgID4KICAgICAgICB7aXNMb2FkaW5nID8gKAogICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJwb2ludGVyLWV2ZW50cy1ub25lIGZsZXggc2hyaW5rLTAgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0xLjUiPgogICAgICAgICAgICA8UmlMb2FkZXIyRmlsbAogICAgICAgICAgICAgIGNsYXNzTmFtZT0ic2l6ZS00IHNocmluay0wIGFuaW1hdGUtc3BpbiIKICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgLz4KICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJzci1vbmx5Ij4KICAgICAgICAgICAgICB7bG9hZGluZ1RleHQgPyBsb2FkaW5nVGV4dCA6ICJMb2FkaW5nIn0KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICB7bG9hZGluZ1RleHQgPyBsb2FkaW5nVGV4dCA6IGNoaWxkcmVufQogICAgICAgICAgPC9zcGFuPgogICAgICAgICkgOiAoCiAgICAgICAgICBjaGlsZHJlbgogICAgICAgICl9CiAgICAgIDwvQ29tcG9uZW50PgogICAgKQogIH0sCikKCkJ1dHRvbi5kaXNwbGF5TmFtZSA9ICJCdXR0b24iCgpleHBvcnQgeyBCdXR0b24sIGJ1dHRvblZhcmlhbnRzLCB0eXBlIEJ1dHRvblByb3BzIH0K",
        "summary": "146L | Button.tsx | .tsx | 4.1 KB"
      },
      {
        "path": "frontend\\src\\components\\Calendar.tsx",
        "type": ".tsx",
        "size_kb": 10.1,
        "content": "",
        "summary": "319L | Calendar.tsx | .tsx | 10.1 KB"
      },
      {
        "path": "frontend\\src\\components\\DatePicker.tsx",
        "type": ".tsx",
        "size_kb": 34.3,
        "content": "Ly8gVHJlbW9yIERhdGUgUGlja2VyIFt2MS4wLjVdCgoidXNlIGNsaWVudCIKCmltcG9ydCB7IFRpbWUgfSBmcm9tICJAaW50ZXJuYXRpb25hbGl6ZWQvZGF0ZSIKaW1wb3J0ICogYXMgUG9wb3ZlclByaW1pdGl2ZXMgZnJvbSAiQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXIiCmltcG9ydCB7CiAgQXJpYVRpbWVGaWVsZFByb3BzLAogIFRpbWVWYWx1ZSwKICB1c2VEYXRlU2VnbWVudCwKICB1c2VUaW1lRmllbGQsCn0gZnJvbSAiQHJlYWN0LWFyaWEvZGF0ZXBpY2tlciIKaW1wb3J0IHsKICB1c2VUaW1lRmllbGRTdGF0ZSwKICB0eXBlIERhdGVGaWVsZFN0YXRlLAogIHR5cGUgRGF0ZVNlZ21lbnQsCn0gZnJvbSAiQHJlYWN0LXN0YXRlbHkvZGF0ZXBpY2tlciIKaW1wb3J0IHsgUmlDYWxlbmRhcjJGaWxsLCBSaVN1YnRyYWN0RmlsbCB9IGZyb20gIkByZW1peGljb24vcmVhY3QiCmltcG9ydCB7IGZvcm1hdCwgdHlwZSBMb2NhbGUgfSBmcm9tICJkYXRlLWZucyIKaW1wb3J0IHsgZW5VUyB9IGZyb20gImRhdGUtZm5zL2xvY2FsZSIKaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAicmVhY3QiCmltcG9ydCB7IHR2LCBWYXJpYW50UHJvcHMgfSBmcm9tICJ0YWlsd2luZC12YXJpYW50cyIKCmltcG9ydCB7IGN4LCBmb2N1c0lucHV0LCBmb2N1c1JpbmcsIGhhc0Vycm9ySW5wdXQgfSBmcm9tICJAL2xpYi91dGlscyIKCmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gIi4vQnV0dG9uIgppbXBvcnQgeyBDYWxlbmRhciBhcyBDYWxlbmRhclByaW1pdGl2ZSwgdHlwZSBNYXRjaGVyIH0gZnJvbSAiLi9DYWxlbmRhciIKCi8vI3JlZ2lvbiBUaW1lSW5wdXQKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY29uc3QgaXNCcm93c2VyTG9jYWxlQ2xvY2tUeXBlMjRoID0gKCkgPT4gewogIGNvbnN0IGxhbmd1YWdlID0KICAgIHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSA6ICJlbi1VUyIKCiAgY29uc3QgaHIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsYW5ndWFnZSwgewogICAgaG91cjogIm51bWVyaWMiLAogIH0pLmZvcm1hdCgpCgogIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKE51bWJlcihocikpCn0KCnR5cGUgVGltZVNlZ21lbnRQcm9wcyA9IHsKICBzZWdtZW50OiBEYXRlU2VnbWVudAogIHN0YXRlOiBEYXRlRmllbGRTdGF0ZQp9Cgpjb25zdCBUaW1lU2VnbWVudCA9ICh7IHNlZ21lbnQsIHN0YXRlIH06IFRpbWVTZWdtZW50UHJvcHMpID0+IHsKICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpCgogIGNvbnN0IHsgc2VnbWVudFByb3BzIH0gPSB1c2VEYXRlU2VnbWVudChzZWdtZW50LCBzdGF0ZSwgcmVmKQoKICBjb25zdCBpc0NvbG9uID0gc2VnbWVudC50eXBlID09PSAibGl0ZXJhbCIgJiYgc2VnbWVudC50ZXh0ID09PSAiOiIKICBjb25zdCBpc1NwYWNlID0gc2VnbWVudC50eXBlID09PSAibGl0ZXJhbCIgJiYgc2VnbWVudC50ZXh0ID09PSAiICIKCiAgY29uc3QgaXNEZWNvcmF0b3IgPSBpc0NvbG9uIHx8IGlzU3BhY2UKCiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgey4uLnNlZ21lbnRQcm9wc30KICAgICAgcmVmPXtyZWZ9CiAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgLy8gYmFzZQogICAgICAgICJyZWxhdGl2ZSBibG9jayB3LWZ1bGwgYXBwZWFyYW5jZS1ub25lIHJvdW5kZWQtbWQgYm9yZGVyIHB4LTIuNSBweS0xLjUgdGV4dC1sZWZ0IHVwcGVyY2FzZSB0YWJ1bGFyLW51bXMgc2hhZG93LXNtIG91dGxpbmUtbm9uZSB0cmFuc2l0aW9uIHNtOnRleHQtc20iLAogICAgICAgIC8vIGJvcmRlciBjb2xvcgogICAgICAgICJib3JkZXItZ3JheS0zMDAgZGFyazpib3JkZXItZ3JheS04MDAiLAogICAgICAgIC8vIHRleHQgY29sb3IKICAgICAgICAidGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCIsCiAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgICAgICJiZy13aGl0ZSBkYXJrOmJnLWdyYXktOTUwIiwKICAgICAgICAvLyBmb2N1cwogICAgICAgIGZvY3VzSW5wdXQsCiAgICAgICAgLy8gaW52YWxpZCAob3B0aW9uYWwpCiAgICAgICAgImludmFsaWQ6Ym9yZGVyLXJlZC01MDAgaW52YWxpZDpyaW5nLTIgaW52YWxpZDpyaW5nLXJlZC0yMDAgZ3JvdXAtYXJpYS1baW52YWxpZD10cnVlXS90aW1lLWlucHV0OmJvcmRlci1yZWQtNTAwIGdyb3VwLWFyaWEtW2ludmFsaWQ9dHJ1ZV0vdGltZS1pbnB1dDpyaW5nLTIgZ3JvdXAtYXJpYS1baW52YWxpZD10cnVlXS90aW1lLWlucHV0OnJpbmctcmVkLTIwMCBncm91cC1hcmlhLVtpbnZhbGlkPXRydWVdL3RpbWUtaW5wdXQ6ZGFyazpyaW5nLXJlZC00MDAvMjAiLAogICAgICAgIHsKICAgICAgICAgICIhdy1maXQgYm9yZGVyLW5vbmUgYmctdHJhbnNwYXJlbnQgcHgtMCB0ZXh0LWdyYXktNDAwIHNoYWRvdy1ub25lIjoKICAgICAgICAgICAgaXNEZWNvcmF0b3IsCiAgICAgICAgICBoaWRkZW46IGlzU3BhY2UsCiAgICAgICAgICAiYm9yZGVyLWdyYXktMzAwIGJnLWdyYXktMTAwIHRleHQtZ3JheS00MDAgZGFyazpib3JkZXItZ3JheS03MDAgZGFyazpiZy1ncmF5LTgwMCBkYXJrOnRleHQtZ3JheS01MDAiOgogICAgICAgICAgICBzdGF0ZS5pc0Rpc2FibGVkLAogICAgICAgICAgIiFiZy10cmFuc3BhcmVudCAhdGV4dC1ncmF5LTQwMCI6ICFzZWdtZW50LmlzRWRpdGFibGUsCiAgICAgICAgfSwKICAgICAgKX0KICAgID4KICAgICAgPHNwYW4KICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgICAgInBvaW50ZXItZXZlbnRzLW5vbmUgYmxvY2sgdy1mdWxsIHRleHQtbGVmdCB0ZXh0LWdyYXktNzAwIHNtOnRleHQtc20iLAogICAgICAgICAgewogICAgICAgICAgICBoaWRkZW46ICFzZWdtZW50LmlzUGxhY2Vob2xkZXIsCiAgICAgICAgICAgICJoLTAiOiAhc2VnbWVudC5pc1BsYWNlaG9sZGVyLAogICAgICAgICAgfSwKICAgICAgICApfQogICAgICA+CiAgICAgICAge3NlZ21lbnQucGxhY2Vob2xkZXJ9CiAgICAgIDwvc3Bhbj4KICAgICAge3NlZ21lbnQuaXNQbGFjZWhvbGRlciA/ICIgIiA6IHNlZ21lbnQudGV4dH0KICAgIDwvZGl2PgogICkKfQoKdHlwZSBUaW1lSW5wdXRQcm9wcyA9IE9taXQ8CiAgQXJpYVRpbWVGaWVsZFByb3BzPFRpbWVWYWx1ZT4sCiAgImxhYmVsIiB8ICJzaG91bGRGb3JjZUxlYWRpbmdaZXJvcyIgfCAiZGVzY3JpcHRpb24iIHwgImVycm9yTWVzc2FnZSIKPgoKY29uc3QgVGltZUlucHV0ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgVGltZUlucHV0UHJvcHM+KAogICh7IGhvdXJDeWNsZSwgLi4ucHJvcHMgfTogVGltZUlucHV0UHJvcHMsIHJlZikgPT4gewogICAgY29uc3QgaW5uZXJSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpCgogICAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZTxIVE1MRGl2RWxlbWVudCB8IG51bGwsIEhUTUxEaXZFbGVtZW50IHwgbnVsbD4oCiAgICAgIHJlZiwKICAgICAgKCkgPT4gaW5uZXJSZWY/LmN1cnJlbnQsCiAgICApCgogICAgY29uc3QgbG9jYWxlID0gd2luZG93ICE9PSB1bmRlZmluZWQgPyB3aW5kb3cubmF2aWdhdG9yLmxhbmd1YWdlIDogImVuLVVTIgoKICAgIGNvbnN0IHN0YXRlID0gdXNlVGltZUZpZWxkU3RhdGUoewogICAgICBob3VyQ3ljbGU6IGhvdXJDeWNsZSwKICAgICAgbG9jYWxlOiBsb2NhbGUsCiAgICAgIHNob3VsZEZvcmNlTGVhZGluZ1plcm9zOiB0cnVlLAogICAgICBhdXRvRm9jdXM6IHRydWUsCiAgICAgIC4uLnByb3BzLAogICAgfSkKCiAgICBjb25zdCB7IGZpZWxkUHJvcHMgfSA9IHVzZVRpbWVGaWVsZCgKICAgICAgewogICAgICAgIC4uLnByb3BzLAogICAgICAgIGhvdXJDeWNsZTogaG91ckN5Y2xlLAogICAgICAgIHNob3VsZEZvcmNlTGVhZGluZ1plcm9zOiB0cnVlLAogICAgICB9LAogICAgICBzdGF0ZSwKICAgICAgaW5uZXJSZWYsCiAgICApCgogICAgcmV0dXJuICgKICAgICAgPGRpdgogICAgICAgIHsuLi5maWVsZFByb3BzfQogICAgICAgIHJlZj17aW5uZXJSZWZ9CiAgICAgICAgY2xhc3NOYW1lPSJncm91cC90aW1lLWlucHV0IGlubGluZS1mbGV4IHctZnVsbCBnYXAteC0yIgogICAgICA+CiAgICAgICAge3N0YXRlLnNlZ21lbnRzLm1hcCgoc2VnbWVudCwgaSkgPT4gKAogICAgICAgICAgPFRpbWVTZWdtZW50IGtleT17aX0gc2VnbWVudD17c2VnbWVudH0gc3RhdGU9e3N0YXRlfSAvPgogICAgICAgICkpfQogICAgICA8L2Rpdj4KICAgICkKICB9LAopClRpbWVJbnB1dC5kaXNwbGF5TmFtZSA9ICJUaW1lSW5wdXQiCgovLyNyZWdpb24gVHJpZ2dlcgovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cgpjb25zdCB0cmlnZ2VyU3R5bGVzID0gdHYoewogIGJhc2U6IFsKICAgIC8vIGJhc2UKICAgICJwZWVyIGZsZXggdy1mdWxsIGN1cnNvci1wb2ludGVyIGFwcGVhcmFuY2Utbm9uZSBpdGVtcy1jZW50ZXIgZ2FwLXgtMiB0cnVuY2F0ZSByb3VuZGVkLW1kIGJvcmRlciBweC0zIHB5LTIgc2hhZG93LXNtIG91dGxpbmUtbm9uZSB0cmFuc2l0aW9uLWFsbCBzbTp0ZXh0LXNtIiwKICAgIC8vIGJhY2tncm91bmQgY29sb3IKICAgICJiZy13aGl0ZSBkYXJrOmJnLWdyYXktOTUwIiwKICAgIC8vIGJvcmRlciBjb2xvcgogICAgImJvcmRlci1ncmF5LTMwMCBkYXJrOmJvcmRlci1ncmF5LTgwMCIsCiAgICAvLyB0ZXh0IGNvbG9yCiAgICAidGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCIsCiAgICAvLyBwbGFjZWhvbGRlciBjb2xvcgogICAgInBsYWNlaG9sZGVyLWdyYXktNDAwIGRhcms6cGxhY2Vob2xkZXItZ3JheS01MDAiLAogICAgLy8gaG92ZXIKICAgICJob3ZlcjpiZy1ncmF5LTUwIGhvdmVyOmRhcms6YmctZ3JheS05NTAvNTAiLAogICAgLy8gZGlzYWJsZWQKICAgICJkaXNhYmxlZDpwb2ludGVyLWV2ZW50cy1ub25lIiwKICAgICJkaXNhYmxlZDpiZy1ncmF5LTEwMCBkaXNhYmxlZDp0ZXh0LWdyYXktNDAwIiwKICAgICJkaXNhYmxlZDpkYXJrOmJvcmRlci1ncmF5LTgwMCBkaXNhYmxlZDpkYXJrOmJnLWdyYXktODAwIGRpc2FibGVkOmRhcms6dGV4dC1ncmF5LTUwMCIsCiAgICAvLyBmb2N1cwogICAgZm9jdXNJbnB1dCwKICAgIC8vIGludmFsaWQgKG9wdGlvbmFsKQogICAgLy8gImFyaWEtW2ludmFsaWQ9dHJ1ZV06ZGFyazpyaW5nLXJlZC00MDAvMjAgYXJpYS1baW52YWxpZD10cnVlXTpyaW5nLTIgYXJpYS1baW52YWxpZD10cnVlXTpyaW5nLXJlZC0yMDAgYXJpYS1baW52YWxpZD10cnVlXTpib3JkZXItcmVkLTUwMCBpbnZhbGlkOnJpbmctMiBpbnZhbGlkOnJpbmctcmVkLTIwMCBpbnZhbGlkOmJvcmRlci1yZWQtNTAwIgogIF0sCiAgdmFyaWFudHM6IHsKICAgIGhhc0Vycm9yOiB7CiAgICAgIHRydWU6IGhhc0Vycm9ySW5wdXQsCiAgICB9LAogIH0sCn0pCgppbnRlcmZhY2UgVHJpZ2dlclByb3BzCiAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRQcm9wczwiYnV0dG9uIj4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIHRyaWdnZXJTdHlsZXM+IHsKICBwbGFjZWhvbGRlcj86IHN0cmluZwp9Cgpjb25zdCBUcmlnZ2VyID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgVHJpZ2dlclByb3BzPigKICAoCiAgICB7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIHBsYWNlaG9sZGVyLCBoYXNFcnJvciwgLi4ucHJvcHMgfTogVHJpZ2dlclByb3BzLAogICAgZm9yd2FyZGVkUmVmLAogICkgPT4gewogICAgcmV0dXJuICgKICAgICAgPFBvcG92ZXJQcmltaXRpdmVzLlRyaWdnZXIgYXNDaGlsZD4KICAgICAgICA8YnV0dG9uCiAgICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgICAgIGNsYXNzTmFtZT17Y3godHJpZ2dlclN0eWxlcyh7IGhhc0Vycm9yIH0pLCBjbGFzc05hbWUpfQogICAgICAgICAgey4uLnByb3BzfQogICAgICAgID4KICAgICAgICAgIDxSaUNhbGVuZGFyMkZpbGwgY2xhc3NOYW1lPSJzaXplLTUgc2hyaW5rLTAgdGV4dC1ncmF5LTQwMCBkYXJrOnRleHQtZ3JheS02MDAiIC8+CiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9ImZsZXgtMSBvdmVyZmxvdy1oaWRkZW4gdGV4dC1lbGxpcHNpcyB3aGl0ZXNwYWNlLW5vd3JhcCB0ZXh0LWxlZnQgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCI+CiAgICAgICAgICAgIHtjaGlsZHJlbiA/ICgKICAgICAgICAgICAgICBjaGlsZHJlbgogICAgICAgICAgICApIDogcGxhY2Vob2xkZXIgPyAoCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJ0ZXh0LWdyYXktNDAwIGRhcms6dGV4dC1ncmF5LTYwMCI+CiAgICAgICAgICAgICAgICB7cGxhY2Vob2xkZXJ9CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICApIDogbnVsbH0KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9Qb3BvdmVyUHJpbWl0aXZlcy5UcmlnZ2VyPgogICAgKQogIH0sCikKClRyaWdnZXIuZGlzcGxheU5hbWUgPSAiRGF0ZVBpY2tlci5UcmlnZ2VyIgoKLy8jcmVnaW9uIFBvcG92ZXIKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY29uc3QgQ2FsZW5kYXJQb3BvdmVyID0gUmVhY3QuZm9yd2FyZFJlZjwKICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBQb3BvdmVyUHJpbWl0aXZlcy5Db250ZW50PiwKICBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgUG9wb3ZlclByaW1pdGl2ZXMuQ29udGVudD4KPigoeyBhbGlnbiwgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7CiAgcmV0dXJuICgKICAgIDxQb3BvdmVyUHJpbWl0aXZlcy5Qb3J0YWw+CiAgICAgIDxQb3BvdmVyUHJpbWl0aXZlcy5Db250ZW50CiAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9CiAgICAgICAgc2lkZU9mZnNldD17MTB9CiAgICAgICAgc2lkZT0iYm90dG9tIgogICAgICAgIGFsaWduPXthbGlnbn0KICAgICAgICBhdm9pZENvbGxpc2lvbnMKICAgICAgICBvbk9wZW5BdXRvRm9jdXM9eyhlKSA9PiBlLnByZXZlbnREZWZhdWx0KCl9CiAgICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAgIC8vIGJhc2UKICAgICAgICAgICJyZWxhdGl2ZSB6LTUwIHctZml0IHJvdW5kZWQtbWQgYm9yZGVyIHRleHQtc20gc2hhZG93LXhsIHNoYWRvdy1ibGFjay9bMi41JV0iLAogICAgICAgICAgLy8gd2lkdGhzCiAgICAgICAgICAibWluLXctW2NhbGModmFyKC0tcmFkaXgtc2VsZWN0LXRyaWdnZXItd2lkdGgpLTJweCldIG1heC13LVs5NXZ3XSIsCiAgICAgICAgICAvLyBib3JkZXIgY29sb3IKICAgICAgICAgICJib3JkZXItZ3JheS0yMDAgZGFyazpib3JkZXItZ3JheS04MDAiLAogICAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgICAgICAgImJnLXdoaXRlIGRhcms6YmctZ3JheS05NTAiLAogICAgICAgICAgLy8gdHJhbnNpdGlvbgogICAgICAgICAgIndpbGwtY2hhbmdlLVt0cmFuc2Zvcm0sb3BhY2l0eV0iLAogICAgICAgICAgImRhdGEtW3N0YXRlPWNsb3NlZF06YW5pbWF0ZS1oaWRlIiwKICAgICAgICAgICJkYXRhLVtzdGF0ZT1vcGVuXTpkYXRhLVtzaWRlPWJvdHRvbV06YW5pbWF0ZS1zbGlkZURvd25BbmRGYWRlIGRhdGEtW3N0YXRlPW9wZW5dOmRhdGEtW3NpZGU9bGVmdF06YW5pbWF0ZS1zbGlkZUxlZnRBbmRGYWRlIGRhdGEtW3N0YXRlPW9wZW5dOmRhdGEtW3NpZGU9cmlnaHRdOmFuaW1hdGUtc2xpZGVSaWdodEFuZEZhZGUgZGF0YS1bc3RhdGU9b3Blbl06ZGF0YS1bc2lkZT10b3BdOmFuaW1hdGUtc2xpZGVVcEFuZEZhZGUiLAogICAgICAgICAgY2xhc3NOYW1lLAogICAgICAgICl9CiAgICAgICAgey4uLnByb3BzfQogICAgICA+CiAgICAgICAge2NoaWxkcmVufQogICAgICA8L1BvcG92ZXJQcmltaXRpdmVzLkNvbnRlbnQ+CiAgICA8L1BvcG92ZXJQcmltaXRpdmVzLlBvcnRhbD4KICApCn0pCgpDYWxlbmRhclBvcG92ZXIuZGlzcGxheU5hbWUgPSAiRGF0ZVBpY2tlci5DYWxlbmRhclBvcG92ZXIiCgovLyNyZWdpb24gUHJlc2V0Ci8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCnR5cGUgRGF0ZVJhbmdlID0gewogIGZyb206IERhdGUgfCB1bmRlZmluZWQKICB0bz86IERhdGUgfCB1bmRlZmluZWQKfQoKaW50ZXJmYWNlIFByZXNldCB7CiAgbGFiZWw6IHN0cmluZwp9CgppbnRlcmZhY2UgRGF0ZVByZXNldCBleHRlbmRzIFByZXNldCB7CiAgZGF0ZTogRGF0ZQp9CgppbnRlcmZhY2UgRGF0ZVJhbmdlUHJlc2V0IGV4dGVuZHMgUHJlc2V0IHsKICBkYXRlUmFuZ2U6IERhdGVSYW5nZQp9Cgp0eXBlIFByZXNldENvbnRhaW5lclByb3BzPFRQcmVzZXQgZXh0ZW5kcyBQcmVzZXQsIFRWYWx1ZT4gPSB7CiAgcHJlc2V0czogVFByZXNldFtdCiAgb25TZWxlY3Q6ICh2YWx1ZTogVFZhbHVlKSA9PiB2b2lkCiAgY3VycmVudFZhbHVlPzogVFZhbHVlCn0KCmNvbnN0IFByZXNldENvbnRhaW5lciA9IDxUUHJlc2V0IGV4dGVuZHMgUHJlc2V0LCBUVmFsdWU+KHsKICAvLyBBdmFpbGFibGUgcHJlc2V0IGNvbmZpZ3VyYXRpb25zCiAgcHJlc2V0cywKICAvLyBFdmVudCBoYW5kbGVyIHdoZW4gYSBwcmVzZXQgaXMgc2VsZWN0ZWQKICBvblNlbGVjdCwKICAvLyBDdXJyZW50bHkgc2VsZWN0ZWQgcHJlc2V0CiAgY3VycmVudFZhbHVlLAp9OiBQcmVzZXRDb250YWluZXJQcm9wczxUUHJlc2V0LCBUVmFsdWU+KSA9PiB7CiAgY29uc3QgaXNEYXRlUmFuZ2VQcmVzZXRzID0gKHByZXNldDogYW55KTogcHJlc2V0IGlzIERhdGVSYW5nZVByZXNldCA9PiB7CiAgICByZXR1cm4gImRhdGVSYW5nZSIgaW4gcHJlc2V0CiAgfQogIGNvbnN0IGlzRGF0ZVByZXNldHMgPSAocHJlc2V0OiBhbnkpOiBwcmVzZXQgaXMgRGF0ZVByZXNldCA9PiB7CiAgICByZXR1cm4gImRhdGUiIGluIHByZXNldAogIH0KCiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAocHJlc2V0OiBUUHJlc2V0KSA9PiB7CiAgICBpZiAoaXNEYXRlUmFuZ2VQcmVzZXRzKHByZXNldCkpIHsKICAgICAgb25TZWxlY3QocHJlc2V0LmRhdGVSYW5nZSBhcyBUVmFsdWUpCiAgICB9IGVsc2UgaWYgKGlzRGF0ZVByZXNldHMocHJlc2V0KSkgewogICAgICBvblNlbGVjdChwcmVzZXQuZGF0ZSBhcyBUVmFsdWUpCiAgICB9CiAgfQoKICBjb25zdCBjb21wYXJlRGF0ZXMgPSAoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKSA9PiB7CiAgICByZXR1cm4gKAogICAgICBkYXRlMS5nZXREYXRlKCkgPT09IGRhdGUyLmdldERhdGUoKSAmJgogICAgICBkYXRlMS5nZXRNb250aCgpID09PSBkYXRlMi5nZXRNb250aCgpICYmCiAgICAgIGRhdGUxLmdldEZ1bGxZZWFyKCkgPT09IGRhdGUyLmdldEZ1bGxZZWFyKCkKICAgICkKICB9CgogIGNvbnN0IGNvbXBhcmVSYW5nZXMgPSAocmFuZ2UxOiBEYXRlUmFuZ2UsIHJhbmdlMjogRGF0ZVJhbmdlKSA9PiB7CiAgICBjb25zdCBmcm9tMSA9IHJhbmdlMS5mcm9tCiAgICBjb25zdCBmcm9tMiA9IHJhbmdlMi5mcm9tCgogICAgbGV0IGVxdWFsRnJvbSA9IGZhbHNlCgogICAgaWYgKGZyb20xICYmIGZyb20yKSB7CiAgICAgIGNvbnN0IHNhbWVGcm9tID0gY29tcGFyZURhdGVzKGZyb20xLCBmcm9tMikKCiAgICAgIGlmIChzYW1lRnJvbSkgewogICAgICAgIGVxdWFsRnJvbSA9IHRydWUKICAgICAgfQogICAgfQoKICAgIGNvbnN0IHRvMSA9IHJhbmdlMS50bwogICAgY29uc3QgdG8yID0gcmFuZ2UyLnRvCgogICAgbGV0IGVxdWFsVG8gPSBmYWxzZQoKICAgIGlmICh0bzEgJiYgdG8yKSB7CiAgICAgIGNvbnN0IHNhbWVUbyA9IGNvbXBhcmVEYXRlcyh0bzEsIHRvMikKCiAgICAgIGlmIChzYW1lVG8pIHsKICAgICAgICBlcXVhbFRvID0gdHJ1ZQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGVxdWFsRnJvbSAmJiBlcXVhbFRvCiAgfQoKICBjb25zdCBtYXRjaGVzQ3VycmVudCA9IChwcmVzZXQ6IFRQcmVzZXQpID0+IHsKICAgIGlmIChpc0RhdGVSYW5nZVByZXNldHMocHJlc2V0KSkgewogICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRWYWx1ZSBhcyBEYXRlUmFuZ2UgfCB1bmRlZmluZWQKCiAgICAgIHJldHVybiB2YWx1ZSAmJiBjb21wYXJlUmFuZ2VzKHZhbHVlLCBwcmVzZXQuZGF0ZVJhbmdlKQogICAgfSBlbHNlIGlmIChpc0RhdGVQcmVzZXRzKHByZXNldCkpIHsKICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50VmFsdWUgYXMgRGF0ZSB8IHVuZGVmaW5lZAoKICAgICAgcmV0dXJuIHZhbHVlICYmIGNvbXBhcmVEYXRlcyh2YWx1ZSwgcHJlc2V0LmRhdGUpCiAgICB9CgogICAgcmV0dXJuIGZhbHNlCiAgfQoKICByZXR1cm4gKAogICAgPHVsIGNsYXNzTmFtZT0iZmxleCBpdGVtcy1zdGFydCBnYXAteC0yIHNtOmZsZXgtY29sIj4KICAgICAge3ByZXNldHMubWFwKChwcmVzZXQsIGluZGV4KSA9PiB7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgIDxsaSBrZXk9e2luZGV4fSBjbGFzc05hbWU9InNtOnctZnVsbCBzbTpweS1weCI+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB0aXRsZT17cHJlc2V0LmxhYmVsfQogICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgICAgICAvLyBiYXNlCiAgICAgICAgICAgICAgICAicmVsYXRpdmUgdy1mdWxsIG92ZXJmbG93LWhpZGRlbiB0ZXh0LWVsbGlwc2lzIHdoaXRlc3BhY2Utbm93cmFwIHJvdW5kZWQgYm9yZGVyIHB4LTIuNSBweS0xLjUgdGV4dC1sZWZ0IHRleHQtYmFzZSBzaGFkb3ctc20gb3V0bGluZS1ub25lIHRyYW5zaXRpb24tYWxsIHNtOmJvcmRlci1ub25lIHNtOnB5LTIgc206dGV4dC1zbSBzbTpzaGFkb3ctbm9uZSIsCiAgICAgICAgICAgICAgICAvLyB0ZXh0IGNvbG9yCiAgICAgICAgICAgICAgICAidGV4dC1ncmF5LTcwMCBkYXJrOnRleHQtZ3JheS0zMDAiLAogICAgICAgICAgICAgICAgLy8gYm9yZGVyIGNvbG9yCiAgICAgICAgICAgICAgICAiYm9yZGVyLWdyYXktMjAwIGRhcms6Ym9yZGVyLWdyYXktODAwIiwKICAgICAgICAgICAgICAgIC8vIGZvY3VzCiAgICAgICAgICAgICAgICBmb2N1c1JpbmcsCiAgICAgICAgICAgICAgICAvLyBiYWNrZ3JvdW5kIGNvbG9yCiAgICAgICAgICAgICAgICAiZm9jdXMtdmlzaWJsZTpiZy1ncmF5LTEwMCBmb2N1cy12aXNpYmxlOmRhcms6YmctZ3JheS05MDAiLAogICAgICAgICAgICAgICAgImhvdmVyOmJnLWdyYXktMTAwIGhvdmVyOmRhcms6YmctZ3JheS05MDAiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiYmctZ3JheS0xMDAgZGFyazpiZy1ncmF5LTkwMCI6IG1hdGNoZXNDdXJyZW50KHByZXNldCksCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2xpY2socHJlc2V0KX0KICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtgU2VsZWN0ICR7cHJlc2V0LmxhYmVsfWB9CiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8c3Bhbj57cHJlc2V0LmxhYmVsfTwvc3Bhbj4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2xpPgogICAgICAgICkKICAgICAgfSl9CiAgICA8L3VsPgogICkKfQoKUHJlc2V0Q29udGFpbmVyLmRpc3BsYXlOYW1lID0gIkRhdGVQaWNrZXIuUHJlc2V0Q29udGFpbmVyIgoKLy8jcmVnaW9uIERhdGUgUGlja2VyIFNoYXJlZAovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cgpjb25zdCBmb3JtYXREYXRlID0gKAogIGRhdGU6IERhdGUsCiAgbG9jYWxlOiBMb2NhbGUsCiAgaW5jbHVkZVRpbWU/OiBib29sZWFuLAopOiBzdHJpbmcgPT4gewogIGNvbnN0IHVzZXNBbVBtID0gIWlzQnJvd3NlckxvY2FsZUNsb2NrVHlwZTI0aCgpCiAgbGV0IGRhdGVTdHJpbmc6IHN0cmluZwoKICBpZiAoaW5jbHVkZVRpbWUpIHsKICAgIGRhdGVTdHJpbmcgPSB1c2VzQW1QbQogICAgICA/IGZvcm1hdChkYXRlLCAiZGQgTU1NLCB5eXl5IGg6bW0gYSIsIHsgbG9jYWxlIH0pCiAgICAgIDogZm9ybWF0KGRhdGUsICJkZCBNTU0sIHl5eXkgSEg6bW0iLCB7IGxvY2FsZSB9KQogIH0gZWxzZSB7CiAgICBkYXRlU3RyaW5nID0gZm9ybWF0KGRhdGUsICJkZCBNTU0sIHl5eXkiLCB7IGxvY2FsZSB9KQogIH0KCiAgcmV0dXJuIGRhdGVTdHJpbmcKfQoKdHlwZSBDYWxlbmRhclByb3BzID0gewogIGZyb21ZZWFyPzogbnVtYmVyCiAgdG9ZZWFyPzogbnVtYmVyCiAgZnJvbU1vbnRoPzogRGF0ZQogIHRvTW9udGg/OiBEYXRlCiAgZnJvbURheT86IERhdGUKICB0b0RheT86IERhdGUKICBmcm9tRGF0ZT86IERhdGUKICB0b0RhdGU/OiBEYXRlCiAgbG9jYWxlPzogTG9jYWxlCn0KCnR5cGUgVHJhbnNsYXRpb25zID0gewogIGNhbmNlbD86IHN0cmluZwogIGFwcGx5Pzogc3RyaW5nCiAgc3RhcnQ/OiBzdHJpbmcKICBlbmQ/OiBzdHJpbmcKICByYW5nZT86IHN0cmluZwp9CgppbnRlcmZhY2UgUGlja2VyUHJvcHMgZXh0ZW5kcyBDYWxlbmRhclByb3BzIHsKICBjbGFzc05hbWU/OiBzdHJpbmcKICBkaXNhYmxlZD86IGJvb2xlYW4KICBkaXNhYmxlZERheXM/OiBNYXRjaGVyIHwgTWF0Y2hlcltdIHwgdW5kZWZpbmVkCiAgcmVxdWlyZWQ/OiBib29sZWFuCiAgc2hvd1RpbWVQaWNrZXI/OiBib29sZWFuCiAgcGxhY2Vob2xkZXI/OiBzdHJpbmcKICBlbmFibGVZZWFyTmF2aWdhdGlvbj86IGJvb2xlYW4KICBkaXNhYmxlTmF2aWdhdGlvbj86IGJvb2xlYW4KICBoYXNFcnJvcj86IGJvb2xlYW4KICBpZD86IHN0cmluZwogIC8vIEN1c3RvbWl6ZSB0aGUgZGF0ZSBwaWNrZXIgZm9yIGRpZmZlcmVudCBsYW5ndWFnZXMuCiAgdHJhbnNsYXRpb25zPzogVHJhbnNsYXRpb25zCiAgYWxpZ24/OiAiY2VudGVyIiB8ICJlbmQiIHwgInN0YXJ0IgogICJhcmlhLWludmFsaWQiPzogYm9vbGVhbgogICJhcmlhLWxhYmVsIj86IHN0cmluZwogICJhcmlhLWxhYmVsbGVkYnkiPzogc3RyaW5nCiAgImFyaWEtcmVxdWlyZWQiPzogYm9vbGVhbgp9CgovLyNyZWdpb24gU2luZ2xlIERhdGUgUGlja2VyCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmludGVyZmFjZSBTaW5nbGVQcm9wcyBleHRlbmRzIE9taXQ8UGlja2VyUHJvcHMsICJ0cmFuc2xhdGlvbnMiPiB7CiAgcHJlc2V0cz86IERhdGVQcmVzZXRbXQogIGRlZmF1bHRWYWx1ZT86IERhdGUKICB2YWx1ZT86IERhdGUKICBvbkNoYW5nZT86IChkYXRlOiBEYXRlIHwgdW5kZWZpbmVkKSA9PiB2b2lkCiAgdHJhbnNsYXRpb25zPzogT21pdDxUcmFuc2xhdGlvbnMsICJyYW5nZSI+Cn0KCmNvbnN0IFNpbmdsZURhdGVQaWNrZXIgPSAoewogIGRlZmF1bHRWYWx1ZSwKICB2YWx1ZSwKICBvbkNoYW5nZSwKICBwcmVzZXRzLAogIGRpc2FibGVkLAogIGRpc2FibGVkRGF5cywKICBkaXNhYmxlTmF2aWdhdGlvbiwKICBjbGFzc05hbWUsCiAgc2hvd1RpbWVQaWNrZXIsCiAgcGxhY2Vob2xkZXIgPSAiU2VsZWN0IGRhdGUiLAogIGhhc0Vycm9yLAogIHRyYW5zbGF0aW9ucywKICBlbmFibGVZZWFyTmF2aWdhdGlvbiA9IGZhbHNlLAogIGxvY2FsZSA9IGVuVVMsCiAgYWxpZ24gPSAiY2VudGVyIiwKICAuLi5wcm9wcwp9OiBTaW5nbGVQcm9wcykgPT4gewogIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKQogIGNvbnN0IFtkYXRlLCBzZXREYXRlXSA9IFJlYWN0LnVzZVN0YXRlPERhdGUgfCB1bmRlZmluZWQ+KAogICAgdmFsdWUgPz8gZGVmYXVsdFZhbHVlID8/IHVuZGVmaW5lZCwKICApCiAgY29uc3QgW21vbnRoLCBzZXRNb250aF0gPSBSZWFjdC51c2VTdGF0ZTxEYXRlIHwgdW5kZWZpbmVkPihkYXRlKQoKICBjb25zdCBbdGltZSwgc2V0VGltZV0gPSBSZWFjdC51c2VTdGF0ZTxUaW1lVmFsdWUgfCBudWxsPigKICAgIHZhbHVlCiAgICAgID8gbmV3IFRpbWUodmFsdWUuZ2V0SG91cnMoKSwgdmFsdWUuZ2V0TWludXRlcygpKQogICAgICA6IGRlZmF1bHRWYWx1ZQogICAgICAgID8gbmV3IFRpbWUoZGVmYXVsdFZhbHVlLmdldEhvdXJzKCksIGRlZmF1bHRWYWx1ZS5nZXRNaW51dGVzKCkpCiAgICAgICAgOiBuZXcgVGltZSgwLCAwKSwKICApCgogIGNvbnN0IGluaXRpYWxEYXRlID0gUmVhY3QudXNlTWVtbygoKSA9PiB7CiAgICByZXR1cm4gZGF0ZQogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcwogIH0sIFtvcGVuXSkKCiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHsKICAgIHNldERhdGUodmFsdWUgPz8gZGVmYXVsdFZhbHVlID8/IHVuZGVmaW5lZCkKICB9LCBbdmFsdWUsIGRlZmF1bHRWYWx1ZV0pCgogIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7CiAgICBpZiAoZGF0ZSkgewogICAgICBzZXRNb250aChkYXRlKQogICAgfQogIH0sIFtkYXRlXSkKCiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHsKICAgIGlmICghb3BlbikgewogICAgICBzZXRNb250aChkYXRlKQogICAgfQogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcwogIH0sIFtvcGVuXSkKCiAgY29uc3Qgb25DYW5jZWwgPSAoKSA9PiB7CiAgICBzZXREYXRlKGluaXRpYWxEYXRlKQogICAgc2V0VGltZSgKICAgICAgaW5pdGlhbERhdGUKICAgICAgICA/IG5ldyBUaW1lKGluaXRpYWxEYXRlLmdldEhvdXJzKCksIGluaXRpYWxEYXRlLmdldE1pbnV0ZXMoKSkKICAgICAgICA6IG5ldyBUaW1lKDAsIDApLAogICAgKQogICAgc2V0T3BlbihmYWxzZSkKICB9CgogIGNvbnN0IG9uT3BlbkNoYW5nZSA9IChvcGVuOiBib29sZWFuKSA9PiB7CiAgICBpZiAoIW9wZW4pIHsKICAgICAgb25DYW5jZWwoKQogICAgfQoKICAgIHNldE9wZW4ob3BlbikKICB9CgogIGNvbnN0IG9uRGF0ZUNoYW5nZSA9IChkYXRlOiBEYXRlIHwgdW5kZWZpbmVkKSA9PiB7CiAgICBjb25zdCBuZXdEYXRlID0gZGF0ZQogICAgaWYgKHNob3dUaW1lUGlja2VyKSB7CiAgICAgIGlmIChuZXdEYXRlICYmICF0aW1lKSB7CiAgICAgICAgc2V0VGltZShuZXcgVGltZSgwLCAwKSkKICAgICAgfQogICAgICBpZiAobmV3RGF0ZSAmJiB0aW1lKSB7CiAgICAgICAgbmV3RGF0ZS5zZXRIb3Vycyh0aW1lLmhvdXIpCiAgICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKHRpbWUubWludXRlKQogICAgICB9CiAgICB9CiAgICBzZXREYXRlKG5ld0RhdGUpCiAgfQoKICBjb25zdCBvblRpbWVDaGFuZ2UgPSAodGltZTogVGltZVZhbHVlIHwgbnVsbCkgPT4gewogICAgc2V0VGltZSh0aW1lKQoKICAgIGlmICghZGF0ZSkgewogICAgICByZXR1cm4KICAgIH0KCiAgICBjb25zdCBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpCgogICAgaWYgKCF0aW1lKSB7CiAgICAgIG5ld0RhdGUuc2V0SG91cnMoMCkKICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKDApCiAgICB9IGVsc2UgewogICAgICBuZXdEYXRlLnNldEhvdXJzKHRpbWUuaG91cikKICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKHRpbWUubWludXRlKQogICAgfQoKICAgIHNldERhdGUobmV3RGF0ZSkKICB9CgogIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBSZWFjdC51c2VNZW1vKCgpID0+IHsKICAgIGlmICghZGF0ZSkgewogICAgICByZXR1cm4gbnVsbAogICAgfQoKICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsIGxvY2FsZSwgc2hvd1RpbWVQaWNrZXIpCiAgfSwgW2RhdGUsIGxvY2FsZSwgc2hvd1RpbWVQaWNrZXJdKQoKICBjb25zdCBvbkFwcGx5ID0gKCkgPT4gewogICAgc2V0T3BlbihmYWxzZSkKICAgIG9uQ2hhbmdlPy4oZGF0ZSkKICB9CgogIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7CiAgICBzZXREYXRlKHZhbHVlID8/IGRlZmF1bHRWYWx1ZSA/PyB1bmRlZmluZWQpCiAgICBzZXRUaW1lKAogICAgICB2YWx1ZQogICAgICAgID8gbmV3IFRpbWUodmFsdWUuZ2V0SG91cnMoKSwgdmFsdWUuZ2V0TWludXRlcygpKQogICAgICAgIDogZGVmYXVsdFZhbHVlCiAgICAgICAgICA/IG5ldyBUaW1lKGRlZmF1bHRWYWx1ZS5nZXRIb3VycygpLCBkZWZhdWx0VmFsdWUuZ2V0TWludXRlcygpKQogICAgICAgICAgOiBuZXcgVGltZSgwLCAwKSwKICAgICkKICB9LCBbdmFsdWUsIGRlZmF1bHRWYWx1ZV0pCgogIHJldHVybiAoCiAgICA8UG9wb3ZlclByaW1pdGl2ZXMuUm9vdAogICAgICB0cmVtb3ItaWQ9InRyZW1vci1yYXciCiAgICAgIG9wZW49e29wZW59CiAgICAgIG9uT3BlbkNoYW5nZT17b25PcGVuQ2hhbmdlfQogICAgPgogICAgICA8VHJpZ2dlcgogICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn0KICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9CiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9CiAgICAgICAgaGFzRXJyb3I9e2hhc0Vycm9yfQogICAgICAgIGFyaWEtcmVxdWlyZWQ9e3Byb3BzLnJlcXVpcmVkIHx8IHByb3BzWyJhcmlhLXJlcXVpcmVkIl19CiAgICAgICAgYXJpYS1pbnZhbGlkPXtwcm9wc1siYXJpYS1pbnZhbGlkIl19CiAgICAgICAgYXJpYS1sYWJlbD17cHJvcHNbImFyaWEtbGFiZWwiXX0KICAgICAgICBhcmlhLWxhYmVsbGVkYnk9e3Byb3BzWyJhcmlhLWxhYmVsbGVkYnkiXX0KICAgICAgPgogICAgICAgIHtmb3JtYXR0ZWREYXRlfQogICAgICA8L1RyaWdnZXI+CiAgICAgIDxDYWxlbmRhclBvcG92ZXIgYWxpZ249e2FsaWdufT4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCI+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBmbGV4LWNvbCBzbTpmbGV4LXJvdyBzbTppdGVtcy1zdGFydCI+CiAgICAgICAgICAgIHtwcmVzZXRzICYmIHByZXNldHMubGVuZ3RoID4gMCAmJiAoCiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAgICAgICAgICAgInJlbGF0aXZlIGZsZXggaC0xNCB3LWZ1bGwgaXRlbXMtY2VudGVyIHNtOmgtZnVsbCBzbTp3LTQwIiwKICAgICAgICAgICAgICAgICAgImJvcmRlci1iIGJvcmRlci1ncmF5LTIwMCBzbTpib3JkZXItYi0wIHNtOmJvcmRlci1yIGRhcms6Ym9yZGVyLWdyYXktODAwIiwKICAgICAgICAgICAgICAgICAgIm92ZXJmbG93LWF1dG8iLAogICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iYWJzb2x1dGUgcHgtMiBwci0yIHNtOmluc2V0LTAgc206bGVmdC0wIHNtOnB5LTIiPgogICAgICAgICAgICAgICAgICA8UHJlc2V0Q29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlPXtkYXRlfQogICAgICAgICAgICAgICAgICAgIHByZXNldHM9e3ByZXNldHN9CiAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q9e29uRGF0ZUNoYW5nZX0KICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICApfQogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxDYWxlbmRhclByaW1pdGl2ZQogICAgICAgICAgICAgICAgbW9kZT0ic2luZ2xlIgogICAgICAgICAgICAgICAgbW9udGg9e21vbnRofQogICAgICAgICAgICAgICAgb25Nb250aENoYW5nZT17c2V0TW9udGh9CiAgICAgICAgICAgICAgICBzZWxlY3RlZD17ZGF0ZX0KICAgICAgICAgICAgICAgIG9uU2VsZWN0PXtvbkRhdGVDaGFuZ2V9CiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWREYXlzfQogICAgICAgICAgICAgICAgbG9jYWxlPXtsb2NhbGV9CiAgICAgICAgICAgICAgICBlbmFibGVZZWFyTmF2aWdhdGlvbj17ZW5hYmxlWWVhck5hdmlnYXRpb259CiAgICAgICAgICAgICAgICBkaXNhYmxlTmF2aWdhdGlvbj17ZGlzYWJsZU5hdmlnYXRpb259CiAgICAgICAgICAgICAgICBpbml0aWFsRm9jdXMKICAgICAgICAgICAgICAgIHsuLi5wcm9wc30KICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIHtzaG93VGltZVBpY2tlciAmJiAoCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iYm9yZGVyLXQgYm9yZGVyLWdyYXktMjAwIHAtMyBkYXJrOmJvcmRlci1ncmF5LTgwMCI+CiAgICAgICAgICAgICAgICAgIDxUaW1lSW5wdXQKICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJUaW1lIgogICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvblRpbWVDaGFuZ2V9CiAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17IWRhdGV9CiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RpbWV9CiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZD17cHJvcHMucmVxdWlyZWR9CiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICApfQogICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBnYXAteC0yIGJvcmRlci10IGJvcmRlci1ncmF5LTIwMCBwLTMgZGFyazpib3JkZXItZ3JheS04MDAiPgogICAgICAgICAgICAgICAgPEJ1dHRvbgogICAgICAgICAgICAgICAgICB2YXJpYW50PSJzZWNvbmRhcnkiCiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0iaC04IHctZnVsbCIKICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkNhbmNlbH0KICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAge3RyYW5zbGF0aW9ucz8uY2FuY2VsID8/ICJDYW5jZWwifQogICAgICAgICAgICAgICAgPC9CdXR0b24+CiAgICAgICAgICAgICAgICA8QnV0dG9uCiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0iaC04IHctZnVsbCIKICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkFwcGx5fQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICB7dHJhbnNsYXRpb25zPy5hcHBseSA/PyAiQXBwbHkifQogICAgICAgICAgICAgICAgPC9CdXR0b24+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvQ2FsZW5kYXJQb3BvdmVyPgogICAgPC9Qb3BvdmVyUHJpbWl0aXZlcy5Sb290PgogICkKfQoKLy8jcmVnaW9uIFJhbmdlIERhdGUgUGlja2VyCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmludGVyZmFjZSBSYW5nZVByb3BzIGV4dGVuZHMgUGlja2VyUHJvcHMgewogIHByZXNldHM/OiBEYXRlUmFuZ2VQcmVzZXRbXQogIGRlZmF1bHRWYWx1ZT86IERhdGVSYW5nZQogIHZhbHVlPzogRGF0ZVJhbmdlCiAgb25DaGFuZ2U/OiAoZGF0ZVJhbmdlOiBEYXRlUmFuZ2UgfCB1bmRlZmluZWQpID0+IHZvaWQKfQoKY29uc3QgUmFuZ2VEYXRlUGlja2VyID0gKHsKICBkZWZhdWx0VmFsdWUsCiAgdmFsdWUsCiAgb25DaGFuZ2UsCiAgcHJlc2V0cywKICBkaXNhYmxlZCwKICBkaXNhYmxlTmF2aWdhdGlvbiwKICBkaXNhYmxlZERheXMsCiAgZW5hYmxlWWVhck5hdmlnYXRpb24gPSBmYWxzZSwKICBsb2NhbGUgPSBlblVTLAogIHNob3dUaW1lUGlja2VyLAogIHBsYWNlaG9sZGVyID0gIlNlbGVjdCBkYXRlIHJhbmdlIiwKICBoYXNFcnJvciwKICB0cmFuc2xhdGlvbnMsCiAgYWxpZ24gPSAiY2VudGVyIiwKICBjbGFzc05hbWUsCiAgLi4ucHJvcHMKfTogUmFuZ2VQcm9wcykgPT4gewogIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKQogIGNvbnN0IFtyYW5nZSwgc2V0UmFuZ2VdID0gUmVhY3QudXNlU3RhdGU8RGF0ZVJhbmdlIHwgdW5kZWZpbmVkPigKICAgIHZhbHVlID8/IGRlZmF1bHRWYWx1ZSA/PyB1bmRlZmluZWQsCiAgKQogIGNvbnN0IFttb250aCwgc2V0TW9udGhdID0gUmVhY3QudXNlU3RhdGU8RGF0ZSB8IHVuZGVmaW5lZD4ocmFuZ2U/LmZyb20pCgogIGNvbnN0IFtzdGFydFRpbWUsIHNldFN0YXJ0VGltZV0gPSBSZWFjdC51c2VTdGF0ZTxUaW1lVmFsdWUgfCBudWxsPigKICAgIHZhbHVlPy5mcm9tCiAgICAgID8gbmV3IFRpbWUodmFsdWUuZnJvbS5nZXRIb3VycygpLCB2YWx1ZS5mcm9tLmdldE1pbnV0ZXMoKSkKICAgICAgOiBkZWZhdWx0VmFsdWU/LmZyb20KICAgICAgICA/IG5ldyBUaW1lKGRlZmF1bHRWYWx1ZS5mcm9tLmdldEhvdXJzKCksIGRlZmF1bHRWYWx1ZS5mcm9tLmdldE1pbnV0ZXMoKSkKICAgICAgICA6IG5ldyBUaW1lKDAsIDApLAogICkKICBjb25zdCBbZW5kVGltZSwgc2V0RW5kVGltZV0gPSBSZWFjdC51c2VTdGF0ZTxUaW1lVmFsdWUgfCBudWxsPigKICAgIHZhbHVlPy50bwogICAgICA/IG5ldyBUaW1lKHZhbHVlLnRvLmdldEhvdXJzKCksIHZhbHVlLnRvLmdldE1pbnV0ZXMoKSkKICAgICAgOiBkZWZhdWx0VmFsdWU/LnRvCiAgICAgICAgPyBuZXcgVGltZShkZWZhdWx0VmFsdWUudG8uZ2V0SG91cnMoKSwgZGVmYXVsdFZhbHVlLnRvLmdldE1pbnV0ZXMoKSkKICAgICAgICA6IG5ldyBUaW1lKDAsIDApLAogICkKCiAgY29uc3QgaW5pdGlhbFJhbmdlID0gUmVhY3QudXNlTWVtbygoKSA9PiB7CiAgICByZXR1cm4gcmFuZ2UKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMKICB9LCBbb3Blbl0pCgogIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7CiAgICBzZXRSYW5nZSh2YWx1ZSA/PyBkZWZhdWx0VmFsdWUgPz8gdW5kZWZpbmVkKQogIH0sIFt2YWx1ZSwgZGVmYXVsdFZhbHVlXSkKCiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHsKICAgIGlmIChyYW5nZSkgewogICAgICBzZXRNb250aChyYW5nZS5mcm9tKQogICAgfQogIH0sIFtyYW5nZV0pCgogIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7CiAgICBpZiAoIW9wZW4pIHsKICAgICAgc2V0TW9udGgocmFuZ2U/LmZyb20pCiAgICB9CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzCiAgfSwgW29wZW5dKQoKICBjb25zdCBvblJhbmdlQ2hhbmdlID0gKHJhbmdlOiBEYXRlUmFuZ2UgfCB1bmRlZmluZWQpID0+IHsKICAgIGNvbnN0IG5ld1JhbmdlID0gcmFuZ2UKICAgIGlmIChzaG93VGltZVBpY2tlcikgewogICAgICBpZiAobmV3UmFuZ2U/LmZyb20gJiYgIXN0YXJ0VGltZSkgewogICAgICAgIHNldFN0YXJ0VGltZShuZXcgVGltZSgwLCAwKSkKICAgICAgfQoKICAgICAgaWYgKG5ld1JhbmdlPy50byAmJiAhZW5kVGltZSkgewogICAgICAgIHNldEVuZFRpbWUobmV3IFRpbWUoMCwgMCkpCiAgICAgIH0KCiAgICAgIGlmIChuZXdSYW5nZT8uZnJvbSAmJiBzdGFydFRpbWUpIHsKICAgICAgICBuZXdSYW5nZS5mcm9tLnNldEhvdXJzKHN0YXJ0VGltZS5ob3VyKQogICAgICAgIG5ld1JhbmdlLmZyb20uc2V0TWludXRlcyhzdGFydFRpbWUubWludXRlKQogICAgICB9CgogICAgICBpZiAobmV3UmFuZ2U/LnRvICYmIGVuZFRpbWUpIHsKICAgICAgICBuZXdSYW5nZS50by5zZXRIb3VycyhlbmRUaW1lLmhvdXIpCiAgICAgICAgbmV3UmFuZ2UudG8uc2V0TWludXRlcyhlbmRUaW1lLm1pbnV0ZSkKICAgICAgfQogICAgfQoKICAgIHNldFJhbmdlKG5ld1JhbmdlKQogIH0KCiAgY29uc3Qgb25DYW5jZWwgPSAoKSA9PiB7CiAgICBzZXRSYW5nZShpbml0aWFsUmFuZ2UpCiAgICBzZXRTdGFydFRpbWUoCiAgICAgIGluaXRpYWxSYW5nZT8uZnJvbQogICAgICAgID8gbmV3IFRpbWUoaW5pdGlhbFJhbmdlLmZyb20uZ2V0SG91cnMoKSwgaW5pdGlhbFJhbmdlLmZyb20uZ2V0TWludXRlcygpKQogICAgICAgIDogbmV3IFRpbWUoMCwgMCksCiAgICApCiAgICBzZXRFbmRUaW1lKAogICAgICBpbml0aWFsUmFuZ2U/LnRvCiAgICAgICAgPyBuZXcgVGltZShpbml0aWFsUmFuZ2UudG8uZ2V0SG91cnMoKSwgaW5pdGlhbFJhbmdlLnRvLmdldE1pbnV0ZXMoKSkKICAgICAgICA6IG5ldyBUaW1lKDAsIDApLAogICAgKQogICAgc2V0T3BlbihmYWxzZSkKICB9CgogIGNvbnN0IG9uT3BlbkNoYW5nZSA9IChvcGVuOiBib29sZWFuKSA9PiB7CiAgICBpZiAoIW9wZW4pIHsKICAgICAgb25DYW5jZWwoKQogICAgfQoKICAgIHNldE9wZW4ob3BlbikKICB9CgogIGNvbnN0IG9uVGltZUNoYW5nZSA9ICh0aW1lOiBUaW1lVmFsdWUgfCBudWxsLCBwb3M6ICJzdGFydCIgfCAiZW5kIikgPT4gewogICAgc3dpdGNoIChwb3MpIHsKICAgICAgY2FzZSAic3RhcnQiOgogICAgICAgIHNldFN0YXJ0VGltZSh0aW1lKQogICAgICAgIGJyZWFrCiAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgc2V0RW5kVGltZSh0aW1lKQogICAgICAgIGJyZWFrCiAgICB9CgogICAgaWYgKCFyYW5nZSkgewogICAgICByZXR1cm4KICAgIH0KCiAgICBpZiAocG9zID09PSAic3RhcnQiKSB7CiAgICAgIGlmICghcmFuZ2UuZnJvbSkgewogICAgICAgIHJldHVybgogICAgICB9CgogICAgICBjb25zdCBuZXdEYXRlID0gbmV3IERhdGUocmFuZ2UuZnJvbS5nZXRUaW1lKCkpCgogICAgICBpZiAoIXRpbWUpIHsKICAgICAgICBuZXdEYXRlLnNldEhvdXJzKDApCiAgICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKDApCiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmV3RGF0ZS5zZXRIb3Vycyh0aW1lLmhvdXIpCiAgICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKHRpbWUubWludXRlKQogICAgICB9CgogICAgICBzZXRSYW5nZSh7CiAgICAgICAgLi4ucmFuZ2UsCiAgICAgICAgZnJvbTogbmV3RGF0ZSwKICAgICAgfSkKICAgIH0KCiAgICBpZiAocG9zID09PSAiZW5kIikgewogICAgICBpZiAoIXJhbmdlLnRvKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZShyYW5nZS50by5nZXRUaW1lKCkpCgogICAgICBpZiAoIXRpbWUpIHsKICAgICAgICBuZXdEYXRlLnNldEhvdXJzKDApCiAgICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKDApCiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmV3RGF0ZS5zZXRIb3Vycyh0aW1lLmhvdXIpCiAgICAgICAgbmV3RGF0ZS5zZXRNaW51dGVzKHRpbWUubWludXRlKQogICAgICB9CgogICAgICBzZXRSYW5nZSh7CiAgICAgICAgLi4ucmFuZ2UsCiAgICAgICAgdG86IG5ld0RhdGUsCiAgICAgIH0pCiAgICB9CiAgfQoKICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gewogICAgc2V0UmFuZ2UodmFsdWUgPz8gZGVmYXVsdFZhbHVlID8/IHVuZGVmaW5lZCkKCiAgICBzZXRTdGFydFRpbWUoCiAgICAgIHZhbHVlPy5mcm9tCiAgICAgICAgPyBuZXcgVGltZSh2YWx1ZS5mcm9tLmdldEhvdXJzKCksIHZhbHVlLmZyb20uZ2V0TWludXRlcygpKQogICAgICAgIDogZGVmYXVsdFZhbHVlPy5mcm9tCiAgICAgICAgICA/IG5ldyBUaW1lKAogICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZS5mcm9tLmdldEhvdXJzKCksCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlLmZyb20uZ2V0TWludXRlcygpLAogICAgICAgICAgICApCiAgICAgICAgICA6IG5ldyBUaW1lKDAsIDApLAogICAgKQogICAgc2V0RW5kVGltZSgKICAgICAgdmFsdWU/LnRvCiAgICAgICAgPyBuZXcgVGltZSh2YWx1ZS50by5nZXRIb3VycygpLCB2YWx1ZS50by5nZXRNaW51dGVzKCkpCiAgICAgICAgOiBkZWZhdWx0VmFsdWU/LnRvCiAgICAgICAgICA/IG5ldyBUaW1lKGRlZmF1bHRWYWx1ZS50by5nZXRIb3VycygpLCBkZWZhdWx0VmFsdWUudG8uZ2V0TWludXRlcygpKQogICAgICAgICAgOiBuZXcgVGltZSgwLCAwKSwKICAgICkKICB9LCBbdmFsdWUsIGRlZmF1bHRWYWx1ZV0pCgogIGNvbnN0IGRpc3BsYXlSYW5nZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gewogICAgaWYgKCFyYW5nZSkgewogICAgICByZXR1cm4gbnVsbAogICAgfQoKICAgIHJldHVybiBgJHtyYW5nZS5mcm9tID8gZm9ybWF0RGF0ZShyYW5nZS5mcm9tLCBsb2NhbGUsIHNob3dUaW1lUGlja2VyKSA6ICIifSAtICR7CiAgICAgIHJhbmdlLnRvID8gZm9ybWF0RGF0ZShyYW5nZS50bywgbG9jYWxlLCBzaG93VGltZVBpY2tlcikgOiAiIgogICAgfWAKICB9LCBbcmFuZ2UsIGxvY2FsZSwgc2hvd1RpbWVQaWNrZXJdKQoKICBjb25zdCBvbkFwcGx5ID0gKCkgPT4gewogICAgc2V0T3BlbihmYWxzZSkKICAgIG9uQ2hhbmdlPy4ocmFuZ2UpCiAgfQoKICByZXR1cm4gKAogICAgPFBvcG92ZXJQcmltaXRpdmVzLlJvb3QKICAgICAgdHJlbW9yLWlkPSJ0cmVtb3ItcmF3IgogICAgICBvcGVuPXtvcGVufQogICAgICBvbk9wZW5DaGFuZ2U9e29uT3BlbkNoYW5nZX0KICAgID4KICAgICAgPFRyaWdnZXIKICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9CiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfQogICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfQogICAgICAgIGhhc0Vycm9yPXtoYXNFcnJvcn0KICAgICAgICBhcmlhLXJlcXVpcmVkPXtwcm9wcy5yZXF1aXJlZCB8fCBwcm9wc1siYXJpYS1yZXF1aXJlZCJdfQogICAgICAgIGFyaWEtaW52YWxpZD17cHJvcHNbImFyaWEtaW52YWxpZCJdfQogICAgICAgIGFyaWEtbGFiZWw9e3Byb3BzWyJhcmlhLWxhYmVsIl19CiAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PXtwcm9wc1siYXJpYS1sYWJlbGxlZGJ5Il19CiAgICAgID4KICAgICAgICB7ZGlzcGxheVJhbmdlfQogICAgICA8L1RyaWdnZXI+CiAgICAgIDxDYWxlbmRhclBvcG92ZXIgYWxpZ249e2FsaWdufT4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCI+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBmbGV4LWNvbCBvdmVyZmxvdy14LWF1dG8gc206ZmxleC1yb3cgc206aXRlbXMtc3RhcnQiPgogICAgICAgICAgICB7cHJlc2V0cyAmJiBwcmVzZXRzLmxlbmd0aCA+IDAgJiYgKAogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgICAgICAgICJyZWxhdGl2ZSBmbGV4IGgtMTYgdy1mdWxsIGl0ZW1zLWNlbnRlciBzbTpoLWZ1bGwgc206dy00MCIsCiAgICAgICAgICAgICAgICAgICJib3JkZXItYiBib3JkZXItZ3JheS0yMDAgc206Ym9yZGVyLWItMCBzbTpib3JkZXItciBkYXJrOmJvcmRlci1ncmF5LTgwMCIsCiAgICAgICAgICAgICAgICAgICJvdmVyZmxvdy1hdXRvIiwKICAgICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImFic29sdXRlIHB4LTMgc206aW5zZXQtMCBzbTpsZWZ0LTAgc206cC0yIj4KICAgICAgICAgICAgICAgICAgPFByZXNldENvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZT17cmFuZ2V9CiAgICAgICAgICAgICAgICAgICAgcHJlc2V0cz17cHJlc2V0c30KICAgICAgICAgICAgICAgICAgICBvblNlbGVjdD17b25SYW5nZUNoYW5nZX0KICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICApfQogICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ib3ZlcmZsb3cteC1hdXRvIj4KICAgICAgICAgICAgICA8Q2FsZW5kYXJQcmltaXRpdmUKICAgICAgICAgICAgICAgIG1vZGU9InJhbmdlIgogICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e3JhbmdlfQogICAgICAgICAgICAgICAgb25TZWxlY3Q9e29uUmFuZ2VDaGFuZ2V9CiAgICAgICAgICAgICAgICBtb250aD17bW9udGh9CiAgICAgICAgICAgICAgICBvbk1vbnRoQ2hhbmdlPXtzZXRNb250aH0KICAgICAgICAgICAgICAgIG51bWJlck9mTW9udGhzPXsyfQogICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkRGF5c30KICAgICAgICAgICAgICAgIGRpc2FibGVOYXZpZ2F0aW9uPXtkaXNhYmxlTmF2aWdhdGlvbn0KICAgICAgICAgICAgICAgIGVuYWJsZVllYXJOYXZpZ2F0aW9uPXtlbmFibGVZZWFyTmF2aWdhdGlvbn0KICAgICAgICAgICAgICAgIGxvY2FsZT17bG9jYWxlfQogICAgICAgICAgICAgICAgaW5pdGlhbEZvY3VzCiAgICAgICAgICAgICAgICBjbGFzc05hbWVzPXt7CiAgICAgICAgICAgICAgICAgIG1vbnRoczoKICAgICAgICAgICAgICAgICAgICAiZmxleCBmbGV4LXJvdyBkaXZpZGUteCBkaXZpZGUtZ3JheS0yMDAgZGFyazpkaXZpZGUtZ3JheS04MDAgb3ZlcmZsb3cteC1hdXRvIiwKICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9CiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICB7c2hvd1RpbWVQaWNrZXIgJiYgKAogICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktZXZlbmx5IGdhcC14LTMgYm9yZGVyLXQgYm9yZGVyLWdyYXktMjAwIHAtMyBkYXJrOmJvcmRlci1ncmF5LTgwMCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGZsZXgtMSBpdGVtcy1jZW50ZXIgZ2FwLXgtMiI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJkYXJrOnRleHQtZ3JheS0zMCB0ZXh0LWdyYXktNzAwIj4KICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2xhdGlvbnM/LnN0YXJ0ID8/ICJTdGFydCJ9OgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8VGltZUlucHV0CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c3RhcnRUaW1lfQogICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBvblRpbWVDaGFuZ2UodiwgInN0YXJ0Iil9CiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJTdGFydCBkYXRlIHRpbWUiCiAgICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPXshcmFuZ2U/LmZyb219CiAgICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkPXtwcm9wcy5yZXF1aXJlZH0KICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPFJpU3VidHJhY3RGaWxsIGNsYXNzTmFtZT0ic2l6ZS00IHNocmluay0wIHRleHQtZ3JheS00MDAiIC8+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGZsZXgtMSBpdGVtcy1jZW50ZXIgZ2FwLXgtMiI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJkYXJrOnRleHQtZ3JheS0zMCB0ZXh0LWdyYXktNzAwIj4KICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2xhdGlvbnM/LmVuZCA/PyAiRW5kIn06CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxUaW1lSW5wdXQKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtlbmRUaW1lfQogICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBvblRpbWVDaGFuZ2UodiwgImVuZCIpfQogICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iRW5kIGRhdGUgdGltZSIKICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9eyFyYW5nZT8udG99CiAgICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkPXtwcm9wcy5yZXF1aXJlZH0KICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImJvcmRlci10IGJvcmRlci1ncmF5LTIwMCBwLTMgc206ZmxleCBzbTppdGVtcy1jZW50ZXIgc206anVzdGlmeS1iZXR3ZWVuIGRhcms6Ym9yZGVyLWdyYXktODAwIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0idGFidWxhci1udW1zIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktNTAiPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9InRleHQtZ3JheS03MDAgZGFyazp0ZXh0LWdyYXktMzAwIj4KICAgICAgICAgICAgICAgICAgICB7dHJhbnNsYXRpb25zPy5yYW5nZSA/PyAiUmFuZ2UifToKICAgICAgICAgICAgICAgICAgPC9zcGFuPnsiICJ9CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0iZm9udC1tZWRpdW0iPntkaXNwbGF5UmFuZ2V9PC9zcGFuPgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9Im10LTIgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLXgtMiBzbTptdC0wIj4KICAgICAgICAgICAgICAgICAgPEJ1dHRvbgogICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InNlY29uZGFyeSIKICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9ImgtOCB3LWZ1bGwgc206dy1maXQiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2FuY2VsfQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAge3RyYW5zbGF0aW9ucz8uY2FuY2VsID8/ICJDYW5jZWwifQogICAgICAgICAgICAgICAgICA8L0J1dHRvbj4KICAgICAgICAgICAgICAgICAgPEJ1dHRvbgogICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJoLTggdy1mdWxsIHNtOnctZml0IgogICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkFwcGx5fQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAge3RyYW5zbGF0aW9ucz8uYXBwbHkgPz8gIkFwcGx5In0KICAgICAgICAgICAgICAgICAgPC9CdXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9DYWxlbmRhclBvcG92ZXI+CiAgICA8L1BvcG92ZXJQcmltaXRpdmVzLlJvb3Q+CiAgKQp9CgovLyNyZWdpb24gUHJlc2V0IFZhbGlkYXRpb24KLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY29uc3QgdmFsaWRhdGVQcmVzZXRzID0gKAogIHByZXNldHM6IERhdGVSYW5nZVByZXNldFtdIHwgRGF0ZVByZXNldFtdLAogIHJ1bGVzOiBQaWNrZXJQcm9wcywKKSA9PiB7CiAgY29uc3QgeyB0b1llYXIsIGZyb21ZZWFyLCBmcm9tTW9udGgsIHRvTW9udGgsIGZyb21EYXksIHRvRGF5IH0gPSBydWxlcwoKICBpZiAocHJlc2V0cyAmJiBwcmVzZXRzLmxlbmd0aCA+IDApIHsKICAgIGNvbnN0IGZyb21ZZWFyVG9Vc2UgPSBmcm9tWWVhcgogICAgY29uc3QgdG9ZZWFyVG9Vc2UgPSB0b1llYXIKCiAgICBwcmVzZXRzLmZvckVhY2goKHByZXNldCkgPT4gewogICAgICBpZiAoImRhdGUiIGluIHByZXNldCkgewogICAgICAgIGNvbnN0IHByZXNldFllYXIgPSBwcmVzZXQuZGF0ZS5nZXRGdWxsWWVhcigpCgogICAgICAgIGlmIChmcm9tWWVhciAmJiBwcmVzZXRZZWFyIDwgZnJvbVllYXIpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgYFByZXNldCAke3ByZXNldC5sYWJlbH0gaXMgYmVmb3JlIGZyb21ZZWFyICR7ZnJvbVllYXJUb1VzZX0uYCwKICAgICAgICAgICkKICAgICAgICB9CgogICAgICAgIGlmICh0b1llYXIgJiYgcHJlc2V0WWVhciA+IHRvWWVhcikgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICBgUHJlc2V0ICR7cHJlc2V0LmxhYmVsfSBpcyBhZnRlciB0b1llYXIgJHt0b1llYXJUb1VzZX0uYCwKICAgICAgICAgICkKICAgICAgICB9CgogICAgICAgIGlmIChmcm9tTW9udGgpIHsKICAgICAgICAgIGNvbnN0IHByZXNldE1vbnRoID0gcHJlc2V0LmRhdGUuZ2V0TW9udGgoKQoKICAgICAgICAgIGlmIChwcmVzZXRNb250aCA8IGZyb21Nb250aC5nZXRNb250aCgpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICBgUHJlc2V0ICR7cHJlc2V0LmxhYmVsfSBpcyBiZWZvcmUgZnJvbU1vbnRoICR7ZnJvbU1vbnRofS5gLAogICAgICAgICAgICApCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAodG9Nb250aCkgewogICAgICAgICAgY29uc3QgcHJlc2V0TW9udGggPSBwcmVzZXQuZGF0ZS5nZXRNb250aCgpCgogICAgICAgICAgaWYgKHByZXNldE1vbnRoID4gdG9Nb250aC5nZXRNb250aCgpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICBgUHJlc2V0ICR7cHJlc2V0LmxhYmVsfSBpcyBhZnRlciB0b01vbnRoICR7dG9Nb250aH0uYCwKICAgICAgICAgICAgKQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGZyb21EYXkpIHsKICAgICAgICAgIGNvbnN0IHByZXNldERheSA9IHByZXNldC5kYXRlLmdldERhdGUoKQoKICAgICAgICAgIGlmIChwcmVzZXREYXkgPCBmcm9tRGF5LmdldERhdGUoKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgYFByZXNldCAke3ByZXNldC5sYWJlbH0gaXMgYmVmb3JlIGZyb21EYXkgJHtmcm9tRGF5fS5gLAogICAgICAgICAgICApCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAodG9EYXkpIHsKICAgICAgICAgIGNvbnN0IHByZXNldERheSA9IHByZXNldC5kYXRlLmdldERhdGUoKQoKICAgICAgICAgIGlmIChwcmVzZXREYXkgPiB0b0RheS5nZXREYXRlKCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAgIGBQcmVzZXQgJHtwcmVzZXQubGFiZWx9IGlzIGFmdGVyIHRvRGF5ICR7Zm9ybWF0KAogICAgICAgICAgICAgICAgdG9EYXksCiAgICAgICAgICAgICAgICAiTU1NIGRkLCB5eXl5IiwKICAgICAgICAgICAgICApfS5gLAogICAgICAgICAgICApCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoImRhdGVSYW5nZSIgaW4gcHJlc2V0KSB7CiAgICAgICAgY29uc3QgcHJlc2V0RnJvbVllYXIgPSBwcmVzZXQuZGF0ZVJhbmdlLmZyb20/LmdldEZ1bGxZZWFyKCkKICAgICAgICBjb25zdCBwcmVzZXRUb1llYXIgPSBwcmVzZXQuZGF0ZVJhbmdlLnRvPy5nZXRGdWxsWWVhcigpCgogICAgICAgIGlmIChwcmVzZXRGcm9tWWVhciAmJiBmcm9tWWVhciAmJiBwcmVzZXRGcm9tWWVhciA8IGZyb21ZZWFyKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgIGBQcmVzZXQgJHtwcmVzZXQubGFiZWx9J3MgJ2Zyb20nIGlzIGJlZm9yZSBmcm9tWWVhciAke2Zyb21ZZWFyVG9Vc2V9LmAsCiAgICAgICAgICApCiAgICAgICAgfQoKICAgICAgICBpZiAocHJlc2V0VG9ZZWFyICYmIHRvWWVhciAmJiBwcmVzZXRUb1llYXIgPiB0b1llYXIpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgYFByZXNldCAke3ByZXNldC5sYWJlbH0ncyAndG8nIGlzIGFmdGVyIHRvWWVhciAke3RvWWVhclRvVXNlfS5gLAogICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgaWYgKGZyb21Nb250aCkgewogICAgICAgICAgY29uc3QgcHJlc2V0TW9udGggPSBwcmVzZXQuZGF0ZVJhbmdlLmZyb20/LmdldE1vbnRoKCkKCiAgICAgICAgICBpZiAocHJlc2V0TW9udGggJiYgcHJlc2V0TW9udGggPCBmcm9tTW9udGguZ2V0TW9udGgoKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgYFByZXNldCAke3ByZXNldC5sYWJlbH0ncyAnZnJvbScgaXMgYmVmb3JlIGZyb21Nb250aCAke2Zvcm1hdCgKICAgICAgICAgICAgICAgIGZyb21Nb250aCwKICAgICAgICAgICAgICAgICJNTU0sIHl5eXkiLAogICAgICAgICAgICAgICl9LmAsCiAgICAgICAgICAgICkKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh0b01vbnRoKSB7CiAgICAgICAgICBjb25zdCBwcmVzZXRNb250aCA9IHByZXNldC5kYXRlUmFuZ2UudG8/LmdldE1vbnRoKCkKCiAgICAgICAgICBpZiAocHJlc2V0TW9udGggJiYgcHJlc2V0TW9udGggPiB0b01vbnRoLmdldE1vbnRoKCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAgIGBQcmVzZXQgJHtwcmVzZXQubGFiZWx9J3MgJ3RvJyBpcyBhZnRlciB0b01vbnRoICR7Zm9ybWF0KAogICAgICAgICAgICAgICAgdG9Nb250aCwKICAgICAgICAgICAgICAgICJNTU0sIHl5eXkiLAogICAgICAgICAgICAgICl9LmAsCiAgICAgICAgICAgICkKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChmcm9tRGF5KSB7CiAgICAgICAgICBjb25zdCBwcmVzZXREYXkgPSBwcmVzZXQuZGF0ZVJhbmdlLmZyb20/LmdldERhdGUoKQoKICAgICAgICAgIGlmIChwcmVzZXREYXkgJiYgcHJlc2V0RGF5IDwgZnJvbURheS5nZXREYXRlKCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAgIGBQcmVzZXQgJHsKICAgICAgICAgICAgICAgIHByZXNldC5kYXRlUmFuZ2UuZnJvbQogICAgICAgICAgICAgIH0ncyAnZnJvbScgaXMgYmVmb3JlIGZyb21EYXkgJHtmb3JtYXQoZnJvbURheSwgIk1NTSBkZCwgeXl5eSIpfS5gLAogICAgICAgICAgICApCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAodG9EYXkpIHsKICAgICAgICAgIGNvbnN0IHByZXNldERheSA9IHByZXNldC5kYXRlUmFuZ2UudG8/LmdldERhdGUoKQoKICAgICAgICAgIGlmIChwcmVzZXREYXkgJiYgcHJlc2V0RGF5ID4gdG9EYXkuZ2V0RGF0ZSgpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICBgUHJlc2V0ICR7cHJlc2V0LmxhYmVsfSdzICd0bycgaXMgYWZ0ZXIgdG9EYXkgJHtmb3JtYXQoCiAgICAgICAgICAgICAgICB0b0RheSwKICAgICAgICAgICAgICAgICJNTU0gZGQsIHl5eXkiLAogICAgICAgICAgICAgICl9LmAsCiAgICAgICAgICAgICkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0pCiAgfQp9CgovLyNyZWdpb24gVHlwZXMgJiBFeHBvcnRzCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCnR5cGUgU2luZ2xlRGF0ZVBpY2tlclByb3BzID0gewogIHByZXNldHM/OiBEYXRlUHJlc2V0W10KICBkZWZhdWx0VmFsdWU/OiBEYXRlCiAgdmFsdWU/OiBEYXRlCiAgb25DaGFuZ2U/OiAoZGF0ZTogRGF0ZSB8IHVuZGVmaW5lZCkgPT4gdm9pZAp9ICYgUGlja2VyUHJvcHMKCmNvbnN0IERhdGVQaWNrZXIgPSAoeyBwcmVzZXRzLCAuLi5wcm9wcyB9OiBTaW5nbGVEYXRlUGlja2VyUHJvcHMpID0+IHsKICBpZiAocHJlc2V0cykgewogICAgdmFsaWRhdGVQcmVzZXRzKHByZXNldHMsIHByb3BzKQogIH0KCiAgcmV0dXJuIDxTaW5nbGVEYXRlUGlja2VyIHByZXNldHM9e3ByZXNldHN9IHsuLi4ocHJvcHMgYXMgU2luZ2xlUHJvcHMpfSAvPgp9CgpEYXRlUGlja2VyLmRpc3BsYXlOYW1lID0gIkRhdGVQaWNrZXIiCgp0eXBlIFJhbmdlRGF0ZVBpY2tlclByb3BzID0gewogIHByZXNldHM/OiBEYXRlUmFuZ2VQcmVzZXRbXQogIGRlZmF1bHRWYWx1ZT86IERhdGVSYW5nZQogIHZhbHVlPzogRGF0ZVJhbmdlCiAgb25DaGFuZ2U/OiAoZGF0ZVJhbmdlOiBEYXRlUmFuZ2UgfCB1bmRlZmluZWQpID0+IHZvaWQKfSAmIFBpY2tlclByb3BzCgpjb25zdCBEYXRlUmFuZ2VQaWNrZXIgPSAoeyBwcmVzZXRzLCAuLi5wcm9wcyB9OiBSYW5nZURhdGVQaWNrZXJQcm9wcykgPT4gewogIGlmIChwcmVzZXRzKSB7CiAgICB2YWxpZGF0ZVByZXNldHMocHJlc2V0cywgcHJvcHMpCiAgfQoKICByZXR1cm4gPFJhbmdlRGF0ZVBpY2tlciBwcmVzZXRzPXtwcmVzZXRzfSB7Li4uKHByb3BzIGFzIFJhbmdlUHJvcHMpfSAvPgp9CgpEYXRlUmFuZ2VQaWNrZXIuZGlzcGxheU5hbWUgPSAiRGF0ZVJhbmdlUGlja2VyIgoKZXhwb3J0IHsKICBEYXRlUGlja2VyLAogIERhdGVSYW5nZVBpY2tlciwKICB0eXBlIERhdGVQcmVzZXQsCiAgdHlwZSBEYXRlUmFuZ2UsCiAgdHlwZSBEYXRlUmFuZ2VQcmVzZXQsCn0K",
        "summary": "1211L | DatePicker.tsx | .tsx | 34.3 KB"
      },
      {
        "path": "frontend\\src\\components\\Dialog.tsx",
        "type": ".tsx",
        "size_kb": 3.8,
        "content": "Ly8gVHJlbW9yIFJhdyBEaWFsb2cgW3YwLjAuMF0KCmltcG9ydCAqIGFzIERpYWxvZ1ByaW1pdGl2ZXMgZnJvbSAiQHJhZGl4LXVpL3JlYWN0LWRpYWxvZyIKaW1wb3J0IFJlYWN0IGZyb20gInJlYWN0IgoKaW1wb3J0IHsgY3gsIGZvY3VzUmluZyB9IGZyb20gIkAvbGliL3V0aWxzIgoKY29uc3QgRGlhbG9nID0gKAogIHByb3BzOiBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIERpYWxvZ1ByaW1pdGl2ZXMuUm9vdD4sCikgPT4gewogIHJldHVybiA8RGlhbG9nUHJpbWl0aXZlcy5Sb290IHsuLi5wcm9wc30gLz4KfQpEaWFsb2cuZGlzcGxheU5hbWUgPSAiRGlhbG9nIgoKY29uc3QgRGlhbG9nVHJpZ2dlciA9IERpYWxvZ1ByaW1pdGl2ZXMuVHJpZ2dlcgoKRGlhbG9nVHJpZ2dlci5kaXNwbGF5TmFtZSA9ICJEaWFsb2dUcmlnZ2VyIgoKY29uc3QgRGlhbG9nQ2xvc2UgPSBEaWFsb2dQcmltaXRpdmVzLkNsb3NlCgpEaWFsb2dDbG9zZS5kaXNwbGF5TmFtZSA9ICJEaWFsb2dDbG9zZSIKCmNvbnN0IERpYWxvZ1BvcnRhbCA9IERpYWxvZ1ByaW1pdGl2ZXMuUG9ydGFsCgpEaWFsb2dQb3J0YWwuZGlzcGxheU5hbWUgPSAiRGlhbG9nUG9ydGFsIgoKY29uc3QgRGlhbG9nT3ZlcmxheSA9IFJlYWN0LmZvcndhcmRSZWY8CiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgRGlhbG9nUHJpbWl0aXZlcy5PdmVybGF5PiwKICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIERpYWxvZ1ByaW1pdGl2ZXMuT3ZlcmxheT4KPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4gewogIHJldHVybiAoCiAgICA8RGlhbG9nUHJpbWl0aXZlcy5PdmVybGF5CiAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfQogICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgIC8vIGJhc2UKICAgICAgICAiZml4ZWQgaW5zZXQtMCB6LTUwIG92ZXJmbG93LXktYXV0byIsCiAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgICAgICJiZy1ibGFjay83MCIsCiAgICAgICAgLy8gdHJhbnNpdGlvbgogICAgICAgICJkYXRhLVtzdGF0ZT1vcGVuXTphbmltYXRlLWRpYWxvZ092ZXJsYXlTaG93IiwKICAgICAgICBjbGFzc05hbWUsCiAgICAgICl9CiAgICAgIHsuLi5wcm9wc30KICAgIC8+CiAgKQp9KQoKRGlhbG9nT3ZlcmxheS5kaXNwbGF5TmFtZSA9ICJEaWFsb2dPdmVybGF5IgoKY29uc3QgRGlhbG9nQ29udGVudCA9IFJlYWN0LmZvcndhcmRSZWY8CiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgRGlhbG9nUHJpbWl0aXZlcy5Db250ZW50PiwKICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIERpYWxvZ1ByaW1pdGl2ZXMuQ29udGVudD4KPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4gewogIHJldHVybiAoCiAgICA8RGlhbG9nUG9ydGFsPgogICAgICA8RGlhbG9nT3ZlcmxheT4KICAgICAgICA8RGlhbG9nUHJpbWl0aXZlcy5Db250ZW50CiAgICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgIC8vIGJhc2UKICAgICAgICAgICAgImZpeGVkIGxlZnQtMS8yIHRvcC0xLzIgei01MCB3LVs5NXZ3XSBtYXgtdy1sZyAtdHJhbnNsYXRlLXgtMS8yIC10cmFuc2xhdGUteS0xLzIgb3ZlcmZsb3cteS1hdXRvIHJvdW5kZWQtbWQgYm9yZGVyIHAtNiBzaGFkb3ctbGciLAogICAgICAgICAgICAvLyBib3JkZXIgY29sb3IKICAgICAgICAgICAgImJvcmRlci1ncmF5LTIwMCBkYXJrOmJvcmRlci1ncmF5LTkwMCIsCiAgICAgICAgICAgIC8vIGJhY2tncm91bmQgY29sb3IKICAgICAgICAgICAgImJnLXdoaXRlIGRhcms6YmctWyMwOTBFMUFdIiwKICAgICAgICAgICAgLy8gdHJhbnNpdGlvbgogICAgICAgICAgICAiZGF0YS1bc3RhdGU9b3Blbl06YW5pbWF0ZS1kaWFsb2dDb250ZW50U2hvdyIsCiAgICAgICAgICAgIGZvY3VzUmluZywKICAgICAgICAgICAgY2xhc3NOYW1lLAogICAgICAgICAgKX0KICAgICAgICAgIHsuLi5wcm9wc30KICAgICAgICAvPgogICAgICA8L0RpYWxvZ092ZXJsYXk+CiAgICA8L0RpYWxvZ1BvcnRhbD4KICApCn0pCgpEaWFsb2dDb250ZW50LmRpc3BsYXlOYW1lID0gIkRpYWxvZ0NvbnRlbnQiCgpjb25zdCBEaWFsb2dIZWFkZXIgPSAoewogIGNsYXNzTmFtZSwKICAuLi5wcm9wcwp9OiBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4pID0+IHsKICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2N4KCJmbGV4IGZsZXgtY29sIGdhcC15LTEiLCBjbGFzc05hbWUpfSB7Li4ucHJvcHN9IC8+Cn0KCkRpYWxvZ0hlYWRlci5kaXNwbGF5TmFtZSA9ICJEaWFsb2dIZWFkZXIiCgpjb25zdCBEaWFsb2dUaXRsZSA9IFJlYWN0LmZvcndhcmRSZWY8CiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgRGlhbG9nUHJpbWl0aXZlcy5UaXRsZT4sCiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBEaWFsb2dQcmltaXRpdmVzLlRpdGxlPgo+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiAoCiAgPERpYWxvZ1ByaW1pdGl2ZXMuVGl0bGUKICAgIHJlZj17Zm9yd2FyZGVkUmVmfQogICAgY2xhc3NOYW1lPXtjeCgKICAgICAgLy8gYmFzZQogICAgICAidGV4dC1sZyBmb250LXNlbWlib2xkIiwKICAgICAgLy8gdGV4dCBjb2xvcgogICAgICAidGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCIsCiAgICAgIGNsYXNzTmFtZSwKICAgICl9CiAgICB7Li4ucHJvcHN9CiAgLz4KKSkKCkRpYWxvZ1RpdGxlLmRpc3BsYXlOYW1lID0gIkRpYWxvZ1RpdGxlIgoKY29uc3QgRGlhbG9nRGVzY3JpcHRpb24gPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIERpYWxvZ1ByaW1pdGl2ZXMuRGVzY3JpcHRpb24+LAogIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgRGlhbG9nUHJpbWl0aXZlcy5EZXNjcmlwdGlvbj4KPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4gewogIHJldHVybiAoCiAgICA8RGlhbG9nUHJpbWl0aXZlcy5EZXNjcmlwdGlvbgogICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgY2xhc3NOYW1lPXtjeCgidGV4dC1ncmF5LTUwMCBkYXJrOnRleHQtZ3JheS01MDAiLCBjbGFzc05hbWUpfQogICAgICB7Li4ucHJvcHN9CiAgICAvPgogICkKfSkKCkRpYWxvZ0Rlc2NyaXB0aW9uLmRpc3BsYXlOYW1lID0gIkRpYWxvZ0Rlc2NyaXB0aW9uIgoKY29uc3QgRGlhbG9nRm9vdGVyID0gKHsKICBjbGFzc05hbWUsCiAgLi4ucHJvcHMKfTogUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAiZmxleCBmbGV4LWNvbC1yZXZlcnNlIHNtOmZsZXgtcm93IHNtOmp1c3RpZnktZW5kIHNtOnNwYWNlLXgtMiIsCiAgICAgICAgY2xhc3NOYW1lLAogICAgICApfQogICAgICB7Li4ucHJvcHN9CiAgICAvPgogICkKfQoKRGlhbG9nRm9vdGVyLmRpc3BsYXlOYW1lID0gIkRpYWxvZ0Zvb3RlciIKCmV4cG9ydCB7CiAgRGlhbG9nLAogIERpYWxvZ0Nsb3NlLAogIERpYWxvZ0NvbnRlbnQsCiAgRGlhbG9nRGVzY3JpcHRpb24sCiAgRGlhbG9nRm9vdGVyLAogIERpYWxvZ0hlYWRlciwKICBEaWFsb2dUaXRsZSwKICBEaWFsb2dUcmlnZ2VyLAp9Cg==",
        "summary": "149L | Dialog.tsx | .tsx | 3.8 KB"
      },
      {
        "path": "frontend\\src\\components\\Drawer.tsx",
        "type": ".tsx",
        "size_kb": 5.5,
        "content": "Ly8gVHJlbW9yIERyYXdlciBbdjAuMC4yXQoKaW1wb3J0ICogYXMgRHJhd2VyUHJpbWl0aXZlcyBmcm9tICJAcmFkaXgtdWkvcmVhY3QtZGlhbG9nIgppbXBvcnQgeyBSaUNsb3NlTGluZSB9IGZyb20gIkByZW1peGljb24vcmVhY3QiCmltcG9ydCAqIGFzIFJlYWN0IGZyb20gInJlYWN0IgoKaW1wb3J0IHsgY3gsIGZvY3VzUmluZyB9IGZyb20gIkAvbGliL3V0aWxzIgoKaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAiLi9CdXR0b24iCgpjb25zdCBEcmF3ZXIgPSAoCiAgcHJvcHM6IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlcy5Sb290PiwKKSA9PiB7CiAgcmV0dXJuIDxEcmF3ZXJQcmltaXRpdmVzLlJvb3QgdHJlbW9yLWlkPSJ0cmVtb3ItcmF3IiB7Li4ucHJvcHN9IC8+Cn0KRHJhd2VyLmRpc3BsYXlOYW1lID0gIkRyYXdlciIKCmNvbnN0IERyYXdlclRyaWdnZXIgPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZXMuVHJpZ2dlcj4sCiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBEcmF3ZXJQcmltaXRpdmVzLlRyaWdnZXI+Cj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IHsKICByZXR1cm4gKAogICAgPERyYXdlclByaW1pdGl2ZXMuVHJpZ2dlciByZWY9e3JlZn0gY2xhc3NOYW1lPXtjeChjbGFzc05hbWUpfSB7Li4ucHJvcHN9IC8+CiAgKQp9KQpEcmF3ZXJUcmlnZ2VyLmRpc3BsYXlOYW1lID0gIkRyYXdlci5UcmlnZ2VyIgoKY29uc3QgRHJhd2VyQ2xvc2UgPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZXMuQ2xvc2U+LAogIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlcy5DbG9zZT4KPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gewogIHJldHVybiAoCiAgICA8RHJhd2VyUHJpbWl0aXZlcy5DbG9zZSByZWY9e3JlZn0gY2xhc3NOYW1lPXtjeChjbGFzc05hbWUpfSB7Li4ucHJvcHN9IC8+CiAgKQp9KQpEcmF3ZXJDbG9zZS5kaXNwbGF5TmFtZSA9ICJEcmF3ZXIuQ2xvc2UiCgpjb25zdCBEcmF3ZXJQb3J0YWwgPSBEcmF3ZXJQcmltaXRpdmVzLlBvcnRhbAoKRHJhd2VyUG9ydGFsLmRpc3BsYXlOYW1lID0gIkRyYXdlclBvcnRhbCIKCmNvbnN0IERyYXdlck92ZXJsYXkgPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZXMuT3ZlcmxheT4sCiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBEcmF3ZXJQcmltaXRpdmVzLk92ZXJsYXk+Cj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHsKICByZXR1cm4gKAogICAgPERyYXdlclByaW1pdGl2ZXMuT3ZlcmxheQogICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAvLyBiYXNlCiAgICAgICAgImZpeGVkIGluc2V0LTAgei01MCBvdmVyZmxvdy15LWF1dG8iLAogICAgICAgIC8vIGJhY2tncm91bmQgY29sb3IKICAgICAgICAiYmctYmxhY2svMzAiLAogICAgICAgIC8vIHRyYW5zaXRpb24KICAgICAgICAiZGF0YS1bc3RhdGU9Y2xvc2VkXTphbmltYXRlLWhpZGUgZGF0YS1bc3RhdGU9b3Blbl06YW5pbWF0ZS1kaWFsb2dPdmVybGF5U2hvdyIsCiAgICAgICAgY2xhc3NOYW1lLAogICAgICApfQogICAgICB7Li4ucHJvcHN9CiAgICAgIHN0eWxlPXt7CiAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICI0MDBtcyIsCiAgICAgICAgYW5pbWF0aW9uRmlsbE1vZGU6ICJiYWNrd2FyZHMiLAogICAgICB9fQogICAgLz4KICApCn0pCgpEcmF3ZXJPdmVybGF5LmRpc3BsYXlOYW1lID0gIkRyYXdlck92ZXJsYXkiCgpjb25zdCBEcmF3ZXJDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZjwKICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBEcmF3ZXJQcmltaXRpdmVzLkNvbnRlbnQ+LAogIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlcy5Db250ZW50Pgo+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7CiAgcmV0dXJuICgKICAgIDxEcmF3ZXJQb3J0YWw+CiAgICAgIDxEcmF3ZXJPdmVybGF5PgogICAgICAgIDxEcmF3ZXJQcmltaXRpdmVzLkNvbnRlbnQKICAgICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfQogICAgICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAgICAgLy8gYmFzZQogICAgICAgICAgICAiZml4ZWQgaW5zZXQteS0yIHotNTAgbXgtYXV0byBmbGV4IHctWzk1dnddIGZsZXgtMSBmbGV4LWNvbCBvdmVyZmxvdy15LWF1dG8gcm91bmRlZC1tZCBib3JkZXIgcC00IHNoYWRvdy1sZyBmb2N1czpvdXRsaW5lLW5vbmUgbWF4LXNtOmluc2V0LXgtMiBzbTppbnNldC15LTIgc206cmlnaHQtMiBzbTptYXgtdy1sZyBzbTpwLTYiLAogICAgICAgICAgICAvLyBib3JkZXIgY29sb3IKICAgICAgICAgICAgImJvcmRlci1ncmF5LTIwMCBkYXJrOmJvcmRlci1ncmF5LTkwMCIsCiAgICAgICAgICAgIC8vIGJhY2tncm91bmQgY29sb3IKICAgICAgICAgICAgImJnLXdoaXRlIGRhcms6YmctWyMwOTBFMUFdIiwKICAgICAgICAgICAgLy8gdHJhbnNpdGlvbgogICAgICAgICAgICAiZGF0YS1bc3RhdGU9Y2xvc2VkXTphbmltYXRlLWRyYXdlclNsaWRlUmlnaHRBbmRGYWRlIGRhdGEtW3N0YXRlPW9wZW5dOmFuaW1hdGUtZHJhd2VyU2xpZGVMZWZ0QW5kRmFkZSIsCiAgICAgICAgICAgIGZvY3VzUmluZywKICAgICAgICAgICAgY2xhc3NOYW1lLAogICAgICAgICAgKX0KICAgICAgICAgIHsuLi5wcm9wc30KICAgICAgICAvPgogICAgICA8L0RyYXdlck92ZXJsYXk+CiAgICA8L0RyYXdlclBvcnRhbD4KICApCn0pCgpEcmF3ZXJDb250ZW50LmRpc3BsYXlOYW1lID0gIkRyYXdlckNvbnRlbnQiCgpjb25zdCBEcmF3ZXJIZWFkZXIgPSBSZWFjdC5mb3J3YXJkUmVmPAogIEhUTUxEaXZFbGVtZW50LAogIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjwiZGl2Ij4KPigoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IHsKICByZXR1cm4gKAogICAgPGRpdgogICAgICByZWY9e3JlZn0KICAgICAgY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLXN0YXJ0IGp1c3RpZnktYmV0d2VlbiBnYXAteC00IGJvcmRlci1iIGJvcmRlci1ncmF5LTIwMCBwYi00IGRhcms6Ym9yZGVyLWdyYXktOTAwIgogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjeCgibXQtMSBmbGV4IGZsZXgtY29sIGdhcC15LTEiLCBjbGFzc05hbWUpfT4KICAgICAgICB7Y2hpbGRyZW59CiAgICAgIDwvZGl2PgogICAgICA8RHJhd2VyUHJpbWl0aXZlcy5DbG9zZSBhc0NoaWxkPgogICAgICAgIDxCdXR0b24KICAgICAgICAgIHZhcmlhbnQ9Imdob3N0IgogICAgICAgICAgY2xhc3NOYW1lPSJhc3BlY3Qtc3F1YXJlIHAtMSBob3ZlcjpiZy1ncmF5LTEwMCBob3ZlcjpkYXJrOmJnLWdyYXktNDAwLzEwIgogICAgICAgID4KICAgICAgICAgIDxSaUNsb3NlTGluZSBjbGFzc05hbWU9InNpemUtNiIgYXJpYS1oaWRkZW49InRydWUiIC8+CiAgICAgICAgPC9CdXR0b24+CiAgICAgIDwvRHJhd2VyUHJpbWl0aXZlcy5DbG9zZT4KICAgIDwvZGl2PgogICkKfSkKCkRyYXdlckhlYWRlci5kaXNwbGF5TmFtZSA9ICJEcmF3ZXIuSGVhZGVyIgoKY29uc3QgRHJhd2VyVGl0bGUgPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZXMuVGl0bGU+LAogIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlcy5UaXRsZT4KPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4gKAogIDxEcmF3ZXJQcmltaXRpdmVzLlRpdGxlCiAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgIGNsYXNzTmFtZT17Y3goCiAgICAgIC8vIGJhc2UKICAgICAgInRleHQtYmFzZSBmb250LXNlbWlib2xkIiwKICAgICAgLy8gdGV4dCBjb2xvcgogICAgICAidGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCIsCiAgICAgIGNsYXNzTmFtZSwKICAgICl9CiAgICB7Li4ucHJvcHN9CiAgLz4KKSkKCkRyYXdlclRpdGxlLmRpc3BsYXlOYW1lID0gIkRyYXdlclRpdGxlIgoKY29uc3QgRHJhd2VyQm9keSA9IFJlYWN0LmZvcndhcmRSZWY8CiAgSFRNTERpdkVsZW1lbnQsCiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCJkaXYiPgo+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiB7CiAgcmV0dXJuIDxkaXYgcmVmPXtyZWZ9IGNsYXNzTmFtZT17Y3goImZsZXgtMSBweS00IiwgY2xhc3NOYW1lKX0gey4uLnByb3BzfSAvPgp9KQpEcmF3ZXJCb2R5LmRpc3BsYXlOYW1lID0gIkRyYXdlci5Cb2R5IgoKY29uc3QgRHJhd2VyRGVzY3JpcHRpb24gPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZXMuRGVzY3JpcHRpb24+LAogIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlcy5EZXNjcmlwdGlvbj4KPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4gewogIHJldHVybiAoCiAgICA8RHJhd2VyUHJpbWl0aXZlcy5EZXNjcmlwdGlvbgogICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgY2xhc3NOYW1lPXtjeCgidGV4dC1ncmF5LTUwMCBkYXJrOnRleHQtZ3JheS01MDAiLCBjbGFzc05hbWUpfQogICAgICB7Li4ucHJvcHN9CiAgICAvPgogICkKfSkKCkRyYXdlckRlc2NyaXB0aW9uLmRpc3BsYXlOYW1lID0gIkRyYXdlckRlc2NyaXB0aW9uIgoKY29uc3QgRHJhd2VyRm9vdGVyID0gKHsKICBjbGFzc05hbWUsCiAgLi4ucHJvcHMKfTogUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+KSA9PiB7CiAgcmV0dXJuICgKICAgIDxkaXYKICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAiZmxleCBmbGV4LWNvbC1yZXZlcnNlIGJvcmRlci10IGJvcmRlci1ncmF5LTIwMCBwdC00IHNtOmZsZXgtcm93IHNtOmp1c3RpZnktZW5kIHNtOnNwYWNlLXgtMiBkYXJrOmJvcmRlci1ncmF5LTkwMCIsCiAgICAgICAgY2xhc3NOYW1lLAogICAgICApfQogICAgICB7Li4ucHJvcHN9CiAgICAvPgogICkKfQoKRHJhd2VyRm9vdGVyLmRpc3BsYXlOYW1lID0gIkRyYXdlckZvb3RlciIKCmV4cG9ydCB7CiAgRHJhd2VyLAogIERyYXdlckJvZHksCiAgRHJhd2VyQ2xvc2UsCiAgRHJhd2VyQ29udGVudCwKICBEcmF3ZXJEZXNjcmlwdGlvbiwKICBEcmF3ZXJGb290ZXIsCiAgRHJhd2VySGVhZGVyLAogIERyYXdlclRpdGxlLAogIERyYXdlclRyaWdnZXIsCn0K",
        "summary": "195L | Drawer.tsx | .tsx | 5.5 KB"
      },
      {
        "path": "frontend\\src\\components\\Dropdown.tsx",
        "type": ".tsx",
        "size_kb": 13.0,
        "content": "",
        "summary": "387L | Dropdown.tsx | .tsx | 13.0 KB"
      },
      {
        "path": "frontend\\src\\components\\Input.tsx",
        "type": ".tsx",
        "size_kb": 4.9,
        "content": "Ly8gVHJlbW9yIFJhdyBJbnB1dCBbdjEuMC4zXQoKaW1wb3J0IHsgUmlFeWVGaWxsLCBSaUV5ZU9mZkZpbGwsIFJpU2VhcmNoTGluZSB9IGZyb20gIkByZW1peGljb24vcmVhY3QiCmltcG9ydCBSZWFjdCBmcm9tICJyZWFjdCIKaW1wb3J0IHsgdHYsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSAidGFpbHdpbmQtdmFyaWFudHMiCgppbXBvcnQgeyBjeCwgZm9jdXNJbnB1dCwgZm9jdXNSaW5nLCBoYXNFcnJvcklucHV0IH0gZnJvbSAiQC9saWIvdXRpbHMiCgpjb25zdCBpbnB1dFN0eWxlcyA9IHR2KHsKICBiYXNlOiBbCiAgICAvLyBiYXNlCiAgICAicmVsYXRpdmUgYmxvY2sgdy1mdWxsIGFwcGVhcmFuY2Utbm9uZSB0cnVuY2F0ZSByb3VuZGVkLW1kIGJvcmRlciBweC0yLjUgcHktMS41IHNoYWRvdy1zbSBvdXRsaW5lLW5vbmUgdHJhbnNpdGlvbiBzbTp0ZXh0LXNtIiwKICAgIC8vIGJvcmRlciBjb2xvcgogICAgImJvcmRlci1ncmF5LTMwMCBkYXJrOmJvcmRlci1ncmF5LTgwMCIsCiAgICAvLyB0ZXh0IGNvbG9yCiAgICAidGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCIsCiAgICAvLyBwbGFjZWhvbGRlciBjb2xvcgogICAgInBsYWNlaG9sZGVyLWdyYXktNDAwIGRhcms6cGxhY2Vob2xkZXItZ3JheS01MDAiLAogICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgImJnLXdoaXRlIGRhcms6YmctZ3JheS05NTAiLAogICAgLy8gZGlzYWJsZWQKICAgICJkaXNhYmxlZDpib3JkZXItZ3JheS0zMDAgZGlzYWJsZWQ6YmctZ3JheS0xMDAgZGlzYWJsZWQ6dGV4dC1ncmF5LTQwMCIsCiAgICAiZGlzYWJsZWQ6ZGFyazpib3JkZXItZ3JheS03MDAgZGlzYWJsZWQ6ZGFyazpiZy1ncmF5LTgwMCBkaXNhYmxlZDpkYXJrOnRleHQtZ3JheS01MDAiLAogICAgLy8gZmlsZQogICAgWwogICAgICAiZmlsZTotbXktMiBmaWxlOi1tbC0yLjUgZmlsZTpjdXJzb3ItcG9pbnRlciBmaWxlOnJvdW5kZWQtbC1bNXB4XSBmaWxlOnJvdW5kZWQtci1ub25lIGZpbGU6Ym9yZGVyLTAgZmlsZTpweC0zIGZpbGU6cHktMiBmaWxlOm91dGxpbmUtbm9uZSBmb2N1czpvdXRsaW5lLW5vbmUgZGlzYWJsZWQ6cG9pbnRlci1ldmVudHMtbm9uZSBmaWxlOmRpc2FibGVkOnBvaW50ZXItZXZlbnRzLW5vbmUiLAogICAgICAiZmlsZTpib3JkZXItc29saWQgZmlsZTpib3JkZXItZ3JheS0zMDAgZmlsZTpiZy1ncmF5LTUwIGZpbGU6dGV4dC1ncmF5LTUwMCBmaWxlOmhvdmVyOmJnLWdyYXktMTAwIGZpbGU6ZGFyazpib3JkZXItZ3JheS04MDAgZmlsZTpkYXJrOmJnLWdyYXktOTUwIGZpbGU6aG92ZXI6ZGFyazpiZy1ncmF5LTkwMC8yMCBmaWxlOmRpc2FibGVkOmRhcms6Ym9yZGVyLWdyYXktNzAwIiwKICAgICAgImZpbGU6W2JvcmRlci1pbmxpbmUtZW5kLXdpZHRoOjFweF0gZmlsZTpbbWFyZ2luLWlubGluZS1lbmQ6MC43NXJlbV0iLAogICAgICAiZmlsZTpkaXNhYmxlZDpiZy1ncmF5LTEwMCBmaWxlOmRpc2FibGVkOnRleHQtZ3JheS01MDAgZmlsZTpkaXNhYmxlZDpkYXJrOmJnLWdyYXktODAwIiwKICAgIF0sCiAgICAvLyBmb2N1cwogICAgZm9jdXNJbnB1dCwKICAgIC8vIGludmFsaWQgKG9wdGlvbmFsKQogICAgLy8gImFyaWEtW2ludmFsaWQ9dHJ1ZV06ZGFyazpyaW5nLXJlZC00MDAvMjAgYXJpYS1baW52YWxpZD10cnVlXTpyaW5nLTIgYXJpYS1baW52YWxpZD10cnVlXTpyaW5nLXJlZC0yMDAgYXJpYS1baW52YWxpZD10cnVlXTpib3JkZXItcmVkLTUwMCBpbnZhbGlkOnJpbmctMiBpbnZhbGlkOnJpbmctcmVkLTIwMCBpbnZhbGlkOmJvcmRlci1yZWQtNTAwIgogICAgLy8gcmVtb3ZlIHNlYXJjaCBjYW5jZWwgYnV0dG9uIChvcHRpb25hbCkKICAgICJbJjo6LS13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b25dOmhpZGRlbiBbJjo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbl06aGlkZGVuIFsmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uXTpoaWRkZW4iLAogIF0sCiAgdmFyaWFudHM6IHsKICAgIGhhc0Vycm9yOiB7CiAgICAgIHRydWU6IGhhc0Vycm9ySW5wdXQsCiAgICB9LAogICAgLy8gbnVtYmVyIGlucHV0CiAgICBlbmFibGVTdGVwcGVyOiB7CiAgICAgIGZhbHNlOgogICAgICAgICJbYXBwZWFyYW5jZTp0ZXh0ZmllbGRdIFsmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uXTphcHBlYXJhbmNlLW5vbmUgWyY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b25dOmFwcGVhcmFuY2Utbm9uZSIsCiAgICB9LAogIH0sCn0pCgppbnRlcmZhY2UgSW5wdXRQcm9wcwogIGV4dGVuZHMgUmVhY3QuSW5wdXRIVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50PiwKICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgaW5wdXRTdHlsZXM+IHsKICBpbnB1dENsYXNzTmFtZT86IHN0cmluZwp9Cgpjb25zdCBJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgSW5wdXRQcm9wcz4oCiAgKAogICAgewogICAgICBjbGFzc05hbWUsCiAgICAgIGlucHV0Q2xhc3NOYW1lLAogICAgICBoYXNFcnJvciwKICAgICAgZW5hYmxlU3RlcHBlciA9IHRydWUsCiAgICAgIHR5cGUsCiAgICAgIC4uLnByb3BzCiAgICB9OiBJbnB1dFByb3BzLAogICAgZm9yd2FyZGVkUmVmLAogICkgPT4gewogICAgY29uc3QgW3R5cGVTdGF0ZSwgc2V0VHlwZVN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHR5cGUpCgogICAgY29uc3QgaXNQYXNzd29yZCA9IHR5cGUgPT09ICJwYXNzd29yZCIKICAgIGNvbnN0IGlzU2VhcmNoID0gdHlwZSA9PT0gInNlYXJjaCIKCiAgICByZXR1cm4gKAogICAgICA8ZGl2IGNsYXNzTmFtZT17Y3goInJlbGF0aXZlIHctZnVsbCIsIGNsYXNzTmFtZSl9PgogICAgICAgIDxpbnB1dAogICAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9CiAgICAgICAgICB0eXBlPXtpc1Bhc3N3b3JkID8gdHlwZVN0YXRlIDogdHlwZX0KICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgIGlucHV0U3R5bGVzKHsgaGFzRXJyb3IsIGVuYWJsZVN0ZXBwZXIgfSksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicGwtOCI6IGlzU2VhcmNoLAogICAgICAgICAgICAgICJwci0xMCI6IGlzUGFzc3dvcmQsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlucHV0Q2xhc3NOYW1lLAogICAgICAgICAgKX0KICAgICAgICAgIHsuLi5wcm9wc30KICAgICAgICAvPgogICAgICAgIHtpc1NlYXJjaCAmJiAoCiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgICAgLy8gYmFzZQogICAgICAgICAgICAgICJwb2ludGVyLWV2ZW50cy1ub25lIGFic29sdXRlIGJvdHRvbS0wIGxlZnQtMiBmbGV4IGgtZnVsbCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiLAogICAgICAgICAgICAgIC8vIHRleHQgY29sb3IKICAgICAgICAgICAgICAidGV4dC1ncmF5LTQwMCBkYXJrOnRleHQtZ3JheS02MDAiLAogICAgICAgICAgICApfQogICAgICAgICAgPgogICAgICAgICAgICA8UmlTZWFyY2hMaW5lCiAgICAgICAgICAgICAgY2xhc3NOYW1lPSJzaXplLVsxLjEyNXJlbV0gc2hyaW5rLTAiCiAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICApfQogICAgICAgIHtpc1Bhc3N3b3JkICYmICgKICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAgICAgICAiYWJzb2x1dGUgYm90dG9tLTAgcmlnaHQtMCBmbGV4IGgtZnVsbCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcHgtMyIsCiAgICAgICAgICAgICl9CiAgICAgICAgICA+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJDaGFuZ2UgcGFzc3dvcmQgdmlzaWJpbGl0eSIKICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgICAgICAgICAgLy8gYmFzZQogICAgICAgICAgICAgICAgImgtZml0IHctZml0IHJvdW5kZWQtc20gb3V0bGluZS1ub25lIHRyYW5zaXRpb24tYWxsIiwKICAgICAgICAgICAgICAgIC8vIHRleHQKICAgICAgICAgICAgICAgICJ0ZXh0LWdyYXktNDAwIGRhcms6dGV4dC1ncmF5LTYwMCIsCiAgICAgICAgICAgICAgICAvLyBob3ZlcgogICAgICAgICAgICAgICAgImhvdmVyOnRleHQtZ3JheS01MDAgaG92ZXI6ZGFyazp0ZXh0LWdyYXktNTAwIiwKICAgICAgICAgICAgICAgIGZvY3VzUmluZywKICAgICAgICAgICAgICApfQogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7CiAgICAgICAgICAgICAgICBzZXRUeXBlU3RhdGUodHlwZVN0YXRlID09PSAicGFzc3dvcmQiID8gInRleHQiIDogInBhc3N3b3JkIikKICAgICAgICAgICAgICB9fQogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJzci1vbmx5Ij4KICAgICAgICAgICAgICAgIHt0eXBlU3RhdGUgPT09ICJwYXNzd29yZCIgPyAiU2hvdyBwYXNzd29yZCIgOiAiSGlkZSBwYXNzd29yZCJ9CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIHt0eXBlU3RhdGUgPT09ICJwYXNzd29yZCIgPyAoCiAgICAgICAgICAgICAgICA8UmlFeWVGaWxsIGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzc05hbWU9InNpemUtNSBzaHJpbmstMCIgLz4KICAgICAgICAgICAgICApIDogKAogICAgICAgICAgICAgICAgPFJpRXllT2ZmRmlsbCBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3NOYW1lPSJzaXplLTUgc2hyaW5rLTAiIC8+CiAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICApfQogICAgICA8L2Rpdj4KICAgICkKICB9LAopCgpJbnB1dC5kaXNwbGF5TmFtZSA9ICJJbnB1dCIKCmV4cG9ydCB7IElucHV0LCBpbnB1dFN0eWxlcywgdHlwZSBJbnB1dFByb3BzIH0K",
        "summary": "143L | Input.tsx | .tsx | 4.9 KB"
      },
      {
        "path": "frontend\\src\\components\\Label.tsx",
        "type": ".tsx",
        "size_kb": 0.8,
        "content": "Ly8gVHJlbW9yIFJhdyBMYWJlbCBbdjAuMC4xXQoKaW1wb3J0ICogYXMgTGFiZWxQcmltaXRpdmVzIGZyb20gIkByYWRpeC11aS9yZWFjdC1sYWJlbCIKaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAicmVhY3QiCgppbXBvcnQgeyBjeCB9IGZyb20gIkAvbGliL3V0aWxzIgoKaW50ZXJmYWNlIExhYmVsUHJvcHMKICBleHRlbmRzIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgTGFiZWxQcmltaXRpdmVzLlJvb3Q+IHsKICBkaXNhYmxlZD86IGJvb2xlYW4KfQoKY29uc3QgTGFiZWwgPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIExhYmVsUHJpbWl0aXZlcy5Sb290PiwKICBMYWJlbFByb3BzCj4oKHsgY2xhc3NOYW1lLCBkaXNhYmxlZCwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiAoCiAgPExhYmVsUHJpbWl0aXZlcy5Sb290CiAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgIGNsYXNzTmFtZT17Y3goCiAgICAgIC8vIGJhc2UKICAgICAgInRleHQtc20gbGVhZGluZy1ub25lIiwKICAgICAgLy8gdGV4dCBjb2xvcgogICAgICAidGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCIsCiAgICAgIC8vIGRpc2FibGVkCiAgICAgIHsKICAgICAgICAidGV4dC1ncmF5LTQwMCBkYXJrOnRleHQtZ3JheS02MDAiOiBkaXNhYmxlZCwKICAgICAgfSwKICAgICAgY2xhc3NOYW1lLAogICAgKX0KICAgIGFyaWEtZGlzYWJsZWQ9e2Rpc2FibGVkfQogICAgey4uLnByb3BzfQogIC8+CikpCkxhYmVsLmRpc3BsYXlOYW1lID0gIkxhYmVsIgoKZXhwb3J0IHsgTGFiZWwgfQo=",
        "summary": "36L | Label.tsx | .tsx | 0.8 KB"
      },
      {
        "path": "frontend\\src\\components\\LineChart.tsx",
        "type": ".tsx",
        "size_kb": 25.7,
        "content": "",
        "summary": "868L | LineChart.tsx | .tsx | 25.7 KB"
      },
      {
        "path": "frontend\\src\\components\\Popover.tsx",
        "type": ".tsx",
        "size_kb": 3.5,
        "content": "Ly8gVHJlbW9yIFJhdyBQb3BvdmVyIFt2MC4wLjJdCgppbXBvcnQgKiBhcyBQb3BvdmVyUHJpbWl0aXZlcyBmcm9tICJAcmFkaXgtdWkvcmVhY3QtcG9wb3ZlciIKaW1wb3J0IFJlYWN0IGZyb20gInJlYWN0IgoKaW1wb3J0IHsgY3ggfSBmcm9tICJAL2xpYi91dGlscyIKCmNvbnN0IFBvcG92ZXIgPSAoCiAgcHJvcHM6IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgUG9wb3ZlclByaW1pdGl2ZXMuUm9vdD4sCikgPT4gewogIHJldHVybiA8UG9wb3ZlclByaW1pdGl2ZXMuUm9vdCB7Li4ucHJvcHN9IC8+Cn0KClBvcG92ZXIuZGlzcGxheU5hbWUgPSAiUG9wb3ZlciIKCmNvbnN0IFBvcG92ZXJUcmlnZ2VyID0gUmVhY3QuZm9yd2FyZFJlZjwKICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBQb3BvdmVyUHJpbWl0aXZlcy5UcmlnZ2VyPiwKICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFBvcG92ZXJQcmltaXRpdmVzLlRyaWdnZXI+Cj4oKHByb3BzLCBmb3J3YXJkZWRSZWYpID0+IHsKICByZXR1cm4gPFBvcG92ZXJQcmltaXRpdmVzLlRyaWdnZXIgcmVmPXtmb3J3YXJkZWRSZWZ9IHsuLi5wcm9wc30gLz4KfSkKClBvcG92ZXJUcmlnZ2VyLmRpc3BsYXlOYW1lID0gIlBvcG92ZXJUcmlnZ2VyIgoKY29uc3QgUG9wb3ZlckFuY2hvciA9IFJlYWN0LmZvcndhcmRSZWY8CiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgUG9wb3ZlclByaW1pdGl2ZXMuQW5jaG9yPiwKICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFBvcG92ZXJQcmltaXRpdmVzLkFuY2hvcj4KPigocHJvcHMsIGZvcndhcmRlZFJlZikgPT4gewogIHJldHVybiA8UG9wb3ZlclByaW1pdGl2ZXMuQW5jaG9yIHJlZj17Zm9yd2FyZGVkUmVmfSB7Li4ucHJvcHN9IC8+Cn0pCgpQb3BvdmVyQW5jaG9yLmRpc3BsYXlOYW1lID0gIlBvcG92ZXJBbmNob3IiCgpjb25zdCBQb3BvdmVyQ2xvc2UgPSBSZWFjdC5mb3J3YXJkUmVmPAogIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFBvcG92ZXJQcmltaXRpdmVzLkNsb3NlPiwKICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFBvcG92ZXJQcmltaXRpdmVzLkNsb3NlPgo+KChwcm9wcywgZm9yd2FyZGVkUmVmKSA9PiB7CiAgcmV0dXJuIDxQb3BvdmVyUHJpbWl0aXZlcy5DbG9zZSByZWY9e2ZvcndhcmRlZFJlZn0gey4uLnByb3BzfSAvPgp9KQoKUG9wb3ZlckNsb3NlLmRpc3BsYXlOYW1lID0gIlBvcG92ZXJDbG9zZSIKCmludGVyZmFjZSBDb250ZW50UHJvcHMKICBleHRlbmRzIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgUG9wb3ZlclByaW1pdGl2ZXMuQ29udGVudD4ge30KCmNvbnN0IFBvcG92ZXJDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZjwKICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBQb3BvdmVyUHJpbWl0aXZlcy5Db250ZW50PiwKICBDb250ZW50UHJvcHMKPigKICAoCiAgICB7CiAgICAgIGNsYXNzTmFtZSwKICAgICAgc2lkZU9mZnNldCA9IDEwLAogICAgICBzaWRlID0gImJvdHRvbSIsCiAgICAgIGFsaWduID0gImNlbnRlciIsCiAgICAgIGNvbGxpc2lvblBhZGRpbmcsCiAgICAgIGF2b2lkQ29sbGlzaW9ucyA9IHRydWUsCiAgICAgIC4uLnByb3BzCiAgICB9OiBDb250ZW50UHJvcHMsCiAgICBmb3J3YXJkZWRSZWYsCiAgKSA9PiB7CiAgICByZXR1cm4gKAogICAgICA8UG9wb3ZlclByaW1pdGl2ZXMuUG9ydGFsPgogICAgICAgIDxQb3BvdmVyUHJpbWl0aXZlcy5Db250ZW50CiAgICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgICAgIHNpZGVPZmZzZXQ9e3NpZGVPZmZzZXR9CiAgICAgICAgICBzaWRlPXtzaWRlfQogICAgICAgICAgYWxpZ249e2FsaWdufQogICAgICAgICAgY29sbGlzaW9uUGFkZGluZz17Y29sbGlzaW9uUGFkZGluZ30KICAgICAgICAgIGF2b2lkQ29sbGlzaW9ucz17YXZvaWRDb2xsaXNpb25zfQogICAgICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAgICAgLy8gYmFzZQogICAgICAgICAgICAibWF4LWgtW3ZhcigtLXJhZGl4LXBvcHBlci1hdmFpbGFibGUtaGVpZ2h0KV0gbWluLXctNjAgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbWQgYm9yZGVyIHAtMi41IHRleHQtc20gc2hhZG93LW1kIiwKICAgICAgICAgICAgLy8gYm9yZGVyIGNvbG9yCiAgICAgICAgICAgICJib3JkZXItZ3JheS0yMDAgZGFyazpib3JkZXItZ3JheS04MDAiLAogICAgICAgICAgICAvLyB0ZXh0IGNvbG9yCiAgICAgICAgICAgICJ0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTUwIiwKICAgICAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgICAgICAgICAiYmctd2hpdGUgZGFyazpiZy1ncmF5LTk1MCIsCiAgICAgICAgICAgIC8vIHRyYW5zaXRpb24KICAgICAgICAgICAgIndpbGwtY2hhbmdlLVt0cmFuc2Zvcm0sb3BhY2l0eV0iLAogICAgICAgICAgICAiZGF0YS1bc3RhdGU9Y2xvc2VkXTphbmltYXRlLWhpZGUiLAogICAgICAgICAgICAiZGF0YS1bc3RhdGU9b3Blbl06ZGF0YS1bc2lkZT1ib3R0b21dOmFuaW1hdGUtc2xpZGVEb3duQW5kRmFkZSBkYXRhLVtzdGF0ZT1vcGVuXTpkYXRhLVtzaWRlPWxlZnRdOmFuaW1hdGUtc2xpZGVMZWZ0QW5kRmFkZSBkYXRhLVtzdGF0ZT1vcGVuXTpkYXRhLVtzaWRlPXJpZ2h0XTphbmltYXRlLXNsaWRlUmlnaHRBbmRGYWRlIGRhdGEtW3N0YXRlPW9wZW5dOmRhdGEtW3NpZGU9dG9wXTphbmltYXRlLXNsaWRlVXBBbmRGYWRlIiwKCiAgICAgICAgICAgIGNsYXNzTmFtZSwKICAgICAgICAgICl9CiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmFkaXgtdWkvcHJpbWl0aXZlcy9pc3N1ZXMvMTE1OQogICAgICAgICAgb25XaGVlbD17KGV2ZW50KSA9PiB7CiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgIGNvbnN0IGlzU2Nyb2xsaW5nRG93biA9IGV2ZW50LmRlbHRhWSA+IDAKICAgICAgICAgICAgaWYgKGlzU2Nyb2xsaW5nRG93bikgewogICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudCgKICAgICAgICAgICAgICAgIG5ldyBLZXlib2FyZEV2ZW50KCJrZXlkb3duIiwgeyBrZXk6ICJBcnJvd0Rvd24iIH0pLAogICAgICAgICAgICAgICkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoCiAgICAgICAgICAgICAgICBuZXcgS2V5Ym9hcmRFdmVudCgia2V5ZG93biIsIHsga2V5OiAiQXJyb3dVcCIgfSksCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICB9fQogICAgICAgICAgey4uLnByb3BzfQogICAgICAgIC8+CiAgICAgIDwvUG9wb3ZlclByaW1pdGl2ZXMuUG9ydGFsPgogICAgKQogIH0sCikKUG9wb3ZlckNvbnRlbnQuZGlzcGxheU5hbWUgPSAiUG9wb3ZlckNvbnRlbnQiCgpleHBvcnQgeyBQb3BvdmVyLCBQb3BvdmVyQW5jaG9yLCBQb3BvdmVyQ2xvc2UsIFBvcG92ZXJDb250ZW50LCBQb3BvdmVyVHJpZ2dlciB9Cg==",
        "summary": "109L | Popover.tsx | .tsx | 3.5 KB"
      },
      {
        "path": "frontend\\src\\components\\ProgressBar.tsx",
        "type": ".tsx",
        "size_kb": 2.8,
        "content": "Ly8gVHJlbW9yIFJhdyBQcm9ncmVzc0JhciBbdjAuMC4xXQoKaW1wb3J0IFJlYWN0IGZyb20gInJlYWN0IgppbXBvcnQgeyB0diwgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tICJ0YWlsd2luZC12YXJpYW50cyIKCmltcG9ydCB7IGN4IH0gZnJvbSAiQC9saWIvdXRpbHMiCgpjb25zdCBwcm9ncmVzc0JhclZhcmlhbnRzID0gdHYoewogIHNsb3RzOiB7CiAgICBiYWNrZ3JvdW5kOiAiIiwKICAgIGJhcjogIiIsCiAgfSwKICB2YXJpYW50czogewogICAgdmFyaWFudDogewogICAgICBkZWZhdWx0OiB7CiAgICAgICAgYmFja2dyb3VuZDogImJnLWluZGlnby0xMDAgZGFyazpiZy1pbmRpZ28tNTAwLzMwIiwKICAgICAgICBiYXI6ICJiZy1pbmRpZ28tNjAwIGRhcms6YmctaW5kaWdvLTUwMCIsCiAgICAgIH0sCiAgICAgIG5ldXRyYWw6IHsKICAgICAgICBiYWNrZ3JvdW5kOiAiYmctZ3JheS0yMDAgZGFyazpiZy1ncmF5LTUwMC80MCIsCiAgICAgICAgYmFyOiAiYmctZ3JheS01MDAgZGFyazpiZy1ncmF5LTUwMCIsCiAgICAgIH0sCiAgICAgIHdhcm5pbmc6IHsKICAgICAgICBiYWNrZ3JvdW5kOiAiYmcteWVsbG93LTIwMCBkYXJrOmJnLXllbGxvdy01MDAvMzAiLAogICAgICAgIGJhcjogImJnLXllbGxvdy01MDAgZGFyazpiZy15ZWxsb3ctNTAwIiwKICAgICAgfSwKICAgICAgZXJyb3I6IHsKICAgICAgICBiYWNrZ3JvdW5kOiAiYmctcmVkLTIwMCBkYXJrOmJnLXJlZC01MDAvMzAiLAogICAgICAgIGJhcjogImJnLXJlZC01MDAgZGFyazpiZy1yZWQtNTAwIiwKICAgICAgfSwKICAgICAgc3VjY2VzczogewogICAgICAgIGJhY2tncm91bmQ6ICJiZy1lbWVyYWxkLTIwMCBkYXJrOmJnLWVtZXJhbGQtNTAwLzMwIiwKICAgICAgICBiYXI6ICJiZy1lbWVyYWxkLTUwMCBkYXJrOmJnLWVtZXJhbGQtNTAwIiwKICAgICAgfSwKICAgIH0sCiAgfSwKICBkZWZhdWx0VmFyaWFudHM6IHsKICAgIHZhcmlhbnQ6ICJkZWZhdWx0IiwKICB9LAp9KQoKaW50ZXJmYWNlIFByb2dyZXNzQmFyUHJvcHMKICBleHRlbmRzIFJlYWN0LkhUTUxQcm9wczxIVE1MRGl2RWxlbWVudD4sCiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIHByb2dyZXNzQmFyVmFyaWFudHM+IHsKICB2YWx1ZT86IG51bWJlcgogIG1heD86IG51bWJlcgogIHNob3dBbmltYXRpb24/OiBib29sZWFuCiAgbGFiZWw/OiBzdHJpbmcKfQoKY29uc3QgUHJvZ3Jlc3NCYXIgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBQcm9ncmVzc0JhclByb3BzPigKICAoCiAgICB7CiAgICAgIHZhbHVlID0gMCwKICAgICAgbWF4ID0gMTAwLAogICAgICBsYWJlbCwKICAgICAgc2hvd0FuaW1hdGlvbiA9IGZhbHNlLAogICAgICB2YXJpYW50LAogICAgICBjbGFzc05hbWUsCiAgICAgIC4uLnByb3BzCiAgICB9OiBQcm9ncmVzc0JhclByb3BzLAogICAgZm9yd2FyZGVkUmVmLAogICkgPT4gewogICAgY29uc3Qgc2FmZVZhbHVlID0gTWF0aC5taW4obWF4LCBNYXRoLm1heCh2YWx1ZSwgMCkpCiAgICBjb25zdCB7IGJhY2tncm91bmQsIGJhciB9ID0gcHJvZ3Jlc3NCYXJWYXJpYW50cyh7IHZhcmlhbnQgfSkKICAgIHJldHVybiAoCiAgICAgIDxkaXYKICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgICBjbGFzc05hbWU9e2N4KCJmbGV4IHctZnVsbCBpdGVtcy1jZW50ZXIiLCBjbGFzc05hbWUpfQogICAgICAgIHsuLi5wcm9wc30KICAgICAgPgogICAgICAgIDxkaXYKICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgICJyZWxhdGl2ZSBmbGV4IGgtMiB3LWZ1bGwgaXRlbXMtY2VudGVyIHJvdW5kZWQtZnVsbCIsCiAgICAgICAgICAgIGJhY2tncm91bmQoKSwKICAgICAgICAgICl9CiAgICAgICAgICBhcmlhLWxhYmVsPSJwcm9ncmVzcyBiYXIiCiAgICAgICAgICBhcmlhLXZhbHVlbm93PXt2YWx1ZX0KICAgICAgICAgIGFyaWEtdmFsdWVtYXg9e21heH0KICAgICAgICA+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgICAgImgtZnVsbCBmbGV4LWNvbCByb3VuZGVkLWZ1bGwiLAogICAgICAgICAgICAgIGJhcigpLAogICAgICAgICAgICAgIHNob3dBbmltYXRpb24gJiYKICAgICAgICAgICAgICAgICJ0cmFuc2Zvcm0tZ3B1IHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBlYXNlLWluLW91dCIsCiAgICAgICAgICAgICl9CiAgICAgICAgICAgIHN0eWxlPXt7CiAgICAgICAgICAgICAgd2lkdGg6IG1heCA/IGAkeyhzYWZlVmFsdWUgLyBtYXgpICogMTAwfSVgIDogYCR7c2FmZVZhbHVlfSVgLAogICAgICAgICAgICB9fQogICAgICAgICAgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICB7bGFiZWwgPyAoCiAgICAgICAgICA8c3BhbgogICAgICAgICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgICAgICAgIC8vIGJhc2UKICAgICAgICAgICAgICAibWwtMiB3aGl0ZXNwYWNlLW5vd3JhcCB0ZXh0LXNtIGZvbnQtbWVkaXVtIGxlYWRpbmctbm9uZSIsCiAgICAgICAgICAgICAgLy8gdGV4dCBjb2xvcgogICAgICAgICAgICAgICJ0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTUwIiwKICAgICAgICAgICAgKX0KICAgICAgICAgID4KICAgICAgICAgICAge2xhYmVsfQogICAgICAgICAgPC9zcGFuPgogICAgICAgICkgOiBudWxsfQogICAgICA8L2Rpdj4KICAgICkKICB9LAopCgpQcm9ncmVzc0Jhci5kaXNwbGF5TmFtZSA9ICJQcm9ncmVzc0JhciIKCmV4cG9ydCB7IFByb2dyZXNzQmFyLCBwcm9ncmVzc0JhclZhcmlhbnRzLCB0eXBlIFByb2dyZXNzQmFyUHJvcHMgfQo=",
        "summary": "112L | ProgressBar.tsx | .tsx | 2.8 KB"
      },
      {
        "path": "frontend\\src\\components\\RadioCard.tsx",
        "type": ".tsx",
        "size_kb": 3.3,
        "content": "Ly8gVHJlbW9yIFJhdyBSYWRpbyBDYXJkIFt2MC4wLjFdCgppbXBvcnQgKiBhcyBSYWRpb0dyb3VwUHJpbWl0aXZlcyBmcm9tICJAcmFkaXgtdWkvcmVhY3QtcmFkaW8tZ3JvdXAiCmltcG9ydCBSZWFjdCBmcm9tICJyZWFjdCIKCmltcG9ydCB7IGN4LCBmb2N1c0lucHV0LCBmb2N1c1JpbmcgfSBmcm9tICJAL2xpYi91dGlscyIKCmNvbnN0IFJhZGlvQ2FyZEdyb3VwID0gUmVhY3QuZm9yd2FyZFJlZjwKICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBSYWRpb0dyb3VwUHJpbWl0aXZlcy5Sb290PiwKICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFJhZGlvR3JvdXBQcmltaXRpdmVzLlJvb3Q+Cj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHsKICByZXR1cm4gKAogICAgPFJhZGlvR3JvdXBQcmltaXRpdmVzLlJvb3QKICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9CiAgICAgIGNsYXNzTmFtZT17Y3goImdyaWQgZ2FwLTIiLCBjbGFzc05hbWUpfQogICAgICB7Li4ucHJvcHN9CiAgICAvPgogICkKfSkKClJhZGlvQ2FyZEdyb3VwLmRpc3BsYXlOYW1lID0gIlJhZGlvQ2FyZEdyb3VwIgoKY29uc3QgUmFkaW9DYXJkSXRlbSA9IFJlYWN0LmZvcndhcmRSZWY8CiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgUmFkaW9Hcm91cFByaW1pdGl2ZXMuSXRlbT4sCiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBSYWRpb0dyb3VwUHJpbWl0aXZlcy5JdGVtPgo+KCh7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4gewogIHJldHVybiAoCiAgICA8UmFkaW9Hcm91cFByaW1pdGl2ZXMuSXRlbQogICAgICByZWY9e2ZvcndhcmRlZFJlZn0KICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAvLyBiYXNlCiAgICAgICAgImdyb3VwIHJlbGF0aXZlIHctZnVsbCByb3VuZGVkLW1kIGJvcmRlciBwLTQgdGV4dC1sZWZ0IHNoYWRvdy1zbSB0cmFuc2l0aW9uIGZvY3VzOm91dGxpbmUtbm9uZSIsCiAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgICAgICJiZy13aGl0ZSBkYXJrOmJnLWdyYXktOTUwIiwKICAgICAgICAvLyBib3JkZXIgY29sb3IKICAgICAgICAiYm9yZGVyLWdyYXktMzAwIGRhcms6Ym9yZGVyLWdyYXktODAwIiwKICAgICAgICAiZGF0YS1bc3RhdGU9Y2hlY2tlZF06Ym9yZGVyLWluZGlnby02MDAiLAogICAgICAgICJkYXRhLVtzdGF0ZT1jaGVja2VkXTpkYXJrOmJvcmRlci1pbmRpZ28tNjAwIiwKICAgICAgICAvLyBkaXNhYmxlZAogICAgICAgICJkYXRhLVtkaXNhYmxlZF06Ym9yZGVyLWdyYXktMTAwIGRhdGEtW2Rpc2FibGVkXTpkYXJrOmJvcmRlci1ncmF5LTgwMCIsCiAgICAgICAgImRhdGEtW2Rpc2FibGVkXTpiZy1ncmF5LTUwIGRhdGEtW2Rpc2FibGVkXTpzaGFkb3ctbm9uZSBkYXRhLVtkaXNhYmxlZF06ZGFyazpiZy1ncmF5LTkwMCIsCiAgICAgICAgZm9jdXNJbnB1dCwKICAgICAgICBjbGFzc05hbWUsCiAgICAgICl9CiAgICAgIHsuLi5wcm9wc30KICAgID4KICAgICAge2NoaWxkcmVufQogICAgPC9SYWRpb0dyb3VwUHJpbWl0aXZlcy5JdGVtPgogICkKfSkKClJhZGlvQ2FyZEl0ZW0uZGlzcGxheU5hbWUgPSAiUmFkaW9DYXJkSXRlbSIKCmNvbnN0IFJhZGlvQ2FyZEluZGljYXRvciA9IFJlYWN0LmZvcndhcmRSZWY8CiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgUmFkaW9Hcm91cFByaW1pdGl2ZXMuSW5kaWNhdG9yPiwKICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFJhZGlvR3JvdXBQcmltaXRpdmVzLkluZGljYXRvcj4KPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4gewogIHJldHVybiAoCiAgICA8ZGl2CiAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgLy8gYmFzZQogICAgICAgICJyZWxhdGl2ZSBmbGV4IHNpemUtNCBzaHJpbmstMCBhcHBlYXJhbmNlLW5vbmUgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJvdW5kZWQtZnVsbCBib3JkZXIgc2hhZG93LXNtIG91dGxpbmUtbm9uZSIsCiAgICAgICAgLy8gYm9yZGVyIGNvbG9yCiAgICAgICAgImJvcmRlci1ncmF5LTIwMCBkYXJrOmJvcmRlci1ncmF5LTgwMCIsCiAgICAgICAgLy8gYmFja2dyb3VuZCBjb2xvcgogICAgICAgICJiZy13aGl0ZSBkYXJrOmJnLWdyYXktOTUwIiwKICAgICAgICAvLyBjaGVja2VkCiAgICAgICAgImdyb3VwLWRhdGEtW3N0YXRlPWNoZWNrZWRdOmJvcmRlci0wIGdyb3VwLWRhdGEtW3N0YXRlPWNoZWNrZWRdOmJvcmRlci10cmFuc3BhcmVudCBncm91cC1kYXRhLVtzdGF0ZT1jaGVja2VkXTpiZy1pbmRpZ28tNjAwIiwKICAgICAgICAvLyBkaXNhYmxlZAogICAgICAgICJncm91cC1kYXRhLVtkaXNhYmxlZF06Ym9yZGVyLWdyYXktMzAwIGdyb3VwLWRhdGEtW2Rpc2FibGVkXTpiZy1ncmF5LTEwMCBncm91cC1kYXRhLVtkaXNhYmxlZF06dGV4dC1ncmF5LTQwMCIsCiAgICAgICAgImdyb3VwLWRhdGEtW2Rpc2FibGVkXTpkYXJrOmJvcmRlci1ncmF5LTcwMCBncm91cC1kYXRhLVtkaXNhYmxlZF06ZGFyazpiZy1ncmF5LTgwMCIsCiAgICAgICAgLy8gZm9jdXMKICAgICAgICBmb2N1c1JpbmcsCiAgICAgICAgY2xhc3NOYW1lLAogICAgICApfQogICAgPgogICAgICA8UmFkaW9Hcm91cFByaW1pdGl2ZXMuSW5kaWNhdG9yCiAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9CiAgICAgICAgY2xhc3NOYW1lPXtjeCgiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiKX0KICAgICAgICB7Li4ucHJvcHN9CiAgICAgID4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgICAgICAvLyBiYXNlCiAgICAgICAgICAgICJzaXplIHNpemUtMS41IHNocmluay0wIHJvdW5kZWQtZnVsbCIsCiAgICAgICAgICAgIC8vIGluZGljYXRvcgogICAgICAgICAgICAiYmctd2hpdGUiLAogICAgICAgICAgICAvLyBkaXNhYmxlZAogICAgICAgICAgICAiZ3JvdXAtZGF0YS1bZGlzYWJsZWRdOmJnLWdyYXktNDAwIGdyb3VwLWRhdGEtW2Rpc2FibGVkXTpkYXJrOmJnLWdyYXktNTAwIiwKICAgICAgICAgICl9CiAgICAgICAgLz4KICAgICAgPC9SYWRpb0dyb3VwUHJpbWl0aXZlcy5JbmRpY2F0b3I+CiAgICA8L2Rpdj4KICApCn0pCgpSYWRpb0NhcmRJbmRpY2F0b3IuZGlzcGxheU5hbWUgPSAiUmFkaW9DYXJkSW5kaWNhdG9yIgoKZXhwb3J0IHsgUmFkaW9DYXJkR3JvdXAsIFJhZGlvQ2FyZEluZGljYXRvciwgUmFkaW9DYXJkSXRlbSB9Cg==",
        "summary": "99L | RadioCard.tsx | .tsx | 3.3 KB"
      },
      {
        "path": "frontend\\src\\components\\Select.tsx",
        "type": ".tsx",
        "size_kb": 8.2,
        "content": "",
        "summary": "261L | Select.tsx | .tsx | 8.2 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\icons\\ArrowAnimated.tsx",
        "type": ".tsx",
        "size_kb": 0.6,
        "content": "aW1wb3J0IHsgY3ggfSBmcm9tICJAL2xpYi91dGlscyIKCmV4cG9ydCBmdW5jdGlvbiBBcnJvd0FuaW1hdGVkKHsKICBjbGFzc05hbWUsCiAgLi4ucHJvcHMKfTogUmVhY3QuSFRNTEF0dHJpYnV0ZXM8U1ZHRWxlbWVudD4pIHsKICByZXR1cm4gKAogICAgPHN2ZwogICAgICBjbGFzc05hbWU9e2N4KCItbXItMSBtbC0xLjUgc3Ryb2tlLVsxLjVweF0iLCBjbGFzc05hbWUpfQogICAgICBmaWxsPSJub25lIgogICAgICBzdHJva2U9ImN1cnJlbnRDb2xvciIKICAgICAgd2lkdGg9IjExIgogICAgICBoZWlnaHQ9IjExIgogICAgICB2aWV3Qm94PSIwIDAgMTAgMTAiCiAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICB7Li4ucHJvcHN9CiAgICA+CiAgICAgIDxwYXRoCiAgICAgICAgY2xhc3NOYW1lPSJvcGFjaXR5LTAgdHJhbnNpdGlvbiBncm91cC1ob3ZlcjpvcGFjaXR5LTEwMCIKICAgICAgICBkPSJNMCA1aDciCiAgICAgIC8+CiAgICAgIDxwYXRoCiAgICAgICAgY2xhc3NOYW1lPSJ0cmFuc2l0aW9uIGdyb3VwLWhvdmVyOnRyYW5zbGF0ZS14LVszcHhdIgogICAgICAgIGQ9Ik0xIDFsNCA0LTQgNCIKICAgICAgLz4KICAgIDwvc3ZnPgogICkKfQo=",
        "summary": "28L | ArrowAnimated.tsx | .tsx | 0.6 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\icons\\TremorPlaceholder.tsx",
        "type": ".tsx",
        "size_kb": 4.6,
        "content": "aW1wb3J0IHR5cGUgeyBTVkdQcm9wcyB9IGZyb20gInJlYWN0IgoKZXhwb3J0IGNvbnN0IFRyZW1vclBsYWNlaG9sZGVyID0gKHByb3BzOiBTVkdQcm9wczxTVkdTVkdFbGVtZW50PikgPT4gKAogIDxzdmcgY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9IGZpbGw9Im5vbmUiIHZpZXdCb3g9IjAgMCA5MiA5MiIgey4uLnByb3BzfT4KICAgIDxnIGNsaXBQYXRoPSJ1cmwoI2NsaXAwXzEwMDk2XzI0NjIpIj4KICAgICAgPG1hc2sKICAgICAgICBpZD0ibWFzazBfMTAwOTZfMjQ2MiIKICAgICAgICB3aWR0aD17OTJ9CiAgICAgICAgaGVpZ2h0PXs5Mn0KICAgICAgICB4PXswfQogICAgICAgIHk9ezB9CiAgICAgICAgbWFza1VuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICBzdHlsZT17ewogICAgICAgICAgbWFza1R5cGU6ICJsdW1pbmFuY2UiLAogICAgICAgIH19CiAgICAgID4KICAgICAgICA8cGF0aCBmaWxsPSJ3aGl0ZSIgZD0iTTkyIDBIMFY5Mkg5MlYwWiIgLz4KICAgICAgPC9tYXNrPgogICAgICA8ZyBtYXNrPSJ1cmwoI21hc2swXzEwMDk2XzI0NjIpIj4KICAgICAgICA8cGF0aAogICAgICAgICAgZmlsbD0iI0RFREVERSIKICAgICAgICAgIGQ9Ik0xLjA5NTIxIDIwLjgwOUwxOS43NTgxIDMuMjg1MTZINzIuMjQxOUw5MC45MDQ3IDIwLjgwOUgxLjA5NTIxWiIKICAgICAgICAvPgogICAgICAgIDxwYXRoIGZpbGw9IiNDOUM5QzkiIGQ9Ik0yIDIwSDg5Vjg4LjVIMlYyMFoiIC8+CiAgICAgICAgPHBhdGgKICAgICAgICAgIHN0cm9rZT0iIzhDOEM4QyIKICAgICAgICAgIHN0cm9rZVdpZHRoPXszLjI4NTcxfQogICAgICAgICAgZD0iTTE3Ljg3NjEgMi45NzM3NUwzLjQ5Njg3IDE3LjgwMjNDMi4zMDc5NCAxOS4wMjgzIDEuNjQzMDcgMjAuNjY5MSAxLjY0MzA3IDIyLjM3N1Y4NS41QzEuNjQzMDcgODcuNzA5MSAzLjQzMzkyIDg5LjUgNS42NDMwNiA4OS41SDg2LjM1NzRDODguNTY2NSA4OS41IDkwLjM1NzQgODcuNzA5MSA5MC4zNTc0IDg1LjVWMjIuODIwOEM5MC4zNTc0IDIwLjgyODMgODkuNTgxNyAxOC45MTQxIDg4LjE5NDUgMTcuNDgzN0w3NC4xMjQ0IDIuOTczNzVDNzMuMjk5MiAyLjEyMjg0IDcyLjE2NDYgMS42NDI1OCA3MC45NzkzIDEuNjQyNThIMjEuMDIxMUMxOS44MzU4IDEuNjQyNTggMTguNzAxMiAyLjEyMjg0IDE3Ljg3NjEgMi45NzM3NVoiCiAgICAgICAgLz4KICAgICAgICA8cGF0aAogICAgICAgICAgc3Ryb2tlPSIjOEM4QzhDIgogICAgICAgICAgc3Ryb2tlV2lkdGg9ezMuMjg1NzF9CiAgICAgICAgICBkPSJNMi4xOTA0MyAxOS43MTI5SDkwLjM1NzEiCiAgICAgICAgLz4KICAgICAgICA8cGF0aAogICAgICAgICAgZmlsbD0iIzdEN0Q3RCIKICAgICAgICAgIGZpbGxPcGFjaXR5PXswLjh9CiAgICAgICAgICBkPSJNMzcuNzg1NSAzLjI4NTE2SDU0LjIxNEw1Ni45NTIxIDE5LjcxMzdWMzQuNzU2NEM1Ni45NTIxIDM2LjczMTUgNTUuMzUwOSAzOC4zMzI4IDUzLjM3NTcgMzguMzMyOEgzOC42MjM4QzM2LjY0ODYgMzguMzMyOCAzNS4wNDc0IDM2LjczMTUgMzUuMDQ3NCAzNC43NTY0VjE5LjcxMzdMMzcuNzg1NSAzLjI4NTE2WiIKICAgICAgICAvPgogICAgICAgIDxwYXRoCiAgICAgICAgICBmaWxsPSJ3aGl0ZSIKICAgICAgICAgIGQ9Ik00OC4yNzQ0IDYzLjM4NjdIMTQuMjMyOUMxMi45MzYzIDYzLjM4NjcgMTEuODg1MyA2NC4zODUzIDExLjg4NTMgNjUuNjE3Vjc3Ljg4MzdDMTEuODg1MyA3OS4xMTU1IDEyLjkzNjMgODAuMTE0IDE0LjIzMjkgODAuMTE0SDQ4LjI3NDRDNDkuNTcxIDgwLjExNCA1MC42MjIxIDc5LjExNTUgNTAuNjIyMSA3Ny44ODM3VjY1LjYxN0M1MC42MjIxIDY0LjM4NTMgNDkuNTcxIDYzLjM4NjcgNDguMjc0NCA2My4zODY3WiIKICAgICAgICAvPgogICAgICAgIDxwYXRoCiAgICAgICAgICBzdHJva2U9ImJsYWNrIgogICAgICAgICAgc3Ryb2tlT3BhY2l0eT17MC4wN30KICAgICAgICAgIHN0cm9rZVdpZHRoPXsxLjA5NTI0fQogICAgICAgICAgZD0iTTQ4LjE0OTUgNjIuOTQ3M0gxNC4zNTgzQzEyLjc0OTUgNjIuOTQ3MyAxMS40NDUzIDY0LjE3OSAxMS40NDUzIDY1LjY5ODVWNzcuODAzN0MxMS40NDUzIDc5LjMyMzIgMTIuNzQ5NSA4MC41NTQ5IDE0LjM1ODMgODAuNTU0OUg0OC4xNDk1QzQ5Ljc1ODMgODAuNTU0OSA1MS4wNjI1IDc5LjMyMzIgNTEuMDYyNSA3Ny44MDM3VjY1LjY5ODVDNTEuMDYyNSA2NC4xNzkgNDkuNzU4MyA2Mi45NDczIDQ4LjE0OTUgNjIuOTQ3M1oiCiAgICAgICAgLz4KICAgICAgICA8cGF0aAogICAgICAgICAgZmlsbD0iIzBGMTcyQSIKICAgICAgICAgIGQ9Ik0xNy43MTAyIDc1LjQ2MDRDMTYuNzc0NyA3NS40NjA0IDE1Ljk3NTkgNzQuOTg3NCAxNS45NzU5IDczLjc4OTFWNzEuMzgySDE1LjEwMzRWNzAuMTYyN0gxNi4wMjg0VjY4Ljc2NDdMMTcuNDQ3NCA2OC4yMzkyVjcwLjE2MjdIMTguNTkzMlY3MS4zODJIMTcuNDQ3NFY3My40NDIyQzE3LjQ0NzQgNzMuOTA0NyAxNy42Nzg3IDc0LjEzNiAxOC4xNzI3IDc0LjEzNkMxOC4zMzA0IDc0LjEzNiAxOC40Nzc1IDc0LjEwNDUgMTguNTkzMiA3NC4wNzI5Vjc1LjM0NDhDMTguNDU2NSA3NS4zODY4IDE4LjA3ODEgNzUuNDYwNCAxNy43MTAyIDc1LjQ2MDRaTTE5LjU1OTcgNzUuMzAyN1Y3MC4xNjI3SDIxLjAxMDNWNzAuOTA5QzIxLjI2MjUgNzAuMzQxNCAyMS43MzU1IDY5Ljk5NDYgMjIuMzg3MiA2OS45OTQ2QzIyLjQ5MjMgNjkuOTk0NiAyMi43MDI2IDcwLjAxNTYgMjIuNzY1NiA3MC4wMjYxVjcxLjUxODdDMjIuNTk3NSA3MS40NzY2IDIyLjQyOTMgNzEuNDY2MSAyMi4yMjk2IDcxLjQ2NjFDMjEuNjcyNSA3MS40NjYxIDIxLjE1NzQgNzEuODM0IDIxLjAzMTMgNzIuMzI4MVY3NS4zMDI3SDE5LjU1OTdaTTI1Ljg1NjcgNzUuNDYwNEMyNC4zNzQ2IDc1LjQ2MDQgMjMuMTU1MyA3NC40NzIzIDIzLjE1NTMgNzIuNjk1OUMyMy4xNTUzIDcxLjA3NzIgMjQuMzIyIDY5Ljk5NDYgMjUuNzkzNiA2OS45OTQ2QzI3LjQyMjkgNjkuOTk0NiAyOC4zNDc4IDcxLjEyOTggMjguMzQ3OCA3Mi43MTdDMjguMzQ3OCA3Mi44NDMxIDI4LjMzNzMgNzMuMDYzOCAyOC4zMjY4IDczLjE0NzlIMjQuNjg5OUMyNC43MjE1IDczLjg1MjIgMjUuMzczMiA3NC4yNDExIDI2LjAxNDMgNzQuMjQxMUMyNi43MDgxIDc0LjI0MTEgMjcuMjk2NyA3NC4wNTE5IDI3Ljk2OTQgNzMuNjEwNFY3NC44ODIzQzI3LjQ5NjQgNzUuMTg3MSAyNi44ODY4IDc1LjQ2MDQgMjUuODU2NyA3NS40NjA0Wk0yNC43MjE1IDcyLjE1OTlIMjYuODY1OEMyNi44MzQyIDcxLjY3NjQgMjYuNDk3OSA3MS4yMTM5IDI1Ljc5MzYgNzEuMjEzOUMyNS4xNTI0IDcxLjIxMzkgMjQuNzUzIDcxLjY5NzQgMjQuNzIxNSA3Mi4xNTk5Wk0zNS4yMTkyIDY5Ljk5NDZDMzYuMTg2MiA2OS45OTQ2IDM3LjA1ODYgNzAuNjU2OCAzNy4wNTg2IDcxLjg3NjFWNzUuMzAyN0gzNS41ODdWNzIuMjQ0QzM1LjU4NyA3MS42ODY5IDM1LjI4MjIgNzEuMzQgMzQuNzg4MiA3MS4zNEMzNC40MjAzIDcxLjM0IDM0LjEyNiA3MS41NTAyIDMzLjkxNTggNzEuODQ0NVY3MS44NzYxVjc1LjMwMjdIMzIuNDQ0MlY3Mi4yNDRDMzIuNDQ0MiA3MS42ODY5IDMyLjE0OTkgNzEuMzQgMzEuNjU1OCA3MS4zNEMzMS4yNjY5IDcxLjM0IDMwLjk3MjYgNzEuNTYwNyAzMC43NjI0IDcxLjg3NjFWNzUuMzAyN0gyOS4yOTA4VjcwLjE2MjdIMzAuNzQxNFY3MC41NzI3QzMxLjAyNTIgNzAuMjQ2OCAzMS40NTYxIDY5Ljk5NDYgMzIuMTA3OCA2OS45OTQ2QzMyLjcwNyA2OS45OTQ2IDMzLjI2NDEgNzAuMjQ2OCAzMy41ODk5IDcwLjczMDNDMzMuODUyNyA3MC40MjU1IDM0LjM2NzcgNjkuOTk0NiAzNS4yMTkyIDY5Ljk5NDZaTTQwLjY5MTYgNzUuNDYwNEMzOS4wMzA5IDc1LjQ2MDQgMzcuODk1NyA3NC4yNjIxIDM3Ljg5NTcgNzIuNzE3QzM3Ljg5NTcgNzEuMTgyMyAzOS4wMzA5IDY5Ljk5NDYgNDAuNjkxNiA2OS45OTQ2QzQyLjM1MjQgNjkuOTk0NiA0My40OTgxIDcxLjE4MjMgNDMuNDk4MSA3Mi43MTdDNDMuNDk4MSA3NC4yNjIxIDQyLjM1MjQgNzUuNDYwNCA0MC42OTE2IDc1LjQ2MDRaTTQwLjY5MTYgNzQuMDcyOUM0MS40MDY0IDc0LjA3MjkgNDEuOTc0IDczLjU2ODQgNDEuOTc0IDcyLjcxN0M0MS45NzQgNzEuODg2NiA0MS40MDY0IDcxLjM3MTUgNDAuNjkxNiA3MS4zNzE1QzM5Ljk4NzQgNzEuMzcxNSAzOS40MTk4IDcxLjg4NjYgMzkuNDE5OCA3Mi43MTdDMzkuNDE5OCA3My41Njg0IDM5Ljk4NzQgNzQuMDcyOSA0MC42OTE2IDc0LjA3MjlaTTQ0LjQ0MTggNzUuMzAyN1Y3MC4xNjI3SDQ1Ljg5MjNWNzAuOTA5QzQ2LjE0NDYgNzAuMzQxNCA0Ni42MTc2IDY5Ljk5NDYgNDcuMjY5MyA2OS45OTQ2QzQ3LjM3NDQgNjkuOTk0NiA0Ny41ODQ2IDcwLjAxNTYgNDcuNjQ3NyA3MC4wMjYxVjcxLjUxODdDNDcuNDc5NSA3MS40NzY2IDQ3LjMxMTMgNzEuNDY2MSA0Ny4xMTE2IDcxLjQ2NjFDNDYuNTU0NSA3MS40NjYxIDQ2LjAzOTUgNzEuODM0IDQ1LjkxMzMgNzIuMzI4MVY3NS4zMDI3SDQ0LjQ0MThaIgogICAgICAgIC8+CiAgICAgIDwvZz4KICAgIDwvZz4KICAgIDxkZWZzPgogICAgICA8Y2xpcFBhdGggaWQ9ImNsaXAwXzEwMDk2XzI0NjIiPgogICAgICAgIDxyZWN0IHdpZHRoPXs5Mn0gaGVpZ2h0PXs5Mn0gZmlsbD0id2hpdGUiIC8+CiAgICAgIDwvY2xpcFBhdGg+CiAgICA8L2RlZnM+CiAgPC9zdmc+CikK",
        "summary": "62L | TremorPlaceholder.tsx | .tsx | 4.6 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\navigation\\DropdownUserProfile.tsx",
        "type": ".tsx",
        "size_kb": 3.9,
        "content": "InVzZSBjbGllbnQiCgppbXBvcnQgewogIERyb3Bkb3duTWVudSwKICBEcm9wZG93bk1lbnVDb250ZW50LAogIERyb3Bkb3duTWVudUdyb3VwLAogIERyb3Bkb3duTWVudUl0ZW0sCiAgRHJvcGRvd25NZW51TGFiZWwsCiAgRHJvcGRvd25NZW51UmFkaW9Hcm91cCwKICBEcm9wZG93bk1lbnVSYWRpb0l0ZW0sCiAgRHJvcGRvd25NZW51U2VwYXJhdG9yLAogIERyb3Bkb3duTWVudVN1Yk1lbnUsCiAgRHJvcGRvd25NZW51U3ViTWVudUNvbnRlbnQsCiAgRHJvcGRvd25NZW51U3ViTWVudVRyaWdnZXIsCiAgRHJvcGRvd25NZW51VHJpZ2dlciwKfSBmcm9tICJAL2NvbXBvbmVudHMvRHJvcGRvd24iCmltcG9ydCB7CiAgUmlBcnJvd1JpZ2h0VXBMaW5lLAogIFJpQ29tcHV0ZXJMaW5lLAogIFJpTW9vbkxpbmUsCiAgUmlTdW5MaW5lLAp9IGZyb20gIkByZW1peGljb24vcmVhY3QiCmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSAibmV4dC10aGVtZXMiCmltcG9ydCAqIGFzIFJlYWN0IGZyb20gInJlYWN0IgoKZXhwb3J0IHR5cGUgRHJvcGRvd25Vc2VyUHJvZmlsZVByb3BzID0gewogIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUKICBhbGlnbj86ICJjZW50ZXIiIHwgInN0YXJ0IiB8ICJlbmQiCn0KCmV4cG9ydCBmdW5jdGlvbiBEcm9wZG93blVzZXJQcm9maWxlKHsKICBjaGlsZHJlbiwKICBhbGlnbiA9ICJzdGFydCIsCn06IERyb3Bkb3duVXNlclByb2ZpbGVQcm9wcykgewogIGNvbnN0IFttb3VudGVkLCBzZXRNb3VudGVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKQogIGNvbnN0IHsgdGhlbWUsIHNldFRoZW1lIH0gPSB1c2VUaGVtZSgpCiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHsKICAgIHNldE1vdW50ZWQodHJ1ZSkKICB9LCBbXSkKCiAgaWYgKCFtb3VudGVkKSB7CiAgICByZXR1cm4gbnVsbAogIH0KICByZXR1cm4gKAogICAgPD4KICAgICAgPERyb3Bkb3duTWVudT4KICAgICAgICA8RHJvcGRvd25NZW51VHJpZ2dlciBhc0NoaWxkPntjaGlsZHJlbn08L0Ryb3Bkb3duTWVudVRyaWdnZXI+CiAgICAgICAgPERyb3Bkb3duTWVudUNvbnRlbnQgYWxpZ249e2FsaWdufT4KICAgICAgICAgIDxEcm9wZG93bk1lbnVMYWJlbD5lbW1hLnN0b25lQGFjbWUuY29tPC9Ecm9wZG93bk1lbnVMYWJlbD4KICAgICAgICAgIDxEcm9wZG93bk1lbnVHcm91cD4KICAgICAgICAgICAgPERyb3Bkb3duTWVudVN1Yk1lbnU+CiAgICAgICAgICAgICAgPERyb3Bkb3duTWVudVN1Yk1lbnVUcmlnZ2VyPlRoZW1lPC9Ecm9wZG93bk1lbnVTdWJNZW51VHJpZ2dlcj4KICAgICAgICAgICAgICA8RHJvcGRvd25NZW51U3ViTWVudUNvbnRlbnQ+CiAgICAgICAgICAgICAgICA8RHJvcGRvd25NZW51UmFkaW9Hcm91cAogICAgICAgICAgICAgICAgICB2YWx1ZT17dGhlbWV9CiAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9eyh2YWx1ZSkgPT4gewogICAgICAgICAgICAgICAgICAgIHNldFRoZW1lKHZhbHVlKQogICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8RHJvcGRvd25NZW51UmFkaW9JdGVtCiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iU3dpdGNoIHRvIExpZ2h0IE1vZGUiCiAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImxpZ2h0IgogICAgICAgICAgICAgICAgICAgIGljb25UeXBlPSJjaGVjayIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxSaVN1bkxpbmUgY2xhc3NOYW1lPSJzaXplLTQgc2hyaW5rLTAiIGFyaWEtaGlkZGVuPSJ0cnVlIiAvPgogICAgICAgICAgICAgICAgICAgIExpZ2h0CiAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25NZW51UmFkaW9JdGVtPgogICAgICAgICAgICAgICAgICA8RHJvcGRvd25NZW51UmFkaW9JdGVtCiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iU3dpdGNoIHRvIERhcmsgTW9kZSIKICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZGFyayIKICAgICAgICAgICAgICAgICAgICBpY29uVHlwZT0iY2hlY2siCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8UmlNb29uTGluZQogICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJzaXplLTQgc2hyaW5rLTAiCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIERhcmsKICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bk1lbnVSYWRpb0l0ZW0+CiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bk1lbnVSYWRpb0l0ZW0KICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJTd2l0Y2ggdG8gU3lzdGVtIE1vZGUiCiAgICAgICAgICAgICAgICAgICAgdmFsdWU9InN5c3RlbSIKICAgICAgICAgICAgICAgICAgICBpY29uVHlwZT0iY2hlY2siCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8UmlDb21wdXRlckxpbmUKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ic2l6ZS00IHNocmluay0wIgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICBTeXN0ZW0KICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bk1lbnVSYWRpb0l0ZW0+CiAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duTWVudVJhZGlvR3JvdXA+CiAgICAgICAgICAgICAgPC9Ecm9wZG93bk1lbnVTdWJNZW51Q29udGVudD4KICAgICAgICAgICAgPC9Ecm9wZG93bk1lbnVTdWJNZW51PgogICAgICAgICAgPC9Ecm9wZG93bk1lbnVHcm91cD4KICAgICAgICAgIDxEcm9wZG93bk1lbnVTZXBhcmF0b3IgLz4KICAgICAgICAgIDxEcm9wZG93bk1lbnVHcm91cD4KICAgICAgICAgICAgPERyb3Bkb3duTWVudUl0ZW0+CiAgICAgICAgICAgICAgQ2hhbmdlbG9nCiAgICAgICAgICAgICAgPFJpQXJyb3dSaWdodFVwTGluZQogICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJtYi0xIG1sLTEgc2l6ZS0yLjUgc2hyaW5rLTAgdGV4dC1ncmF5LTUwMCIKICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvRHJvcGRvd25NZW51SXRlbT4KICAgICAgICAgICAgPERyb3Bkb3duTWVudUl0ZW0+CiAgICAgICAgICAgICAgRG9jdW1lbnRhdGlvbgogICAgICAgICAgICAgIDxSaUFycm93UmlnaHRVcExpbmUKICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ibWItMSBtbC0xIHNpemUtMi41IHNocmluay0wIHRleHQtZ3JheS01MDAiCiAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L0Ryb3Bkb3duTWVudUl0ZW0+CiAgICAgICAgICAgIDxEcm9wZG93bk1lbnVJdGVtPgogICAgICAgICAgICAgIEpvaW4gU2xhY2sgY29tbXVuaXR5CiAgICAgICAgICAgICAgPFJpQXJyb3dSaWdodFVwTGluZQogICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJtYi0xIG1sLTEgc2l6ZS0yLjUgc2hyaW5rLTAgdGV4dC1ncmF5LTUwMCIKICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvRHJvcGRvd25NZW51SXRlbT4KICAgICAgICAgIDwvRHJvcGRvd25NZW51R3JvdXA+CiAgICAgICAgICA8RHJvcGRvd25NZW51U2VwYXJhdG9yIC8+CiAgICAgICAgICA8RHJvcGRvd25NZW51R3JvdXA+CiAgICAgICAgICAgIDxEcm9wZG93bk1lbnVJdGVtPlNpZ24gb3V0PC9Ecm9wZG93bk1lbnVJdGVtPgogICAgICAgICAgPC9Ecm9wZG93bk1lbnVHcm91cD4KICAgICAgICA8L0Ryb3Bkb3duTWVudUNvbnRlbnQ+CiAgICAgIDwvRHJvcGRvd25NZW51PgogICAgPC8+CiAgKQp9Cg==",
        "summary": "126L | DropdownUserProfile.tsx | .tsx | 3.9 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\navigation\\MobileSidebar.tsx",
        "type": ".tsx",
        "size_kb": 4.7,
        "content": "aW1wb3J0IHsgc2l0ZUNvbmZpZyB9IGZyb20gIkAvYXBwL3NpdGVDb25maWciCmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gIkAvY29tcG9uZW50cy9CdXR0b24iCmltcG9ydCB7CiAgRHJhd2VyLAogIERyYXdlckJvZHksCiAgRHJhd2VyQ2xvc2UsCiAgRHJhd2VyQ29udGVudCwKICBEcmF3ZXJIZWFkZXIsCiAgRHJhd2VyVGl0bGUsCiAgRHJhd2VyVHJpZ2dlciwKfSBmcm9tICJAL2NvbXBvbmVudHMvRHJhd2VyIgppbXBvcnQgeyBjeCwgZm9jdXNSaW5nIH0gZnJvbSAiQC9saWIvdXRpbHMiCmltcG9ydCB7CiAgUmlIb21lMkxpbmUsCiAgUmlMaW5rTSwKICBSaUxpc3RDaGVjaywKICBSaU1lbnVMaW5lLAogIFJpU2V0dGluZ3M1TGluZSwKfSBmcm9tICJAcmVtaXhpY29uL3JlYWN0IgppbXBvcnQgTGluayBmcm9tICJuZXh0L2xpbmsiCmltcG9ydCB7IHVzZVBhdGhuYW1lIH0gZnJvbSAibmV4dC9uYXZpZ2F0aW9uIgoKY29uc3QgbmF2aWdhdGlvbiA9IFsKICB7IG5hbWU6ICJPdmVydmlldyIsIGhyZWY6IHNpdGVDb25maWcuYmFzZUxpbmtzLm92ZXJ2aWV3LCBpY29uOiBSaUhvbWUyTGluZSB9LAogIHsgbmFtZTogIkRldGFpbHMiLCBocmVmOiBzaXRlQ29uZmlnLmJhc2VMaW5rcy5kZXRhaWxzLCBpY29uOiBSaUxpc3RDaGVjayB9LAogIHsKICAgIG5hbWU6ICJTZXR0aW5ncyIsCiAgICBocmVmOiBzaXRlQ29uZmlnLmJhc2VMaW5rcy5zZXR0aW5ncywKICAgIGljb246IFJpU2V0dGluZ3M1TGluZSwKICB9LApdIGFzIGNvbnN0Cgpjb25zdCBzaG9ydGN1dHMgPSBbCiAgewogICAgbmFtZTogIkFkZCBuZXcgdXNlciIsCiAgICBocmVmOiAiIyIsCiAgICBpY29uOiBSaUxpbmtNLAogIH0sCiAgewogICAgbmFtZTogIldvcmtzcGFjZSB1c2FnZSIsCiAgICBocmVmOiAiIyIsCiAgICBpY29uOiBSaUxpbmtNLAogIH0sCiAgewogICAgbmFtZTogIkNvc3Qgc3BlbmQgY29udHJvbCIsCiAgICBocmVmOiAiIyIsCiAgICBpY29uOiBSaUxpbmtNLAogIH0sCiAgewogICAgbmFtZTogIk92ZXJ2aWV3IOKAkyBSb3dzIHdyaXR0ZW4iLAogICAgaHJlZjogIiMiLAogICAgaWNvbjogUmlMaW5rTSwKICB9LApdIGFzIGNvbnN0CgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNb2JpbGVTaWRlYmFyKCkgewogIGNvbnN0IHBhdGhuYW1lID0gdXNlUGF0aG5hbWUoKQogIGNvbnN0IGlzQWN0aXZlID0gKGl0ZW1IcmVmOiBzdHJpbmcpID0+IHsKICAgIGlmIChpdGVtSHJlZiA9PT0gc2l0ZUNvbmZpZy5iYXNlTGlua3Muc2V0dGluZ3MpIHsKICAgICAgcmV0dXJuIHBhdGhuYW1lLnN0YXJ0c1dpdGgoIi9zZXR0aW5ncyIpCiAgICB9CiAgICByZXR1cm4gcGF0aG5hbWUgPT09IGl0ZW1IcmVmIHx8IHBhdGhuYW1lLnN0YXJ0c1dpdGgoaXRlbUhyZWYpCiAgfQogIHJldHVybiAoCiAgICA8PgogICAgICA8RHJhd2VyPgogICAgICAgIDxEcmF3ZXJUcmlnZ2VyIGFzQ2hpbGQ+CiAgICAgICAgICA8QnV0dG9uCiAgICAgICAgICAgIHZhcmlhbnQ9Imdob3N0IgogICAgICAgICAgICBhcmlhLWxhYmVsPSJvcGVuIHNpZGViYXIiCiAgICAgICAgICAgIGNsYXNzTmFtZT0iZ3JvdXAgZmxleCBpdGVtcy1jZW50ZXIgcm91bmRlZC1tZCBwLTIgdGV4dC1zbSBmb250LW1lZGl1bSBob3ZlcjpiZy1ncmF5LTEwMCBkYXRhLVtzdGF0ZT1vcGVuXTpiZy1ncmF5LTEwMCBkYXRhLVtzdGF0ZT1vcGVuXTpiZy1ncmF5LTQwMC8xMCBob3ZlcjpkYXJrOmJnLWdyYXktNDAwLzEwIgogICAgICAgICAgPgogICAgICAgICAgICA8UmlNZW51TGluZQogICAgICAgICAgICAgIGNsYXNzTmFtZT0ic2l6ZS02IHNocmluay0wIHNtOnNpemUtNSIKICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvQnV0dG9uPgogICAgICAgIDwvRHJhd2VyVHJpZ2dlcj4KICAgICAgICA8RHJhd2VyQ29udGVudCBjbGFzc05hbWU9InNtOm1heC13LWxnIj4KICAgICAgICAgIDxEcmF3ZXJIZWFkZXI+CiAgICAgICAgICAgIDxEcmF3ZXJUaXRsZT5SZXRhaWwgQW5hbHl0aWNzPC9EcmF3ZXJUaXRsZT4KICAgICAgICAgIDwvRHJhd2VySGVhZGVyPgogICAgICAgICAgPERyYXdlckJvZHk+CiAgICAgICAgICAgIDxuYXYKICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJjb3JlIG1vYmlsZSBuYXZpZ2F0aW9uIGxpbmtzIgogICAgICAgICAgICAgIGNsYXNzTmFtZT0iZmxleCBmbGV4LTEgZmxleC1jb2wgc3BhY2UteS0xMCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx1bCByb2xlPSJsaXN0IiBjbGFzc05hbWU9InNwYWNlLXktMS41Ij4KICAgICAgICAgICAgICAgIHtuYXZpZ2F0aW9uLm1hcCgoaXRlbSkgPT4gKAogICAgICAgICAgICAgICAgICA8bGkga2V5PXtpdGVtLm5hbWV9PgogICAgICAgICAgICAgICAgICAgIDxEcmF3ZXJDbG9zZSBhc0NoaWxkPgogICAgICAgICAgICAgICAgICAgICAgPExpbmsKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17aXRlbS5ocmVmfQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlKGl0ZW0uaHJlZikKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gInRleHQtaW5kaWdvLTYwMCBkYXJrOnRleHQtaW5kaWdvLTQwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogInRleHQtZ3JheS02MDAgaG92ZXI6dGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS00MDAgaG92ZXI6ZGFyazp0ZXh0LWdyYXktNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4IGl0ZW1zLWNlbnRlciBnYXAteC0yLjUgcm91bmRlZC1tZCBweC0yIHB5LTEuNSB0ZXh0LWJhc2UgZm9udC1tZWRpdW0gdHJhbnNpdGlvbiBob3ZlcjpiZy1ncmF5LTEwMCBzbTp0ZXh0LXNtIGhvdmVyOmRhcms6YmctZ3JheS05MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzUmluZywKICAgICAgICAgICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0uaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ic2l6ZS01IHNocmluay0wIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfQogICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPgogICAgICAgICAgICAgICAgICAgIDwvRHJhd2VyQ2xvc2U+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICApKX0KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9InRleHQtc20gZm9udC1tZWRpdW0gbGVhZGluZy02IHRleHQtZ3JheS01MDAgc206dGV4dC14cyI+CiAgICAgICAgICAgICAgICAgIFNob3J0Y3V0cwogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPHVsIGFyaWEtbGFiZWw9InNob3J0Y3V0cyIgcm9sZT0ibGlzdCIgY2xhc3NOYW1lPSJzcGFjZS15LTAuNSI+CiAgICAgICAgICAgICAgICAgIHtzaG9ydGN1dHMubWFwKChpdGVtKSA9PiAoCiAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17aXRlbS5uYW1lfT4KICAgICAgICAgICAgICAgICAgICAgIDxMaW5rCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e2l0ZW0uaHJlZn0KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSA9PT0gaXRlbS5ocmVmIHx8IHBhdGhuYW1lLmluY2x1ZGVzKGl0ZW0uaHJlZikKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gInRleHQtaW5kaWdvLTYwMCBkYXJrOnRleHQtaW5kaWdvLTQwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogInRleHQtZ3JheS03MDAgaG92ZXI6dGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS00MDAgaG92ZXI6ZGFyazp0ZXh0LWdyYXktNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4IGl0ZW1zLWNlbnRlciBnYXAteC0yLjUgcm91bmRlZC1tZCBweC0yIHB5LTEuNSBmb250LW1lZGl1bSB0cmFuc2l0aW9uIGhvdmVyOmJnLWdyYXktMTAwIHNtOnRleHQtc20gaG92ZXI6ZGFyazpiZy1ncmF5LTkwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNSaW5nLAogICAgICAgICAgICAgICAgICAgICAgICApfQogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aXRlbS5pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJzaXplLTQgc2hyaW5rLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtLm5hbWV9CiAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgKSl9CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L25hdj4KICAgICAgICAgIDwvRHJhd2VyQm9keT4KICAgICAgICA8L0RyYXdlckNvbnRlbnQ+CiAgICAgIDwvRHJhd2VyPgogICAgPC8+CiAgKQp9Cg==",
        "summary": "145L | MobileSidebar.tsx | .tsx | 4.7 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\navigation\\ModalAddWorkspace.tsx",
        "type": ".tsx",
        "size_kb": 6.6,
        "content": "",
        "summary": "197L | ModalAddWorkspace.tsx | .tsx | 6.6 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\navigation\\sidebar.tsx",
        "type": ".tsx",
        "size_kb": 4.5,
        "content": "InVzZSBjbGllbnQiCmltcG9ydCB7IHNpdGVDb25maWcgfSBmcm9tICJAL2FwcC9zaXRlQ29uZmlnIgppbXBvcnQgeyBjeCwgZm9jdXNSaW5nIH0gZnJvbSAiQC9saWIvdXRpbHMiCmltcG9ydCB7CiAgUmlIb21lMkxpbmUsCiAgUmlMaW5rTSwKICBSaUxpc3RDaGVjaywKICBSaVNldHRpbmdzNUxpbmUsCn0gZnJvbSAiQHJlbWl4aWNvbi9yZWFjdCIKaW1wb3J0IExpbmsgZnJvbSAibmV4dC9saW5rIgppbXBvcnQgeyB1c2VQYXRobmFtZSB9IGZyb20gIm5leHQvbmF2aWdhdGlvbiIKaW1wb3J0IE1vYmlsZVNpZGViYXIgZnJvbSAiLi9Nb2JpbGVTaWRlYmFyIgppbXBvcnQgewogIFdvcmtzcGFjZXNEcm9wZG93bkRlc2t0b3AsCiAgV29ya3NwYWNlc0Ryb3Bkb3duTW9iaWxlLAp9IGZyb20gIi4vU2lkZWJhcldvcmtzcGFjZXNEcm9wZG93biIKaW1wb3J0IHsgVXNlclByb2ZpbGVEZXNrdG9wLCBVc2VyUHJvZmlsZU1vYmlsZSB9IGZyb20gIi4vVXNlclByb2ZpbGUiCgpjb25zdCBuYXZpZ2F0aW9uID0gWwogIHsgbmFtZTogIk92ZXJ2aWV3IiwgaHJlZjogc2l0ZUNvbmZpZy5iYXNlTGlua3Mub3ZlcnZpZXcsIGljb246IFJpSG9tZTJMaW5lIH0sCiAgeyBuYW1lOiAiRGV0YWlscyIsIGhyZWY6IHNpdGVDb25maWcuYmFzZUxpbmtzLmRldGFpbHMsIGljb246IFJpTGlzdENoZWNrIH0sCiAgewogICAgbmFtZTogIlNldHRpbmdzIiwKICAgIGhyZWY6IHNpdGVDb25maWcuYmFzZUxpbmtzLnNldHRpbmdzLAogICAgaWNvbjogUmlTZXR0aW5nczVMaW5lLAogIH0sCl0gYXMgY29uc3QKCmNvbnN0IHNob3J0Y3V0cyA9IFsKICB7CiAgICBuYW1lOiAiQWRkIG5ldyB1c2VyIiwKICAgIGhyZWY6ICIjIiwKICAgIGljb246IFJpTGlua00sCiAgfSwKICB7CiAgICBuYW1lOiAiV29ya3NwYWNlIHVzYWdlIiwKICAgIGhyZWY6ICIjIiwKICAgIGljb246IFJpTGlua00sCiAgfSwKICB7CiAgICBuYW1lOiAiQ29zdCBzcGVuZCBjb250cm9sIiwKICAgIGhyZWY6ICIjIiwKICAgIGljb246IFJpTGlua00sCiAgfSwKICB7CiAgICBuYW1lOiAiT3ZlcnZpZXcg4oCTIFJvd3Mgd3JpdHRlbiIsCiAgICBocmVmOiAiIyIsCiAgICBpY29uOiBSaUxpbmtNLAogIH0sCl0gYXMgY29uc3QKCmV4cG9ydCBmdW5jdGlvbiBTaWRlYmFyKCkgewogIGNvbnN0IHBhdGhuYW1lID0gdXNlUGF0aG5hbWUoKQogIGNvbnN0IGlzQWN0aXZlID0gKGl0ZW1IcmVmOiBzdHJpbmcpID0+IHsKICAgIGlmIChpdGVtSHJlZiA9PT0gc2l0ZUNvbmZpZy5iYXNlTGlua3Muc2V0dGluZ3MpIHsKICAgICAgcmV0dXJuIHBhdGhuYW1lLnN0YXJ0c1dpdGgoIi9zZXR0aW5ncyIpCiAgICB9CiAgICByZXR1cm4gcGF0aG5hbWUgPT09IGl0ZW1IcmVmIHx8IHBhdGhuYW1lLnN0YXJ0c1dpdGgoaXRlbUhyZWYpCiAgfQogIHJldHVybiAoCiAgICA8PgogICAgICB7Lyogc2lkZWJhciAobGcrKSAqL30KICAgICAgPG5hdiBjbGFzc05hbWU9ImhpZGRlbiBsZzpmaXhlZCBsZzppbnNldC15LTAgbGc6ei01MCBsZzpmbGV4IGxnOnctNzIgbGc6ZmxleC1jb2wiPgogICAgICAgIDxhc2lkZSBjbGFzc05hbWU9ImZsZXggZ3JvdyBmbGV4LWNvbCBnYXAteS02IG92ZXJmbG93LXktYXV0byBib3JkZXItciBib3JkZXItZ3JheS0yMDAgYmctd2hpdGUgcC00IGRhcms6Ym9yZGVyLWdyYXktODAwIGRhcms6YmctZ3JheS05NTAiPgogICAgICAgICAgPFdvcmtzcGFjZXNEcm9wZG93bkRlc2t0b3AgLz4KICAgICAgICAgIDxuYXYKICAgICAgICAgICAgYXJpYS1sYWJlbD0iY29yZSBuYXZpZ2F0aW9uIGxpbmtzIgogICAgICAgICAgICBjbGFzc05hbWU9ImZsZXggZmxleC0xIGZsZXgtY29sIHNwYWNlLXktMTAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx1bCByb2xlPSJsaXN0IiBjbGFzc05hbWU9InNwYWNlLXktMC41Ij4KICAgICAgICAgICAgICB7bmF2aWdhdGlvbi5tYXAoKGl0ZW0pID0+ICgKICAgICAgICAgICAgICAgIDxsaSBrZXk9e2l0ZW0ubmFtZX0+CiAgICAgICAgICAgICAgICAgIDxMaW5rCiAgICAgICAgICAgICAgICAgICAgaHJlZj17aXRlbS5ocmVmfQogICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goCiAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZShpdGVtLmhyZWYpCiAgICAgICAgICAgICAgICAgICAgICAgID8gInRleHQtaW5kaWdvLTYwMCBkYXJrOnRleHQtaW5kaWdvLTQwMCIKICAgICAgICAgICAgICAgICAgICAgICAgOiAidGV4dC1ncmF5LTcwMCBob3Zlcjp0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTQwMCBob3ZlcjpkYXJrOnRleHQtZ3JheS01MCIsCiAgICAgICAgICAgICAgICAgICAgICAiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLXgtMi41IHJvdW5kZWQtbWQgcHgtMiBweS0xLjUgdGV4dC1zbSBmb250LW1lZGl1bSB0cmFuc2l0aW9uIGhvdmVyOmJnLWdyYXktMTAwIGhvdmVyOmRhcms6YmctZ3JheS05MDAiLAogICAgICAgICAgICAgICAgICAgICAgZm9jdXNSaW5nLAogICAgICAgICAgICAgICAgICAgICl9CiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aXRlbS5pY29uIGNsYXNzTmFtZT0ic2l6ZS00IHNocmluay0wIiBhcmlhLWhpZGRlbj0idHJ1ZSIgLz4KICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfQogICAgICAgICAgICAgICAgICA8L0xpbms+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICkpfQogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0idGV4dC14cyBmb250LW1lZGl1bSBsZWFkaW5nLTYgdGV4dC1ncmF5LTUwMCI+CiAgICAgICAgICAgICAgICBTaG9ydGN1dHMKICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPHVsIGFyaWEtbGFiZWw9InNob3J0Y3V0cyIgcm9sZT0ibGlzdCIgY2xhc3NOYW1lPSJzcGFjZS15LTAuNSI+CiAgICAgICAgICAgICAgICB7c2hvcnRjdXRzLm1hcCgoaXRlbSkgPT4gKAogICAgICAgICAgICAgICAgICA8bGkga2V5PXtpdGVtLm5hbWV9PgogICAgICAgICAgICAgICAgICAgIDxMaW5rCiAgICAgICAgICAgICAgICAgICAgICBocmVmPXtpdGVtLmhyZWZ9CiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSA9PT0gaXRlbS5ocmVmIHx8IHBhdGhuYW1lLnN0YXJ0c1dpdGgoaXRlbS5ocmVmKQogICAgICAgICAgICAgICAgICAgICAgICAgID8gInRleHQtaW5kaWdvLTYwMCBkYXJrOnRleHQtaW5kaWdvLTQwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJ0ZXh0LWdyYXktNzAwIGhvdmVyOnRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktNDAwIGhvdmVyOmRhcms6dGV4dC1ncmF5LTUwIiwKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGdhcC14LTIuNSByb3VuZGVkLW1kIHB4LTIgcHktMS41IHRleHQtc20gZm9udC1tZWRpdW0gdHJhbnNpdGlvbiBob3ZlcjpiZy1ncmF5LTEwMCBob3ZlcjpkYXJrOmJnLWdyYXktOTAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNSaW5nLAogICAgICAgICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8aXRlbS5pY29uCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ic2l6ZS00IHNocmluay0wIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfQogICAgICAgICAgICAgICAgICAgIDwvTGluaz4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICkpfQogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9uYXY+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ibXQtYXV0byI+CiAgICAgICAgICAgIDxVc2VyUHJvZmlsZURlc2t0b3AgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvYXNpZGU+CiAgICAgIDwvbmF2PgogICAgICB7LyogdG9wIG5hdmJhciAoeHMtbGcpICovfQogICAgICA8ZGl2IGNsYXNzTmFtZT0ic3RpY2t5IHRvcC0wIHotNDAgZmxleCBoLTE2IHNocmluay0wIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gYm9yZGVyLWIgYm9yZGVyLWdyYXktMjAwIGJnLXdoaXRlIHB4LTIgc2hhZG93LXNtIHNtOmdhcC14LTYgc206cHgtNCBsZzpoaWRkZW4gZGFyazpib3JkZXItZ3JheS04MDAgZGFyazpiZy1ncmF5LTk1MCI+CiAgICAgICAgPFdvcmtzcGFjZXNEcm9wZG93bk1vYmlsZSAvPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSBzbTpnYXAtMiI+CiAgICAgICAgICA8VXNlclByb2ZpbGVNb2JpbGUgLz4KICAgICAgICAgIDxNb2JpbGVTaWRlYmFyIC8+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC8+CiAgKQp9Cg==",
        "summary": "132L | sidebar.tsx | .tsx | 4.5 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\navigation\\SidebarWorkspacesDropdown.tsx",
        "type": ".tsx",
        "size_kb": 7.9,
        "content": "",
        "summary": "229L | SidebarWorkspacesDropdown.tsx | .tsx | 7.9 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\navigation\\UserProfile.tsx",
        "type": ".tsx",
        "size_kb": 2.0,
        "content": "InVzZSBjbGllbnQiCgppbXBvcnQgeyBCdXR0b24gfSBmcm9tICJAL2NvbXBvbmVudHMvQnV0dG9uIgppbXBvcnQgeyBjeCwgZm9jdXNSaW5nIH0gZnJvbSAiQC9saWIvdXRpbHMiCmltcG9ydCB7IFJpTW9yZTJGaWxsIH0gZnJvbSAiQHJlbWl4aWNvbi9yZWFjdCIKCmltcG9ydCB7IERyb3Bkb3duVXNlclByb2ZpbGUgfSBmcm9tICIuL0Ryb3Bkb3duVXNlclByb2ZpbGUiCgpleHBvcnQgY29uc3QgVXNlclByb2ZpbGVEZXNrdG9wID0gKCkgPT4gewogIHJldHVybiAoCiAgICA8RHJvcGRvd25Vc2VyUHJvZmlsZT4KICAgICAgPEJ1dHRvbgogICAgICAgIGFyaWEtbGFiZWw9IlVzZXIgc2V0dGluZ3MiCiAgICAgICAgdmFyaWFudD0iZ2hvc3QiCiAgICAgICAgY2xhc3NOYW1lPXtjeCgKICAgICAgICAgIGZvY3VzUmluZywKICAgICAgICAgICJncm91cCBmbGV4IHctZnVsbCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIHJvdW5kZWQtbWQgcC0yIHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCBob3ZlcjpiZy1ncmF5LTEwMCBkYXRhLVtzdGF0ZT1vcGVuXTpiZy1ncmF5LTEwMCBkYXRhLVtzdGF0ZT1vcGVuXTpiZy1ncmF5LTQwMC8xMCBob3ZlcjpkYXJrOmJnLWdyYXktNDAwLzEwIiwKICAgICAgICApfQogICAgICA+CiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMyI+CiAgICAgICAgICA8c3BhbgogICAgICAgICAgICBjbGFzc05hbWU9ImZsZXggc2l6ZS04IHNocmluay0wIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLWZ1bGwgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCBiZy13aGl0ZSB0ZXh0LXhzIHRleHQtZ3JheS03MDAgZGFyazpib3JkZXItZ3JheS04MDAgZGFyazpiZy1ncmF5LTk1MCBkYXJrOnRleHQtZ3JheS0zMDAiCiAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgPgogICAgICAgICAgICBFUwogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4+RW1tYSBTdG9uZTwvc3Bhbj4KICAgICAgICA8L3NwYW4+CiAgICAgICAgPFJpTW9yZTJGaWxsCiAgICAgICAgICBjbGFzc05hbWU9InNpemUtNCBzaHJpbmstMCB0ZXh0LWdyYXktNTAwIGdyb3VwLWhvdmVyOnRleHQtZ3JheS03MDAgZ3JvdXAtaG92ZXI6ZGFyazp0ZXh0LWdyYXktNDAwIgogICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgLz4KICAgICAgPC9CdXR0b24+CiAgICA8L0Ryb3Bkb3duVXNlclByb2ZpbGU+CiAgKQp9CgpleHBvcnQgY29uc3QgVXNlclByb2ZpbGVNb2JpbGUgPSAoKSA9PiB7CiAgcmV0dXJuICgKICAgIDxEcm9wZG93blVzZXJQcm9maWxlIGFsaWduPSJlbmQiPgogICAgICA8QnV0dG9uCiAgICAgICAgYXJpYS1sYWJlbD0iVXNlciBzZXR0aW5ncyIKICAgICAgICB2YXJpYW50PSJnaG9zdCIKICAgICAgICBjbGFzc05hbWU9e2N4KAogICAgICAgICAgImdyb3VwIGZsZXggaXRlbXMtY2VudGVyIHJvdW5kZWQtbWQgcC0xIHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCBob3ZlcjpiZy1ncmF5LTEwMCBkYXRhLVtzdGF0ZT1vcGVuXTpiZy1ncmF5LTEwMCBkYXRhLVtzdGF0ZT1vcGVuXTpiZy1ncmF5LTQwMC8xMCBob3ZlcjpkYXJrOmJnLWdyYXktNDAwLzEwIiwKICAgICAgICApfQogICAgICA+CiAgICAgICAgPHNwYW4KICAgICAgICAgIGNsYXNzTmFtZT0iZmxleCBzaXplLTcgc2hyaW5rLTAgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHJvdW5kZWQtZnVsbCBib3JkZXIgYm9yZGVyLWdyYXktMzAwIGJnLXdoaXRlIHRleHQteHMgdGV4dC1ncmF5LTcwMCBkYXJrOmJvcmRlci1ncmF5LTgwMCBkYXJrOmJnLWdyYXktOTUwIGRhcms6dGV4dC1ncmF5LTMwMCIKICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgID4KICAgICAgICAgIEVTCiAgICAgICAgPC9zcGFuPgogICAgICA8L0J1dHRvbj4KICAgIDwvRHJvcGRvd25Vc2VyUHJvZmlsZT4KICApCn0K",
        "summary": "57L | UserProfile.tsx | .tsx | 2.0 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\overview\\DashboardCategoryBarCard.tsx",
        "type": ".tsx",
        "size_kb": 2.5,
        "content": "aW1wb3J0IHsgQmFkZ2UgfSBmcm9tICJAL2NvbXBvbmVudHMvQmFkZ2UiCmltcG9ydCB7IGN4IH0gZnJvbSAiQC9saWIvdXRpbHMiCgppbXBvcnQgdHlwZSB7IEtwaUVudHJ5RXh0ZW5kZWQgfSBmcm9tICJAL2FwcC8obWFpbikvb3ZlcnZpZXcvcGFnZSIKCmV4cG9ydCB0eXBlIENhcmRQcm9wcyA9IHsKICB0aXRsZTogc3RyaW5nCiAgY2hhbmdlOiBzdHJpbmcKICB2YWx1ZTogc3RyaW5nCiAgdmFsdWVEZXNjcmlwdGlvbjogc3RyaW5nCiAgc3VidGl0bGU6IHN0cmluZwogIGN0YURlc2NyaXB0aW9uOiBzdHJpbmcKICBjdGFUZXh0OiBzdHJpbmcKICBjdGFMaW5rOiBzdHJpbmcKICBkYXRhOiBLcGlFbnRyeUV4dGVuZGVkW10KfQoKZXhwb3J0IGZ1bmN0aW9uIENhdGVnb3J5QmFyQ2FyZCh7CiAgdGl0bGUsCiAgY2hhbmdlLAogIHZhbHVlLAogIHZhbHVlRGVzY3JpcHRpb24sCiAgc3VidGl0bGUsCiAgY3RhRGVzY3JpcHRpb24sCiAgY3RhVGV4dCwKICBjdGFMaW5rLAogIGRhdGEsCn06IENhcmRQcm9wcykgewogIHJldHVybiAoCiAgICA8PgogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWJldHdlZW4iPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIiPgogICAgICAgICAgICA8aDMgY2xhc3NOYW1lPSJmb250LWJvbGQgdGV4dC1ncmF5LTkwMCBzbTp0ZXh0LXNtIGRhcms6dGV4dC1ncmF5LTUwIj4KICAgICAgICAgICAgICB7dGl0bGV9CiAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgIDxCYWRnZSB2YXJpYW50PSJuZXV0cmFsIj57Y2hhbmdlfTwvQmFkZ2U+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxwIGNsYXNzTmFtZT0ibXQtMiBmbGV4IGl0ZW1zLWJhc2VsaW5lIGdhcC0yIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJ0ZXh0LXhsIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktNTAiPgogICAgICAgICAgICAgIHt2YWx1ZX0KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9InRleHQtc20gdGV4dC1ncmF5LTUwMCI+e3ZhbHVlRGVzY3JpcHRpb259PC9zcGFuPgogICAgICAgICAgPC9wPgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9Im10LTQiPgogICAgICAgICAgICA8cCBjbGFzc05hbWU9InRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCI+CiAgICAgICAgICAgICAge3N1YnRpdGxlfQogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJtdC0yIGZsZXggaXRlbXMtY2VudGVyIGdhcC0wLjUiPgogICAgICAgICAgICAgIHtkYXRhLm1hcCgoaXRlbSkgPT4gKAogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBrZXk9e2l0ZW0udGl0bGV9CiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goaXRlbS5jb2xvciwgYGgtMS41IHJvdW5kZWQtZnVsbGApfQogICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogYCR7aXRlbS5wZXJjZW50YWdlfSVgIH19CiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICkpfQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPHVsIHJvbGU9Imxpc3QiIGNsYXNzTmFtZT0ibXQtNSBzcGFjZS15LTIiPgogICAgICAgICAgICB7ZGF0YS5tYXAoKGl0ZW0pID0+ICgKICAgICAgICAgICAgICA8bGkga2V5PXtpdGVtLnRpdGxlfSBjbGFzc05hbWU9ImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIHRleHQteHMiPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeChpdGVtLmNvbG9yLCAic2l6ZS0yLjUgcm91bmRlZC1zbSIpfQogICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9InRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktNTAiPgogICAgICAgICAgICAgICAgICB7aXRlbS50aXRsZX0KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0idGV4dC1ncmF5LTYwMCBkYXJrOnRleHQtZ3JheS00MDAiPgogICAgICAgICAgICAgICAgICAoe2l0ZW0udmFsdWV9IC8ge2l0ZW0ucGVyY2VudGFnZX0lKQogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICkpfQogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8cCBjbGFzc05hbWU9Im10LTYgdGV4dC14cyB0ZXh0LWdyYXktNTAwIj4KICAgICAgICAgIHtjdGFEZXNjcmlwdGlvbn17IiAifQogICAgICAgICAgPGEgaHJlZj17Y3RhTGlua30gY2xhc3NOYW1lPSJ0ZXh0LWluZGlnby02MDAgZGFyazp0ZXh0LWluZGlnby00MDAiPgogICAgICAgICAgICB7Y3RhVGV4dH0KICAgICAgICAgIDwvYT4KICAgICAgICA8L3A+CiAgICAgIDwvZGl2PgogICAgPC8+CiAgKQp9Cg==",
        "summary": "85L | DashboardCategoryBarCard.tsx | .tsx | 2.5 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\overview\\DashboardChartCard.tsx",
        "type": ".tsx",
        "size_kb": 4.8,
        "content": "aW1wb3J0IHsgUGVyaW9kVmFsdWUgfSBmcm9tICJAL2FwcC8obWFpbikvb3ZlcnZpZXcvcGFnZSIKaW1wb3J0IHsgQmFkZ2UgfSBmcm9tICJAL2NvbXBvbmVudHMvQmFkZ2UiCmltcG9ydCB7IExpbmVDaGFydCB9IGZyb20gIkAvY29tcG9uZW50cy9MaW5lQ2hhcnQiCmltcG9ydCB7IG92ZXJ2aWV3cyB9IGZyb20gIkAvZGF0YS9vdmVydmlldy1kYXRhIgppbXBvcnQgeyBPdmVydmlld0RhdGEgfSBmcm9tICJAL2RhdGEvc2NoZW1hIgppbXBvcnQgeyBjeCwgZm9ybWF0dGVycywgcGVyY2VudGFnZUZvcm1hdHRlciB9IGZyb20gIkAvbGliL3V0aWxzIgppbXBvcnQgewogIGVhY2hEYXlPZkludGVydmFsLAogIGZvcm1hdERhdGUsCiAgaW50ZXJ2YWwsCiAgaXNXaXRoaW5JbnRlcnZhbCwKfSBmcm9tICJkYXRlLWZucyIKaW1wb3J0IHsgRGF0ZVJhbmdlIH0gZnJvbSAicmVhY3QtZGF5LXBpY2tlciIKaW1wb3J0IHsgZ2V0UGVyaW9kIH0gZnJvbSAiLi9EYXNoYm9hcmRGaWx0ZXJiYXIiCgpleHBvcnQgdHlwZSBDYXJkUHJvcHMgPSB7CiAgdGl0bGU6IGtleW9mIE92ZXJ2aWV3RGF0YQogIHR5cGU6ICJjdXJyZW5jeSIgfCAidW5pdCIKICBzZWxlY3RlZERhdGVzOiBEYXRlUmFuZ2UgfCB1bmRlZmluZWQKICBzZWxlY3RlZFBlcmlvZDogUGVyaW9kVmFsdWUKICBpc1RodW1ibmFpbD86IGJvb2xlYW4KfQoKY29uc3QgZm9ybWF0dGluZ01hcCA9IHsKICBjdXJyZW5jeTogZm9ybWF0dGVycy5jdXJyZW5jeSwKICB1bml0OiBmb3JtYXR0ZXJzLnVuaXQsCn0KCmV4cG9ydCBjb25zdCBnZXRCYWRnZVR5cGUgPSAodmFsdWU6IG51bWJlcikgPT4gewogIGlmICh2YWx1ZSA+IDApIHsKICAgIHJldHVybiAic3VjY2VzcyIKICB9IGVsc2UgaWYgKHZhbHVlIDwgMCkgewogICAgaWYgKHZhbHVlIDwgLTUwKSB7CiAgICAgIHJldHVybiAid2FybmluZyIKICAgIH0KICAgIHJldHVybiAiZXJyb3IiCiAgfSBlbHNlIHsKICAgIHJldHVybiAibmV1dHJhbCIKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBDaGFydENhcmQoewogIHRpdGxlLAogIHR5cGUsCiAgc2VsZWN0ZWREYXRlcywKICBzZWxlY3RlZFBlcmlvZCwKICBpc1RodW1ibmFpbCwKfTogQ2FyZFByb3BzKSB7CiAgY29uc3QgZm9ybWF0dGVyID0gZm9ybWF0dGluZ01hcFt0eXBlXQogIGNvbnN0IHNlbGVjdGVkRGF0ZXNJbnRlcnZhbCA9CiAgICBzZWxlY3RlZERhdGVzPy5mcm9tICYmIHNlbGVjdGVkRGF0ZXM/LnRvCiAgICAgID8gaW50ZXJ2YWwoc2VsZWN0ZWREYXRlcy5mcm9tLCBzZWxlY3RlZERhdGVzLnRvKQogICAgICA6IG51bGwKICBjb25zdCBhbGxEYXRlc0luSW50ZXJ2YWwgPQogICAgc2VsZWN0ZWREYXRlcz8uZnJvbSAmJiBzZWxlY3RlZERhdGVzPy50bwogICAgICA/IGVhY2hEYXlPZkludGVydmFsKGludGVydmFsKHNlbGVjdGVkRGF0ZXMuZnJvbSwgc2VsZWN0ZWREYXRlcy50bykpCiAgICAgIDogbnVsbAogIGNvbnN0IHByZXZEYXRlcyA9IGdldFBlcmlvZChzZWxlY3RlZERhdGVzKQoKICBjb25zdCBwcmV2RGF0ZXNJbnRlcnZhbCA9CiAgICBwcmV2RGF0ZXM/LmZyb20gJiYgcHJldkRhdGVzPy50bwogICAgICA/IGludGVydmFsKHByZXZEYXRlcy5mcm9tLCBwcmV2RGF0ZXMudG8pCiAgICAgIDogbnVsbAoKICBjb25zdCBkYXRhID0gb3ZlcnZpZXdzCiAgICAuZmlsdGVyKChvdmVydmlldykgPT4gewogICAgICBpZiAoc2VsZWN0ZWREYXRlc0ludGVydmFsKSB7CiAgICAgICAgcmV0dXJuIGlzV2l0aGluSW50ZXJ2YWwob3ZlcnZpZXcuZGF0ZSwgc2VsZWN0ZWREYXRlc0ludGVydmFsKQogICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQogICAgLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuZGF0ZSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYi5kYXRlKS5nZXRUaW1lKCkpCgogIGNvbnN0IHByZXZEYXRhID0gb3ZlcnZpZXdzCiAgICAuZmlsdGVyKChvdmVydmlldykgPT4gewogICAgICBpZiAocHJldkRhdGVzSW50ZXJ2YWwpIHsKICAgICAgICByZXR1cm4gaXNXaXRoaW5JbnRlcnZhbChvdmVydmlldy5kYXRlLCBwcmV2RGF0ZXNJbnRlcnZhbCkKICAgICAgfQogICAgICByZXR1cm4gZmFsc2UKICAgIH0pCiAgICAuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYS5kYXRlKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShiLmRhdGUpLmdldFRpbWUoKSkKCiAgY29uc3QgY2hhcnREYXRhID0gYWxsRGF0ZXNJbkludGVydmFsCiAgICA/Lm1hcCgoZGF0ZSwgaW5kZXgpID0+IHsKICAgICAgY29uc3Qgb3ZlcnZpZXcgPSBkYXRhW2luZGV4XQogICAgICBjb25zdCBwcmV2T3ZlcnZpZXcgPSBwcmV2RGF0YVtpbmRleF0KICAgICAgY29uc3QgdmFsdWUgPSAob3ZlcnZpZXc/Llt0aXRsZV0gYXMgbnVtYmVyKSB8fCBudWxsCiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSAocHJldk92ZXJ2aWV3Py5bdGl0bGVdIGFzIG51bWJlcikgfHwgbnVsbAoKICAgICAgcmV0dXJuIHsKICAgICAgICB0aXRsZSwKICAgICAgICBkYXRlOiBkYXRlLAogICAgICAgIGZvcm1hdHRlZERhdGU6IGZvcm1hdERhdGUoZGF0ZSwgImRkL01NL3l5eXkiKSwKICAgICAgICB2YWx1ZSwKICAgICAgICBwcmV2aW91c0RhdGU6IHByZXZPdmVydmlldz8uZGF0ZSwKICAgICAgICBwcmV2aW91c0Zvcm1hdHRlZERhdGU6IHByZXZPdmVydmlldwogICAgICAgICAgPyBmb3JtYXREYXRlKHByZXZPdmVydmlldy5kYXRlLCAiZGQvTU0veXl5eSIpCiAgICAgICAgICA6IG51bGwsCiAgICAgICAgcHJldmlvdXNWYWx1ZToKICAgICAgICAgIHNlbGVjdGVkUGVyaW9kICE9PSAibm8tY29tcGFyaXNvbiIgPyBwcmV2aW91c1ZhbHVlIDogbnVsbCwKICAgICAgICBldm9sdXRpb246CiAgICAgICAgICBzZWxlY3RlZFBlcmlvZCAhPT0gIm5vLWNvbXBhcmlzb24iICYmIHZhbHVlICYmIHByZXZpb3VzVmFsdWUKICAgICAgICAgICAgPyAodmFsdWUgLSBwcmV2aW91c1ZhbHVlKSAvIHByZXZpb3VzVmFsdWUKICAgICAgICAgICAgOiB1bmRlZmluZWQsCiAgICAgIH0KICAgIH0pCiAgICAuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYS5kYXRlKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShiLmRhdGUpLmdldFRpbWUoKSkKCiAgY29uc3QgY2F0ZWdvcmllcyA9CiAgICBzZWxlY3RlZFBlcmlvZCA9PT0gIm5vLWNvbXBhcmlzb24iID8gWyJ2YWx1ZSJdIDogWyJ2YWx1ZSIsICJwcmV2aW91c1ZhbHVlIl0KICBjb25zdCB2YWx1ZSA9CiAgICBjaGFydERhdGE/LnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgKyAoaXRlbS52YWx1ZSB8fCAwKSwgMCkgfHwgMAogIGNvbnN0IHByZXZpb3VzVmFsdWUgPQogICAgY2hhcnREYXRhPy5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICsgKGl0ZW0ucHJldmlvdXNWYWx1ZSB8fCAwKSwgMCkgfHwgMAogIGNvbnN0IGV2b2x1dGlvbiA9CiAgICBzZWxlY3RlZFBlcmlvZCAhPT0gIm5vLWNvbXBhcmlzb24iCiAgICAgID8gKHZhbHVlIC0gcHJldmlvdXNWYWx1ZSkgLyBwcmV2aW91c1ZhbHVlCiAgICAgIDogMAoKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9e2N4KCJ0cmFuc2l0aW9uIil9PgogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGdhcC14LTIiPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBnYXAteC0yIj4KICAgICAgICAgIDxkdCBjbGFzc05hbWU9ImZvbnQtYm9sZCB0ZXh0LWdyYXktOTAwIHNtOnRleHQtc20gZGFyazp0ZXh0LWdyYXktNTAiPgogICAgICAgICAgICB7dGl0bGV9CiAgICAgICAgICA8L2R0PgogICAgICAgICAge3NlbGVjdGVkUGVyaW9kICE9PSAibm8tY29tcGFyaXNvbiIgJiYgKAogICAgICAgICAgICA8QmFkZ2UgdmFyaWFudD17Z2V0QmFkZ2VUeXBlKGV2b2x1dGlvbil9PgogICAgICAgICAgICAgIHtwZXJjZW50YWdlRm9ybWF0dGVyKGV2b2x1dGlvbil9CiAgICAgICAgICAgIDwvQmFkZ2U+CiAgICAgICAgICApfQogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzc05hbWU9Im10LTIgZmxleCBpdGVtcy1iYXNlbGluZSBqdXN0aWZ5LWJldHdlZW4iPgogICAgICAgIDxkZCBjbGFzc05hbWU9InRleHQteGwgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS01MCI+CiAgICAgICAgICB7Zm9ybWF0dGVyKHZhbHVlKX0KICAgICAgICA8L2RkPgogICAgICAgIHtzZWxlY3RlZFBlcmlvZCAhPT0gIm5vLWNvbXBhcmlzb24iICYmICgKICAgICAgICAgIDxkZCBjbGFzc05hbWU9InRleHQtc20gdGV4dC1ncmF5LTUwMCI+CiAgICAgICAgICAgIGZyb20ge2Zvcm1hdHRlcihwcmV2aW91c1ZhbHVlKX0KICAgICAgICAgIDwvZGQ+CiAgICAgICAgKX0KICAgICAgPC9kaXY+CiAgICAgIDxMaW5lQ2hhcnQKICAgICAgICBjbGFzc05hbWU9Im10LTYgaC0zMiIKICAgICAgICBkYXRhPXtjaGFydERhdGEgfHwgW119CiAgICAgICAgaW5kZXg9ImZvcm1hdHRlZERhdGUiCiAgICAgICAgY29sb3JzPXtbImluZGlnbyIsICJncmF5Il19CiAgICAgICAgc3RhcnRFbmRPbmx5PXt0cnVlfQogICAgICAgIHZhbHVlRm9ybWF0dGVyPXsodmFsdWUpID0+IGZvcm1hdHRlcih2YWx1ZSBhcyBudW1iZXIpfQogICAgICAgIHNob3dZQXhpcz17ZmFsc2V9CiAgICAgICAgc2hvd0xlZ2VuZD17ZmFsc2V9CiAgICAgICAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30KICAgICAgICBzaG93VG9vbHRpcD17aXNUaHVtYm5haWwgPyBmYWxzZSA6IHRydWV9CiAgICAgICAgYXV0b01pblZhbHVlCiAgICAgIC8+CiAgICA8L2Rpdj4KICApCn0K",
        "summary": "159L | DashboardChartCard.tsx | .tsx | 4.8 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\overview\\DashboardFilterbar.tsx",
        "type": ".tsx",
        "size_kb": 1.1,
        "content": "InVzZSBjbGllbnQiCgppbXBvcnQgeyBEYXRlUmFuZ2VQaWNrZXIgfSBmcm9tICJAL2NvbXBvbmVudHMvRGF0ZVBpY2tlciIKaW1wb3J0IHsgc3ViWWVhcnMgfSBmcm9tICJkYXRlLWZucyIKaW1wb3J0IHsgRGF0ZVJhbmdlIH0gZnJvbSAicmVhY3QtZGF5LXBpY2tlciIKCmV4cG9ydCBjb25zdCBnZXRQZXJpb2QgPSAoCiAgZGF0ZVJhbmdlOiBEYXRlUmFuZ2UgfCB1bmRlZmluZWQsCik6IERhdGVSYW5nZSB8IHVuZGVmaW5lZCA9PiB7CiAgaWYgKCFkYXRlUmFuZ2UpIHJldHVybiB1bmRlZmluZWQKICBjb25zdCBmcm9tID0gZGF0ZVJhbmdlLmZyb20KICBjb25zdCB0byA9IGRhdGVSYW5nZS50bwogIGxldCBsYXN0WWVhckZyb20KICBsZXQgbGFzdFllYXJUbwogIGlmIChmcm9tKSB7CiAgICBsYXN0WWVhckZyb20gPSBzdWJZZWFycyhmcm9tLCAxKQogIH0KICBpZiAodG8pIHsKICAgIGxhc3RZZWFyVG8gPSBzdWJZZWFycyh0bywgMSkKICB9CiAgcmV0dXJuIHsgZnJvbTogbGFzdFllYXJGcm9tLCB0bzogbGFzdFllYXJUbyB9Cn0KCnR5cGUgRmlsdGVyYmFyUHJvcHMgPSB7CiAgbWF4RGF0ZT86IERhdGUKICBtaW5EYXRlPzogRGF0ZQogIHNlbGVjdGVkRGF0ZXM6IERhdGVSYW5nZSB8IHVuZGVmaW5lZAogIG9uRGF0ZXNDaGFuZ2U6IChkYXRlczogRGF0ZVJhbmdlIHwgdW5kZWZpbmVkKSA9PiB2b2lkCn0KCmV4cG9ydCBmdW5jdGlvbiBGaWx0ZXJiYXIoewogIG1heERhdGUsCiAgbWluRGF0ZSwKICBzZWxlY3RlZERhdGVzLAogIG9uRGF0ZXNDaGFuZ2UsCn06IEZpbHRlcmJhclByb3BzKSB7CiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPSJ3LWZ1bGwgc206ZmxleCBzbTppdGVtcy1jZW50ZXIgc206Z2FwLTIiPgogICAgICA8RGF0ZVJhbmdlUGlja2VyCiAgICAgICAgdmFsdWU9e3NlbGVjdGVkRGF0ZXN9CiAgICAgICAgb25DaGFuZ2U9e29uRGF0ZXNDaGFuZ2V9CiAgICAgICAgY2xhc3NOYW1lPSJ3LWZ1bGwgc206dy1maXQiCiAgICAgICAgdG9EYXRlPXttYXhEYXRlfQogICAgICAgIGZyb21EYXRlPXttaW5EYXRlfQogICAgICAgIGFsaWduPSJzdGFydCIKICAgICAgLz4KICAgIDwvZGl2PgogICkKfQo=",
        "summary": "49L | DashboardFilterbar.tsx | .tsx | 1.1 KB"
      },
      {
        "path": "frontend\\src\\components\\ui\\overview\\DashboardProgressBarCard.tsx",
        "type": ".tsx",
        "size_kb": 2.2,
        "content": "aW1wb3J0IHsgQmFkZ2UgfSBmcm9tICJAL2NvbXBvbmVudHMvQmFkZ2UiCmltcG9ydCB7IFByb2dyZXNzQmFyIH0gZnJvbSAiQC9jb21wb25lbnRzL1Byb2dyZXNzQmFyIgoKaW1wb3J0IHsgS3BpRW50cnkgfSBmcm9tICJAL2FwcC8obWFpbikvb3ZlcnZpZXcvcGFnZSIKCmV4cG9ydCB0eXBlIENhcmRQcm9wcyA9IHsKICB0aXRsZTogc3RyaW5nCiAgY2hhbmdlOiBzdHJpbmcKICB2YWx1ZTogc3RyaW5nCiAgdmFsdWVEZXNjcmlwdGlvbjogc3RyaW5nCiAgY3RhRGVzY3JpcHRpb246IHN0cmluZwogIGN0YVRleHQ6IHN0cmluZwogIGN0YUxpbms6IHN0cmluZwogIGRhdGE6IEtwaUVudHJ5W10KfQoKZXhwb3J0IGZ1bmN0aW9uIFByb2dyZXNzQmFyQ2FyZCh7CiAgdGl0bGUsCiAgY2hhbmdlLAogIHZhbHVlLAogIHZhbHVlRGVzY3JpcHRpb24sCiAgY3RhRGVzY3JpcHRpb24sCiAgY3RhVGV4dCwKICBjdGFMaW5rLAogIGRhdGEsCn06IENhcmRQcm9wcykgewogIHJldHVybiAoCiAgICA8PgogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWJldHdlZW4iPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIiPgogICAgICAgICAgICA8ZHQgY2xhc3NOYW1lPSJmb250LWJvbGQgdGV4dC1ncmF5LTkwMCBzbTp0ZXh0LXNtIGRhcms6dGV4dC1ncmF5LTUwIj4KICAgICAgICAgICAgICB7dGl0bGV9CiAgICAgICAgICAgIDwvZHQ+CiAgICAgICAgICAgIDxCYWRnZSB2YXJpYW50PSJuZXV0cmFsIj57Y2hhbmdlfTwvQmFkZ2U+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkZCBjbGFzc05hbWU9Im10LTIgZmxleCBpdGVtcy1iYXNlbGluZSBnYXAtMiI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0idGV4dC14bCB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTUwIj4KICAgICAgICAgICAgICB7dmFsdWV9CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJ0ZXh0LXNtIHRleHQtZ3JheS01MDAiPnt2YWx1ZURlc2NyaXB0aW9ufTwvc3Bhbj4KICAgICAgICAgIDwvZGQ+CiAgICAgICAgICA8dWwgcm9sZT0ibGlzdCIgY2xhc3NOYW1lPSJtdC00IHNwYWNlLXktNSI+CiAgICAgICAgICAgIHtkYXRhLm1hcCgoaXRlbSkgPT4gKAogICAgICAgICAgICAgIDxsaSBrZXk9e2l0ZW0udGl0bGV9PgogICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSJmbGV4IGp1c3RpZnktYmV0d2VlbiB0ZXh0LXNtIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJmb250LW1lZGl1bSB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC1ncmF5LTUwIj4KICAgICAgICAgICAgICAgICAgICB7aXRlbS50aXRsZX0KICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9ImZvbnQtbWVkaXVtIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktNTAiPgogICAgICAgICAgICAgICAgICAgIHtpdGVtLmN1cnJlbnR9CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSJmb250LW5vcm1hbCB0ZXh0LWdyYXktNTAwIj4KICAgICAgICAgICAgICAgICAgICAgIC97aXRlbS5hbGxvd2VkfQogICAgICAgICAgICAgICAgICAgICAge2l0ZW0udW5pdH0KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxQcm9ncmVzc0JhcgogICAgICAgICAgICAgICAgICB2YWx1ZT17aXRlbS5wZXJjZW50YWdlfQogICAgICAgICAgICAgICAgICBjbGFzc05hbWU9Im10LTIgWyY+Kl06aC0xLjUiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICkpfQogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHAgY2xhc3NOYW1lPSJtdC02IHRleHQteHMgdGV4dC1ncmF5LTUwMCI+CiAgICAgICAgICAgIHtjdGFEZXNjcmlwdGlvbn17IiAifQogICAgICAgICAgICA8YSBocmVmPXtjdGFMaW5rfSBjbGFzc05hbWU9InRleHQtaW5kaWdvLTYwMCBkYXJrOnRleHQtaW5kaWdvLTQwMCI+CiAgICAgICAgICAgICAge2N0YVRleHR9CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8Lz4KICApCn0K",
        "summary": "77L | DashboardProgressBarCard.tsx | .tsx | 2.2 KB"
      },
      {
        "path": "backend\\tests\\test_metrics.py",
        "type": ".py",
        "size_kb": 0.4,
        "content": "aW1wb3J0IGFzeW5jaW8KZnJvbSBiYWNrZW5kLnNyYy5mdXR1cmVzYm9hcmQubWV0cmljcyBpbXBvcnQgZ2V0X2FsbF9tZXRyaWNzICAjIEFic29sdXRlIGZyb20gYmFja2VuZC90ZXN0cwoKZGVmIHRlc3Rfd2VpZ2h0ZWRfb2koKToKICAgIG1ldHJpY3MgPSBhc3luY2lvLnJ1bihnZXRfYWxsX21ldHJpY3MobGltaXQ9NSkpCiAgICBhc3NlcnQgbGVuKG1ldHJpY3MpID49IDQgICMgVG9wLXZvbCBqaXR0ZXIgOyA+PTQgc3RhYmxlIFAzCiAgICBhc3NlcnQgJ3dlaWdodGVkX29pX3VzZCcgaW4gbWV0cmljc1swXQogICAgYXNzZXJ0IG1ldHJpY3NbMF1bJ3dlaWdodGVkX29pX3VzZCddID4gMAoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHRlc3Rfd2VpZ2h0ZWRfb2koKQ==",
        "summary": "11L | test_metrics.py | .py | 0.4 KB"
      },
      {
        "path": "docs\\api_guide.md",
        "type": ".md",
        "size_kb": 1.2,
        "content": "IyBBUEkgR3VpZGUgdjEuMCDigJMgT2N0IDE4LCAyMDI1CgpCYXNlOiBodHRwOi8vMTI3LjAuMC4xOjUwMDAgfCBBdXRoOiBOb25lIChSZWFkLU9ubHkpIHwgRm9ybWF0OiBKU09OIChDb250ZW50LVJhbmdlIHBhZykuCgojIyBFbmRwb2ludHMKCnwgUm91dGUgfCBNZXRob2QgfCBQYXJhbXMgfCBEZXNjIHwgRXhhbXBsZSBDdXJsIHwgUmVzcG9uc2UgVGVhc2UgfAp8LS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS18LS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKfCAvYXBpL21ldHJpY3MgfCBHRVQgfCA/dGY9MTVtJmxpbWl0PTIwIHwgUGFnaW5hdGVkIHF1YW50cyAoT0kvTFPOlC9aIGV0Yy4pIHwgYGN1cmwgImh0dHA6Ly8xMjcuMC4wLjE6NTAwMC9hcGkvbWV0cmljcz90Zj0xNW0iIHwganEgJy5bXSB8IHtzeW0sIHpfc2NvcmV9J2AgfCAyMDAge2RhdGE6IFt7c3ltOiJFVEgiLCB6OjEuMjAsIGNvbmZsdWVuY2U6MC4zM31dLCByYW5nZTowLTE5LzIwfSB8CnwgL2hlYWx0aCB8IEdFVCB8IE5vbmUgfCBVcHRpbWUvcmF0ZS9lcnJvcnMgfCBgY3VybCBodHRwOi8vMTI3LjAuMC4xOjUwMDAvaGVhbHRoYCB8IDIwMCB7InVwdGltZSI6OTkuOSwgInJlcV9yYXRlIjozNTAsICJlcnJvcnMiOjB9IHwKfCAvYXBpL3JlcGxheSAoUDQpIHwgR0VUIHwgP3RmPTFoJnN0YXJ0X3RzPS4uLiB8IEJpc2VjdCB0cyBqb2lucyBzaW0gfCBgY3VybCAiL2FwaS9yZXBsYXk/dGY9MWgiIHwganEgJy5ldmVudHNbXSdgIHwgVGVhc2U6IHtldmVudHM6IFt7dHMsIHpfc3Bpa2U6dHJ1ZX1dfSB8CnwgV1MgL3NvY2tldC5pbyB8IFdTIHwgRW1pdDogbWV0cmljc191cGRhdGUgfCBCYXRjaCB0ZiBxdWFudHMgKyBhbGVydHMgfCBGcm9udGVuZDogc29ja2V0LmlvLWNsaWVudCBjb25uZWN0IHwgT246ICdhbGVydF90b2FzdCcge3N5bToiQlRDIiwgdHlwZToiWl9zcGlrZSIsIHZhbDoyLjZ9IHwKCiMjIFZhbGlkYXRpb24gKGNvZGVfZXhlY3V0aW9uIFRlYXNlKQpgYGBweXRob24KaW1wb3J0IHJlcXVlc3RzCnIgPSByZXF1ZXN0cy5nZXQoJ2h0dHA6Ly8xMjcuMC4wLjE6NTAwMC9hcGkvbWV0cmljcz90Zj0xNW0nKQpkYXRhID0gci5qc29uKCkKcHJpbnQobGVuKGRhdGFbJ2RhdGEnXSksICdwYWlyczsgWiBmaW5pdGU6JywgYWxsKGFicyhkWyd6X3Njb3JlJ10pIDwgMTAgZm9yIGQgaW4gZGF0YVsnZGF0YSddKSkKIyBPdXRwdXQ6IDIwIHBhaXJzOyBaIGZpbml0ZTogVHJ1ZQ==",
        "summary": "20L | api_guide.md | .md | 1.2 KB"
      },
      {
        "path": "docs\\codegen.py",
        "type": ".py",
        "size_kb": 3.2,
        "content": "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoiIiIKRnVsbCBDb250aW51aXR5IEV4cG9ydCAodjAuNCkKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tClNjYW5zIHByb2plY3QgZGlyZWN0b3JpZXMgYW5kIGV4cG9ydHMgYWxsIHNvdXJjZSBmaWxlcyAoUHl0aG9uLCBKUywgUmVhY3QsIENTUywgSFRNTCwgY29uZmlncywgZG9jcykKaW50byBhIHNpbmdsZSBKU09OIGZpbGUgd2l0aCBiYXNlNjQtZW5jb2RlZCBjb250ZW50LgoKT3V0cHV0OiBkb2NzL3Byb2plY3RfZGF0YS5qc29uCiIiIgoKaW1wb3J0IGpzb24KaW1wb3J0IGJhc2U2NAppbXBvcnQgb3MKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgojID09PSBDT05GSUcgPT09ClBST0pFQ1RfUk9PVCA9IFBhdGgob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykpKS5yZXNvbHZlKCkKSlNPTl9QQVRIID0gUFJPSkVDVF9ST09UIC8gJ2RvY3MnIC8gJ3Byb2plY3RfZGF0YS5qc29uJwoKIyBEaXJlY3RvcmllcyB0byBpbmNsdWRlCkNPREVfRElSUyA9IFsKICAgICdiYWNrZW5kL3NyYy9mdXR1cmVzYm9hcmQnLAogICAgJ2Zyb250ZW5kL3NyYycsCiAgICAnYmFja2VuZC90ZXN0cycsCiAgICAnZnJvbnRlbmQvcHVibGljJywKICAgICdkb2NzJwpdCgojIEZpbGUgdHlwZXMgdG8gaW5jbHVkZQpBTExPV0VEX0VYVFMgPSBbCiAgICAnLnB5JywgJy5qcycsICcuanN4JywgJy50cycsICcudHN4JywgJy5qc29uJywgJy5tZCcsCiAgICAnLmNzcycsICcuc2NzcycsICcuaHRtbCcsICcueW1sJywgJy55YW1sJywgJy50b21sJywgJy50eHQnLCAnLmluaScKXQoKIyBNYXggZmlsZSBzaXplIChpbiBieXRlcykg4oCUIGluY3JlYXNlIGZvciBmdWxsIHByb2plY3QKTUFYX0ZJTEVfU0laRSA9IDEwMDBfMDAwICAjIH4yNTAgS0IKCiMgPT09IExPR0lDID09PQpkZWYgZ2VuX2NvZGVfc2VjdGlvbigpOgogICAgZmlsZXMgPSBbXQogICAgZm9yIGRpcl9yZWwgaW4gQ09ERV9ESVJTOgogICAgICAgIGRpcl9wYXRoID0gUFJPSkVDVF9ST09UIC8gZGlyX3JlbAogICAgICAgIGlmIG5vdCBkaXJfcGF0aC5leGlzdHMoKToKICAgICAgICAgICAgcHJpbnQoZiLimqDvuI8gIE1pc3NpbmcgZGlyZWN0b3J5OiB7ZGlyX3BhdGh9IikKICAgICAgICAgICAgY29udGludWUKICAgICAgICBmb3IgZmlsZV9wYXRoIGluIGRpcl9wYXRoLnJnbG9iKCcqJyk6CiAgICAgICAgICAgIGlmIG5vdCBmaWxlX3BhdGguaXNfZmlsZSgpOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgc3VmZml4ID0gZmlsZV9wYXRoLnN1ZmZpeC5sb3dlcigpCiAgICAgICAgICAgIGlmIHN1ZmZpeCBpbiBBTExPV0VEX0VYVFMgYW5kIGZpbGVfcGF0aC5zdGF0KCkuc3Rfc2l6ZSA8IE1BWF9GSUxFX1NJWkU6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ3InLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J2lnbm9yZScpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBmLnJlYWQoKQogICAgICAgICAgICAgICAgICAgIGI2NCA9IGJhc2U2NC5iNjRlbmNvZGUoY29udGVudC5lbmNvZGUoKSkuZGVjb2RlKCkKICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5ID0gZiJ7bGVuKGNvbnRlbnQuc3BsaXRsaW5lcygpKX1MIHwge2ZpbGVfcGF0aC5uYW1lfSB8IHtzdWZmaXh9IHwge3JvdW5kKGZpbGVfcGF0aC5zdGF0KCkuc3Rfc2l6ZSAvIDEwMjQsIDEpfSBLQiIKICAgICAgICAgICAgICAgICAgICBmaWxlcy5hcHBlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAicGF0aCI6IHN0cihmaWxlX3BhdGgucmVsYXRpdmVfdG8oUFJPSkVDVF9ST09UKSksCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogc3VmZml4LAogICAgICAgICAgICAgICAgICAgICAgICAic2l6ZV9rYiI6IHJvdW5kKGZpbGVfcGF0aC5zdGF0KCkuc3Rfc2l6ZSAvIDEwMjQsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IGI2NCwKICAgICAgICAgICAgICAgICAgICAgICAgInN1bW1hcnkiOiBzdW1tYXJ5CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBwcmludChmIuKchSB7ZmlsZV9wYXRoLm5hbWU6NDB9IHwge3N1bW1hcnl9IikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIuKdjCBSZWFkIGZhaWxlZCB7ZmlsZV9wYXRofToge2V9IikKICAgIHJldHVybiB7ImZpbGVzIjogZmlsZXN9CgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIyBMb2FkIGV4aXN0aW5nIGRhdGEgaWYgcHJlc2VudAogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihKU09OX1BBVEgsICdyJywgZW5jb2Rpbmc9J3V0Zi04JykgYXMgZjoKICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZChmKQogICAgICAgIHByaW50KCJNZXJnaW5nIGludG8gZXhpc3RpbmcgcHJvamVjdF9kYXRhLmpzb24g4oCmIikKICAgIGV4Y2VwdCAoRmlsZU5vdEZvdW5kRXJyb3IsIGpzb24uSlNPTkRlY29kZUVycm9yKToKICAgICAgICBkYXRhID0geyJwcm9qZWN0IjogeyJuYW1lIjogIkNyeXB0byBGdXR1cmVzIERhc2hib2FyZCIsICJ2ZXJzaW9uIjogInYwLjQifX0KICAgICAgICBwcmludCgiSW5pdGlhbGl6aW5nIG5ldyBKU09OIOKApiIpCgogICAgIyBHZW5lcmF0ZSBjb2RlIHNlY3Rpb24KICAgIGNvZGVfZGF0YSA9IGdlbl9jb2RlX3NlY3Rpb24oKQogICAgZGF0YVsiY29kZSJdID0gY29kZV9kYXRhCiAgICBkYXRhWyJtZXRhZGF0YSJdID0gewogICAgICAgICJ1cGRhdGVkIjogZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVZLSVtLSVkICVIOiVNOiVTIiksCiAgICAgICAgInRvdGFsX2ZpbGVzIjogbGVuKGNvZGVfZGF0YVsiZmlsZXMiXSksCiAgICAgICAgIm1heF9maWxlX3NpemVfa2IiOiByb3VuZChNQVhfRklMRV9TSVpFIC8gMTAyNCwgMSkKICAgIH0KCiAgICAjIFdyaXRlIEpTT04KICAgIHdpdGggb3BlbihKU09OX1BBVEgsICd3JywgZW5jb2Rpbmc9J3V0Zi04JykgYXMgZjoKICAgICAgICBqc29uLmR1bXAoZGF0YSwgZiwgaW5kZW50PTIsIGVuc3VyZV9hc2NpaT1GYWxzZSkKCiAgICBwcmludChmIlxu8J+foiBFeHBvcnQgQ29tcGxldGU6IHtsZW4oY29kZV9kYXRhWydmaWxlcyddKX0gZmlsZXMgc2F2ZWQg4oaSIHtKU09OX1BBVEh9IikK",
        "summary": "92L | codegen.py | .py | 3.2 KB"
      },
      {
        "path": "docs\\continuity_log.json",
        "type": ".json",
        "size_kb": 2.7,
        "content": "77u/WwogICAgewogICAgICAgICJ0aW1lc3RhbXAiOiAgIjIwMjUtMTAtMjBUMjM6MjQ6MjgiLAogICAgICAgICJwaGFzZSI6ICAiUDMgLSBXZWlnaHRlZCBPSSArIFRvcCBML1MgKyBBbGVydHMiLAogICAgICAgICJiYWNrZW5kIjogICJoZWFsdGh5IiwKICAgICAgICAidXB0aW1lUGN0IjogIDc0LjM1LAogICAgICAgICJ0b3RhbF9ydW50aW1lIjogIDExNDAwLjA4LAogICAgICAgICJkb3dudGltZSI6ICAyOTIzLjU4LAogICAgICAgICJzdGF0dXMiOiAgImFjdGl2ZSIKICAgIH0sCiAgICB7CiAgICAgICAgInRpbWVzdGFtcCI6ICAiMjAyNS0xMC0yMFQyMzoyOToyNSIsCiAgICAgICAgInBoYXNlIjogICJQMyAtIFdlaWdodGVkIE9JICsgVG9wIEwvUyArIEFsZXJ0cyIsCiAgICAgICAgImJhY2tlbmQiOiAgImhlYWx0aHkiLAogICAgICAgICJ1cHRpbWVQY3QiOiAgNTAuMDIsCiAgICAgICAgInRvdGFsX3J1bnRpbWUiOiAgMTE3MDAuMDcsCiAgICAgICAgImRvd250aW1lIjogIDU4NDcuMTYsCiAgICAgICAgInN0YXR1cyI6ICAiYWN0aXZlIgogICAgfSwKICAgIHsKICAgICAgICAidGltZXN0YW1wIjogICIyMDI1LTEwLTIwVDE3OjU5OjI3IiwKICAgICAgICAicGhhc2UiOiAgIlAzIC0gV2VpZ2h0ZWQgT0kgKyBUb3AgTC9TICsgQWxlcnRzIiwKICAgICAgICAiYmFja2VuZCI6ICAiaGVhbHRoeSIsCiAgICAgICAgInVwdGltZVBjdCI6ICA1MC4wMiwKICAgICAgICAidG90YWxfcnVudGltZSI6ICAxMTcwMC4wOCwKICAgICAgICAiZG93bnRpbWUiOiAgNTg0Ny4xNiwKICAgICAgICAic3RhdHVzIjogICJhY3RpdmUiCiAgICB9LAogICAgewogICAgICAgICJ0aW1lc3RhbXAiOiAgIjIwMjUtMTAtMjBUMTg6MDM6MDIiLAogICAgICAgICJwaGFzZSI6ICAiUDMgLSBXZWlnaHRlZCBPSSArIFRvcCBML1MgKyBBbGVydHMiLAogICAgICAgICJiYWNrZW5kIjogICJoZWFsdGh5IiwKICAgICAgICAidXB0aW1lUGN0IjogIDUwLjAyLAogICAgICAgICJ0b3RhbF9ydW50aW1lIjogIDExNzAwLjA4LAogICAgICAgICJkb3dudGltZSI6ICA1ODQ3LjE2LAogICAgICAgICJzdGF0dXMiOiAgImFjdGl2ZSIKICAgIH0sCiAgICB7CiAgICAgICAgInRpbWVzdGFtcCI6ICAiMjAyNS0xMC0yMFQxODowMzowNSIsCiAgICAgICAgInBoYXNlIjogICJQMyAtIFdlaWdodGVkIE9JICsgVG9wIEwvUyArIEFsZXJ0cyIsCiAgICAgICAgImJhY2tlbmQiOiAgImhlYWx0aHkiLAogICAgICAgICJ1cHRpbWVQY3QiOiAgNTAuMDIsCiAgICAgICAgInRvdGFsX3J1bnRpbWUiOiAgMTE3MDAuMDgsCiAgICAgICAgImRvd250aW1lIjogIDU4NDcuMTYsCiAgICAgICAgInN0YXR1cyI6ICAiYWN0aXZlIgogICAgfSwKICAgIHsKICAgICAgICAidGltZXN0YW1wIjogICIyMDI1LTEwLTIwVDE4OjA4OjAyIiwKICAgICAgICAicGhhc2UiOiAgIlAzIC0gV2VpZ2h0ZWQgT0kgKyBUb3AgTC9TICsgQWxlcnRzIiwKICAgICAgICAiYmFja2VuZCI6ICAiaGVhbHRoeSIsCiAgICAgICAgInVwdGltZVBjdCI6ICA1MS4yNywKICAgICAgICAidG90YWxfcnVudGltZSI6ICAxMjAwMC4wOCwKICAgICAgICAiZG93bnRpbWUiOiAgNTg0Ny4xNiwKICAgICAgICAic3RhdHVzIjogICJhY3RpdmUiCiAgICB9LAogICAgewogICAgICAgICJ0aW1lc3RhbXAiOiAgIjIwMjUtMTAtMjBUMTg6MDg6MDUiLAogICAgICAgICJwaGFzZSI6ICAiUDMgLSBXZWlnaHRlZCBPSSArIFRvcCBML1MgKyBBbGVydHMiLAogICAgICAgICJiYWNrZW5kIjogICJoZWFsdGh5IiwKICAgICAgICAidXB0aW1lUGN0IjogIDUxLjI3LAogICAgICAgICJ0b3RhbF9ydW50aW1lIjogIDEyMDAwLjA4LAogICAgICAgICJkb3dudGltZSI6ICA1ODQ3LjE2LAogICAgICAgICJzdGF0dXMiOiAgImFjdGl2ZSIKICAgIH0sCiAgICB7CiAgICAgICAgInRpbWVzdGFtcCI6ICAiMjAyNS0xMC0yMFQxODoxMzowMiIsCiAgICAgICAgInBoYXNlIjogICJQMyAtIFdlaWdodGVkIE9JICsgVG9wIEwvUyArIEFsZXJ0cyIsCiAgICAgICAgImJhY2tlbmQiOiAgImhlYWx0aHkiLAogICAgICAgICJ1cHRpbWVQY3QiOiAgNTIuNDYsCiAgICAgICAgInRvdGFsX3J1bnRpbWUiOiAgMTIzMDAuMDgsCiAgICAgICAgImRvd250aW1lIjogIDU4NDcuMTYsCiAgICAgICAgInN0YXR1cyI6ICAiYWN0aXZlIgogICAgfSwKICAgIHsKICAgICAgICAidGltZXN0YW1wIjogICIyMDI1LTEwLTIwVDE4OjEzOjA1IiwKICAgICAgICAicGhhc2UiOiAgIlAzIC0gV2VpZ2h0ZWQgT0kgKyBUb3AgTC9TICsgQWxlcnRzIiwKICAgICAgICAiYmFja2VuZCI6ICAiaGVhbHRoeSIsCiAgICAgICAgInVwdGltZVBjdCI6ICA1Mi40NiwKICAgICAgICAidG90YWxfcnVudGltZSI6ICAxMjMwMC4wOCwKICAgICAgICAiZG93bnRpbWUiOiAgNTg0Ny4xNiwKICAgICAgICAic3RhdHVzIjogICJhY3RpdmUiCiAgICB9LAogICAgewogICAgICAgICJ0aW1lc3RhbXAiOiAgIjIwMjUtMTAtMjBUMTg6MTg6MDIiLAogICAgICAgICJwaGFzZSI6ICAiUDMgLSBXZWlnaHRlZCBPSSArIFRvcCBML1MgKyBBbGVydHMiLAogICAgICAgICJiYWNrZW5kIjogICJoZWFsdGh5IiwKICAgICAgICAidXB0aW1lUGN0IjogIDUzLjU5LAogICAgICAgICJ0b3RhbF9ydW50aW1lIjogIDEyNjAwLjA4LAogICAgICAgICJkb3dudGltZSI6ICA1ODQ3LjE2LAogICAgICAgICJzdGF0dXMiOiAgImFjdGl2ZSIKICAgIH0KXQo=",
        "summary": "92L | continuity_log.json | .json | 2.7 KB"
      },
      {
        "path": "docs\\continuity_state.json",
        "type": ".json",
        "size_kb": 0.8,
        "content": "77u/ewogICAgInRpbWVzdGFtcCI6ICAiMjAyNS0xMC0yMSAxNzoxNjoyMiIsCiAgICAicGhhc2UiOiAgIlAzLjYgLSBVVEY4IExvZ2dpbmcgKyBRdWFudFN1bW1hcnkgU3RhYmxlIiwKICAgICJiYWNrZW5kIjogICJ1bmhlYWx0aHkiLAogICAgInVwdGltZVBjdCI6ICAxMDAsCiAgICAiZmlsZV9oYXNoZXMiOiAgewogICAgICAgICAgICAgICAgICAgICAgICAibWV0cmljcy5weSI6ICAiMTcyRTM5MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJibHVlcHJpbnQucHkiOiAgIjJFMzBGMDEiLAogICAgICAgICAgICAgICAgICAgICAgICAidXRpbHMucHkiOiAgIjUzQzdCQUUiLAogICAgICAgICAgICAgICAgICAgICAgICAiYmluYW5jZV93c19jbGllbnQucHkiOiAgIjc3OTQ3RDkiLAogICAgICAgICAgICAgICAgICAgICAgICAid3NnaS5weSI6ICAiQUZFQTdGNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBcHAuanN4IjogICJGM0Q4NTI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgImFwcC5weSI6ICAiQzE5QTE2NyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJkYi5weSI6ICAiODMxQTBDOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjbGkucHkiOiAgIjA0MEQ1MjQiLAogICAgICAgICAgICAgICAgICAgICAgICAic2NyYXBlci5weSI6ICAiRUJERDYzRiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb25maWcucHkiOiAgIjk3NEZDRUEiLAogICAgICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi5weSI6ICAiQTI4NTQ4QiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJfX2luaXRfXy5weSI6ICAiRDI4MzVCRiIKICAgICAgICAgICAgICAgICAgICB9Cn0K",
        "summary": "21L | continuity_state.json | .json | 0.8 KB"
      },
      {
        "path": "docs\\continuity_state.md",
        "type": ".md",
        "size_kb": 1.3,
        "content": "77u/IyBDb250aW51aXR5IFN0YXRlIC0gQ3J5cHRvIEZ1dHVyZXMgRGFzaGJvYXJkCkxhc3QgU3luYzogMjAyNS0xMC0yMSAxNzoxNjoyMgpQaGFzZTogUDMuNiAtIFVURjggTG9nZ2luZyArIFF1YW50U3VtbWFyeSBTdGFibGUKCiMjIENvcmUgRmlsZSBWZXJzaW9ucwp8IG1ldHJpY3MucHkgfCAyMDI1LTEwLTIxIDE3OjE2OjIyIHwgMTcyRTM5MSB8CnwgYmx1ZXByaW50LnB5IHwgMjAyNS0xMC0yMSAxNzoxNjoyMiB8IDJFMzBGMDEgfAp8IHV0aWxzLnB5IHwgMjAyNS0xMC0yMSAxNzoxNjoyMiB8IDUzQzdCQUUgfAp8IGJpbmFuY2Vfd3NfY2xpZW50LnB5IHwgMjAyNS0xMC0yMSAxNzoxNjoyMiB8IDc3OTQ3RDkgfAp8IHdzZ2kucHkgfCAyMDI1LTEwLTIxIDE3OjE2OjIyIHwgQUZFQTdGNiB8CnwgQXBwLmpzeCB8IDIwMjUtMTAtMjEgMTc6MTY6MjIgfCBGM0Q4NTI0IHwKfCBhcHAucHkgfCAyMDI1LTEwLTIxIDE3OjE2OjIyIHwgQzE5QTE2NyB8CnwgZGIucHkgfCAyMDI1LTEwLTIxIDE3OjE2OjIyIHwgODMxQTBDOCB8CnwgY2xpLnB5IHwgMjAyNS0xMC0yMSAxNzoxNjoyMiB8IDA0MEQ1MjQgfAp8IHNjcmFwZXIucHkgfCAyMDI1LTEwLTIxIDE3OjE2OjIyIHwgRUJERDYzRiB8CnwgY29uZmlnLnB5IHwgMjAyNS0xMC0yMSAxNzoxNjoyMiB8IDk3NEZDRUEgfAp8IHZlcnNpb24ucHkgfCAyMDI1LTEwLTIxIDE3OjE2OjIyIHwgQTI4NTQ4QiB8CnwgX19pbml0X18ucHkgfCAyMDI1LTEwLTIxIDE3OjE2OjIyIHwgRDI4MzVCRiB8CgojIyBCYWNrZW5kIEhlYWx0aApIZWFsdGggY2hlY2sgZmFpbGVkCgojIyBSZWNlbnQgU25hcHNob3RzCnwgVGltZXN0YW1wIHwgQmFja2VuZCB8IFBoYXNlIHwKfC0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tfC0tLS0tLS18CnwgMjAyNS0xMC0yMFQyMzoyNDoyOCB8IEdyZWVuIChoZWFsdGh5KSB8IFAzIC0gV2VpZ2h0ZWQgT0kgKyBUb3AgTC9TICsgQWxlcnRzIHwKfCAyMDI1LTEwLTIwVDIzOjI5OjI1IHwgR3JlZW4gKGhlYWx0aHkpIHwgUDMgLSBXZWlnaHRlZCBPSSArIFRvcCBML1MgKyBBbGVydHMgfAp8IDIwMjUtMTAtMjBUMTc6NTk6MjcgfCBHcmVlbiAoaGVhbHRoeSkgfCBQMyAtIFdlaWdodGVkIE9JICsgVG9wIEwvUyArIEFsZXJ0cyB8CnwgMjAyNS0xMC0yMFQxODowMzowMiB8IEdyZWVuIChoZWFsdGh5KSB8IFAzIC0gV2VpZ2h0ZWQgT0kgKyBUb3AgTC9TICsgQWxlcnRzIHwKfCAyMDI1LTEwLTIwVDE4OjAzOjA1IHwgR3JlZW4gKGhlYWx0aHkpIHwgUDMgLSBXZWlnaHRlZCBPSSArIFRvcCBML1MgKyBBbGVydHMgfApVcHRpbWUgKGxhc3QgMTApOiAxMC8xMCAtPiAxMDAlCgo=",
        "summary": "32L | continuity_state.md | .md | 1.3 KB"
      },
      {
        "path": "docs\\gen_blueprint.py",
        "type": ".py",
        "size_kb": 3.4,
        "content": "IyBnZW5fYmx1ZXByaW50LnB5IHYxLjQgKE9jdCAyMCwgMjAyNSkg4oCUIENyb3NzLURyaXZlIEZpeCArIER1cGUgR3VhcmQKIyBSdW46IGNkIGRvY3MgOyBweXRob24gZ2VuX2JsdWVwcmludC5weQppbXBvcnQgc3FsaXRlMwppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBudW1weSBhcyBucAppbXBvcnQgcmUKaW1wb3J0IHRlbXBmaWxlCmltcG9ydCBvcwppbXBvcnQgc2h1dGlsCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQoKREJfUEFUSCA9IFBhdGgociJFOlxUcmFkaW5nXGNyeXB0by1mdXR1cmVzLWRhc2hib2FyZFxmdXR1cmVzLmRiIikKTURfUEFUSCA9IFBhdGgoInF1YW50X2JsdWVwcmludC5tZCIpCgpkZWYgY2xlYW5fb2xkX2twaShjb250ZW50OiBzdHIpIC0+IHN0cjoKICAgICIiIlphcCBvbGQgJyMjIEF1dG8tS1BJJyBibG9ja3MgdG8gcHJldmVudCBkdXBlcy4iIiIKICAgIHBhdHRlcm4gPSByIiMjIEF1dG8tS1BJIFVwZGF0ZS4qPyg/PVxuIyMgfFxaKSIKICAgIHJldHVybiByZS5zdWIocGF0dGVybiwgIiIsIGNvbnRlbnQsIGZsYWdzPXJlLkRPVEFMTCkKCmRlZiBzYWZlX3dyaXRlKHBhdGg6IHN0ciwgZGF0YTogc3RyKToKICAgICIiIlRlbXAgaW4gc2FtZSBkaXIgKyBzaHV0aWwubW92ZSBmb3IgY3Jvc3MtZHJpdmUgc2FmZS4iIiIKICAgIGRpcl9wYXRoID0gb3MucGF0aC5kaXJuYW1lKHBhdGgpIG9yICIuIgogICAgd2l0aCB0ZW1wZmlsZS5OYW1lZFRlbXBvcmFyeUZpbGUobW9kZT0idyIsIGRlbGV0ZT1GYWxzZSwgZW5jb2Rpbmc9InV0Zi04Iiwgc3VmZml4PSIubWQiLCBkaXI9ZGlyX3BhdGgpIGFzIHRtcDoKICAgICAgICB0bXAud3JpdGUoZGF0YSkKICAgICAgICB0bXBfcGF0aCA9IHRtcC5uYW1lCiAgICB0cnk6CiAgICAgICAgc2h1dGlsLm1vdmUodG1wX3BhdGgsIHBhdGgpICAjIEhhbmRsZXMgY3Jvc3MtZGV2aWNlCiAgICBleGNlcHQgc2h1dGlsLkVycm9yOgogICAgICAgIG9zLnJlcGxhY2UodG1wX3BhdGgsIHBhdGgpICAjIEZhbGxiYWNrIHNhbWUtZGV2aWNlCgpkZWYgbWFpbigpOgogICAgcHJpbnQoZiJbaV0gREI6IHtEQl9QQVRIfSB8IE1EOiB7TURfUEFUSH0iKQogICAga3BpID0gIiIKCiAgICAjIENvbm4gKyBxdWVyeSAod2l0aCBndWFyZDsgY29sPXZvbF91c2QgbWF0Y2ggc2VlZCkKICAgIHRyeToKICAgICAgICB3aXRoIHNxbGl0ZTMuY29ubmVjdChEQl9QQVRIKSBhcyBjb246CiAgICAgICAgICAgIGN1ciA9IGNvbi5jdXJzb3IoKQogICAgICAgICAgICBjdXIuZXhlY3V0ZSgiU0VMRUNUIENPVU5UKCopIEZST00gbWV0cmljcyIpCiAgICAgICAgICAgIHRvdGFsX3Jvd3MgPSBjdXIuZmV0Y2hvbmUoKVswXQogICAgICAgICAgICBwcmludChmIlvinJNdIFJvd3MgVG90YWw6IHt0b3RhbF9yb3dzfSIpCgogICAgICAgICAgICBjdXIuZXhlY3V0ZSgiU0VMRUNUIENPVU5UKCopIEZST00gbWV0cmljcyBXSEVSRSBvaV9hYnNfdXNkID4gMCBBTkQgdm9sX3VzZCA+IDAiKQogICAgICAgICAgICB2YWxpZF9yb3dzID0gY3VyLmZldGNob25lKClbMF0KICAgICAgICAgICAgcHJpbnQoZiJb4pyTXSBWYWxpZCBPSS9Wb2w6IHt2YWxpZF9yb3dzfSIpCgogICAgICAgICAgICBkZiA9IHBkLnJlYWRfc3FsKCJTRUxFQ1Qgb2lfYWJzX3VzZCwgdm9sX3VzZCBGUk9NIG1ldHJpY3MgT1JERVIgQlkgdGltZXN0YW1wIERFU0MgTElNSVQgMjAiLCBjb24pCiAgICAgICAgICAgIHByaW50KGYiW+Kck10gUXVlcnkgUm93czoge2xlbihkZil9IikKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChmIlvinJddIENvbm4gRXJyb3I6IHtlfSIpCiAgICAgICAgZGYgPSBwZC5EYXRhRnJhbWUoKQoKICAgICMgS1BJIGdlbgogICAgaWYgZGYuZW1wdHk6CiAgICAgICAga3BpID0gIiMjIEF1dG8tS1BJIFVwZGF0ZSAoTm8gRGF0YSlcbnwgV2VpZ2h0ZWQgT0kgfCBDdXJyZW50IHxcbnwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXxcbnwgJDAuMDBCIHwgTm8gcm93cyB8XG4iCiAgICBlbGlmIGRmWyJ2b2xfdXNkIl0uZmlsbG5hKDApLnN1bSgpID09IDA6CiAgICAgICAga3BpID0gZiIjIyBBdXRvLUtQSSBVcGRhdGUgKFplcm8vTmFOIFZvbClcbnwgV2VpZ2h0ZWQgT0kgfCBDdXJyZW50IHxcbnwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXxcbnwgJDAuMDBCIHwgQXZnIHtsZW4oZGYpfSBwYWlycyB8XG4iCiAgICBlbHNlOgogICAgICAgIGRmX2NsZWFuID0gZGYuZHJvcG5hKHN1YnNldD1bIm9pX2Fic191c2QiLCAidm9sX3VzZCJdKQogICAgICAgIGlmIGRmX2NsZWFuLmVtcHR5OgogICAgICAgICAgICBrcGkgPSAiIyMgQXV0by1LUEkgVXBkYXRlIChBbGwgTmFOKVxufCBXZWlnaHRlZCBPSSB8IEN1cnJlbnQgfFxufC0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfFxufCAkMC4wMEIgfCBObyB2YWxpZCByb3dzIHxcbiIKICAgICAgICBlbHNlOgogICAgICAgICAgICB3ZWlnaHRzID0gZGZfY2xlYW5bInZvbF91c2QiXSAvIGRmX2NsZWFuWyJ2b2xfdXNkIl0uc3VtKCkKICAgICAgICAgICAgd19vaSA9IG5wLmF2ZXJhZ2UoZGZfY2xlYW5bIm9pX2Fic191c2QiXSwgd2VpZ2h0cz13ZWlnaHRzKQogICAgICAgICAgICBrcGkgPSBmIiMjIEF1dG8tS1BJIFVwZGF0ZSAoV2VpZ2h0ZWQgT0kgVGVhc2Uge2RhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTScpfSlcbnwgV2VpZ2h0ZWQgT0kgfCBDdXJyZW50IHxcbnwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXxcbnwgJHt3X29pLzFlOTouMmZ9QiB8IEF2ZyB7bGVuKGRmX2NsZWFuKX0gcGFpcnMgfFxuIgoKICAgICMgQ2xlYW4gKyB3cml0ZSAobm8gZHVwZTsgc2FmZSBzd2FwKQogICAgdHJ5OgogICAgICAgIGlmIE1EX1BBVEguZXhpc3RzKCk6CiAgICAgICAgICAgIHdpdGggb3BlbihNRF9QQVRILCAiciIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgICAgICAgICBjb250ZW50ID0gY2xlYW5fb2xkX2twaShmLnJlYWQoKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBjb250ZW50ID0gIiMgUXVhbnQgQmx1ZXByaW50XG4iCiAgICAgICAgdXBkYXRlZCA9IGNvbnRlbnQgKyAiXG4iICsga3BpCiAgICAgICAgc2FmZV93cml0ZShNRF9QQVRILCB1cGRhdGVkKQogICAgICAgIHByaW50KGYiW+Kck10gTUQgVXBkYXRlZDoge3dfb2kvMWU5Oi4yZiBpZiAnd19vaScgaW4gbG9jYWxzKCkgZWxzZSAwOi4yZn1CIHwgU2luZ2xlIEtQSSIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiJb4pyXXSBXcml0ZSBFcnJvcjoge2V9IikKCiAgICBwcmludChrcGkpICAjIEVjaG8KCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCk=",
        "summary": "84L | gen_blueprint.py | .py | 3.4 KB"
      },
      {
        "path": "docs\\gen_tracker.py",
        "type": ".py",
        "size_kb": 3.2,
        "content": "IyBSdW46IFBTOiBjZCBkb2NzIDsgcHl0aG9uIGdlbl90cmFja2VyLnB5IChBcHBlbmRzIEtQSSByb3cgdy8gZ2l0IGRpZmY7IHVzZXMgJzVtJyBkYXRhKSAgCmltcG9ydCBzcWxpdGUzICAKaW1wb3J0IHBhbmRhcyBhcyBwZCAgCmltcG9ydCBzdWJwcm9jZXNzICAjIE5ldzogR2l0IGRpZmYgdGVhc2UKaW1wb3J0IG9zCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpjb24gPSBzcWxpdGUzLmNvbm5lY3QocidFOlxUcmFkaW5nXGNyeXB0by1mdXR1cmVzLWRhc2hib2FyZFxiYWNrZW5kXHNyY1xmdXR1cmVzYm9hcmRcZnV0dXJlcy5kYicpCiMgQXV0by1maXggTlVMTCB0ZiAgCmNvbi5leGVjdXRlKCJVUERBVEUgbWV0cmljcyBTRVQgdGltZWZyYW1lID0gJzVtJyBXSEVSRSB0aW1lZnJhbWUgSVMgTlVMTCIpICAKY29uLmNvbW1pdCgpICAKdHJ5OiAgCiAgIyBUcnkgJzE1bScgZmlyc3QsIGZhbGxiYWNrIHRvICc1bScgb3IgdG90YWwgIAogICMgTDE1IEZpeDogQ2hhaW4gZmFsbGJhY2sgJzE1bScg4oaSICc1bScg4oaSIHRvdGFsIGlmIDAKICBkZiA9IHBkLnJlYWRfc3FsKCJTRUxFQ1QgQVZHKHpfc2NvcmUpIGFzIGF2Z196LCBDT1VOVCgqKSBhcyByb3dzIEZST00gbWV0cmljcyBXSEVSRSB0aW1lZnJhbWU9JzE1bSciLCBjb24pCiAgaWYgZGZbJ3Jvd3MnXVswXSA9PSAwOgogICAgICBkZiA9IHBkLnJlYWRfc3FsKCJTRUxFQ1QgQVZHKHpfc2NvcmUpIGFzIGF2Z196LCBDT1VOVCgqKSBhcyByb3dzIEZST00gbWV0cmljcyBXSEVSRSB0aW1lZnJhbWU9JzVtJyIsIGNvbikKICAgICAgaWYgZGZbJ3Jvd3MnXVswXSA9PSAwOgogICAgICAgICAgZGYgPSBwZC5yZWFkX3NxbCgiU0VMRUNUIEFWRyh6X3Njb3JlKSBhcyBhdmdfeiwgQ09VTlQoKikgYXMgcm93cyBGUk9NIG1ldHJpY3MiLCBjb24pICAjIFRvdGFsIGZhbGxiYWNrCiAgcHJpbnQoZiJRdWVyeSBmYWxsYmFjazogdGY9JzE1bScgcm93cyB7ZGZbJ3Jvd3MnXVswXX0gKGNoYWluIHRvICc1bScvdG90YWwgaWYgMCkiKQogICMgT3B0aW06IEdpdCBkaWZmIGFwcGVuZCAoZmlsZXNfY2hhbmdlZCBlbnYgb3IgZGVmYXVsdCAwKQogIGZpbGVzX2NoYW5nZWQgPSBpbnQob3MuZ2V0ZW52KCdGSUxFU19DSEFOR0VEJywgJzAnKSkKICB0cyA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSDolTSIpCiAgcm93ID0gZiJ8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoe2ZpbGVzX2NoYW5nZWR9IGZpbGVzLCB7dHN9KSB8XG4iICAjIFRlYXNlIGFwcGVuZCAoZWRpdCBwaGFzZS9wY3QpCiAgd2l0aCBvcGVuKCJxdWFudF9wcm9ncmVzc190cmFja2VyLm1kIiwgImEiLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmOiAgIyBOZXc6ID4+IE1EIHZzIHByaW50CiAgICAgIGYud3JpdGUocm93KQogIHByaW50KGYiQXBwZW5kZWQgS1BJIHJvdzoge3Jvdy5zdHJpcCgpfSIpCiAgcHJpbnQoInwgQXZnIFotU2NvcmUgKCc1bScpIHwgREIgUm93cyAoJzVtJykgfCIpICAKICBwcmludCgifC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfCIpICAKICAjIEwyNiBGaXg6IE5vbmUgZ3VhcmQgZm9yIGF2Z196IChOL0EgaWYgcm93cz09MCkKICBhdmdfel92YWwgPSBkZlsnYXZnX3onXS5maWxsbmEoMClbMF0gaWYgZGZbJ3Jvd3MnXVswXSA+IDAgZWxzZSAnTi9BJwogIHByaW50KGYifCB7YXZnX3pfdmFsfSB8IHtkZlsncm93cyddWzBdfSB8IikgCmV4Y2VwdCBzcWxpdGUzLk9wZXJhdGlvbmFsRXJyb3IgYXMgZTogIAogIGlmICd6X3Njb3JlJyBpbiBzdHIoZSk6ICAKICAgIHByaW50KCIjIyBEQiBOb3RlOiB6X3Njb3JlIG1pc3Npbmcg4oCTIFJ1biBhbHRlcl9kYi5weSArIHJlLXNlZWQiKSAgCiAgICBkZiA9IHBkLnJlYWRfc3FsKCJTRUxFQ1QgQVZHKGdsb2JhbF9scykgYXMgYXZnX2xzLCBDT1VOVCgqKSBhcyByb3dzIEZST00gbWV0cmljcyIsIGNvbikgIAogICAgcm93ID0gZiJ8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoel9zY29yZSBwZW5kaW5nLCB7dHN9KSB8XG4iCiAgICB3aXRoIG9wZW4oInF1YW50X3Byb2dyZXNzX3RyYWNrZXIubWQiLCAiYSIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgZi53cml0ZShyb3cpCiAgICBwcmludChmIkFwcGVuZGVkIGZhbGxiYWNrIHJvdzoge3Jvdy5zdHJpcCgpfSIpCiAgICBwcmludCgifCBBdmcgR2xvYmFsIExTIChUb3RhbCkgfCBEQiBSb3dzIChUb3RhbCkgfCIpICAKICAgIHByaW50KCJ8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tfCIpICAKICAgIHByaW50KGYifCB7ZGZbJ2F2Z19scyddWzBdOi4yZn0gfCB7ZGZbJ3Jvd3MnXVswXX0gfCIpICAKICBlbHNlOiAgCiAgICByYWlzZSBlICAKCiMgT3B0aW0gVGVhc2U6IFotcm9sbCBwbG90IChtYXRwbG90bGliOyBzYXZlIHBuZyBlbWJlZCkg4oCTIEJlZm9yZSBjb24uY2xvc2UoKQp0cnk6CiAgICBpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CiAgICBkZl9wbG90ID0gcGQucmVhZF9zcWwoIlNFTEVDVCB6X3Njb3JlLCB0aW1lc3RhbXAgRlJPTSBtZXRyaWNzIE9SREVSIEJZIHRpbWVzdGFtcCBERVNDIExJTUlUIDEwMCIsIGNvbikKICAgIGRmX3Bsb3RbJ3RpbWVzdGFtcCddID0gcGQudG9fZGF0ZXRpbWUoZGZfcGxvdFsndGltZXN0YW1wJ10pCiAgICBkZl9wbG90LnNldF9pbmRleCgndGltZXN0YW1wJywgaW5wbGFjZT1UcnVlKQogICAgZGZfcGxvdFsnel9yb2xsJ10gPSBkZl9wbG90Wyd6X3Njb3JlJ10ucm9sbGluZygyMCkubWVhbigpCiAgICBwbHQucGxvdChkZl9wbG90Wyd6X3JvbGwnXSkKICAgIHBsdC50aXRsZSgnWi1Sb2xsIE1lYW4gVHJlbmQgKExhc3QgMTAwKScpCiAgICBwbHQuc2F2ZWZpZygnel90cmVuZC5wbmcnLCBkcGk9MTAwLCBiYm94X2luY2hlcz0ndGlnaHQnKQogICAgcHJpbnQoIlotdHJlbmQgcGxvdCBzYXZlZDogel90cmVuZC5wbmcgKGVtYmVkIGluIHByb2dyZXNzX3RyYWNrZXIubWQpIikKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcHJpbnQoIk1hdHBsb3RsaWIgbWlzc2luZzogcGlwIGluc3RhbGwgbWF0cGxvdGxpYiAoYmFja2VuZC9yZXFzLnR4dCkiKQpleGNlcHQgRXhjZXB0aW9uIGFzIHBsb3RfZToKICAgIHByaW50KGYiUGxvdCBlcnJvcjoge3Bsb3RfZX0gLSBDaGVjayBEQiByb3dzID4xMDAiKQpjb24uY2xvc2UoKQ==",
        "summary": "62L | gen_tracker.py | .py | 3.2 KB"
      },
      {
        "path": "docs\\project_context_v3.json",
        "type": ".json",
        "size_kb": 0.6,
        "content": "77u/ewogICAgInRpbWVzdGFtcCI6ICAiMjAyNS0xMC0yMSAxNzoxNjoyMiIsCiAgICAicGhhc2UiOiAgIlAzLjYgLSBVVEY4IExvZ2dpbmcgKyBRdWFudFN1bW1hcnkgU3RhYmxlIiwKICAgICJiYWNrZW5kX2hlYWx0aCI6ICAiSGVhbHRoIGNoZWNrIGZhaWxlZCIsCiAgICAiYmFja2VuZF9jb25maWciOiAgewoKICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgInNhbXBsZV9tZXRyaWMiOiAgewoKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAicmVwb19zdW1tYXJ5IjogIHsKCiAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAidXB0aW1lX3BjdCI6ICAxMDAsCiAgICAiYmFja2VuZF9uYW1lIjogICJmdXR1cmVzYm9hcmQiLAogICAgImRiX3BhdGgiOiAgImJhY2tlbmQvc3JjL2Z1dHVyZXNib2FyZC9mdXR1cmVzLmRiIiwKICAgICJzeXN0ZW0iOiAgewogICAgICAgICAgICAgICAgICAgIm5vZGUiOiAgInYyMi4yMC4wIiwKICAgICAgICAgICAgICAgICAgICJ1c2VyIjogICJMaWFuIiwKICAgICAgICAgICAgICAgICAgICJvcyI6ICAiTWljcm9zb2Z0IFdpbmRvd3MgMTAgUHJvIiwKICAgICAgICAgICAgICAgICAgICJweXRob24iOiAgIlB5dGhvbiAzLjEzLjEiCiAgICAgICAgICAgICAgIH0KfQo=",
        "summary": "23L | project_context_v3.json | .json | 0.6 KB"
      },
      {
        "path": "docs\\quant_blueprint.md",
        "type": ".md",
        "size_kb": 7.1,
        "content": "",
        "summary": "93L | quant_blueprint.md | .md | 7.1 KB"
      },
      {
        "path": "docs\\quant_progress_tracker.md",
        "type": ".md",
        "size_kb": 7.4,
        "content": "IyBRdWFudCBQcm9ncmVzcyBUcmFja2VyIHYxLjAgKEdyb2stU3R5bGUpIOKAkyBPY3QgMTgsIDIwMjUgIApQcm9qZWN0OiBDcnlwdG8gRnV0dXJlcyBEYXNoYm9hcmQgfCBWaXNpb246IFAyIDk1JSDihpIgUDMgV2VpZ2h0ZWQgT0kvQWxlcnRzICh2Mi4zKSB8IFNjYW46IFJhdyBHaXQgVVJMIGZvciBkaWZmcy4gIApPd25lcjogTGlhbiBJc2FhYyB8IExhc3QgR2VuOiAyMDI1LTEwLTE4IHwgQXV0by1VcGRhdGU6IFBTOiBweXRob24gZG9jcy9nZW5fdHJhY2tlci5weSAgCgojIyBQaGFzZSBDaGVja2xpc3RzICh2Mi4zIE1hdHJpeCDigJMgUXVhbnQgVGFza3MpICAKfCBQaGFzZSB8ICUgQ29tcGxldGUgfCBDaGVja2xpc3QgKFRhc2tzICsgUXVhbnQgVGllcykgfCBTdGF0dXMgfCBOb3Rlcy9Db21taXRzIHwgIAp8LS0tLS0tLXwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfCAgCnwgMS41IFNjYWZmb2xkIHwgMTAwJSB8IFt4XSBTZWVkIDIwIHBhaXJzIG1vY2sgKE9JL0xTIGZpbml0ZSk8YnI+W3hdIFdTIGVtaXQgYmF0Y2ggKFNlbWFwaG9yZSg4KS9qaXR0ZXI8MTBzKTxicj5beF0gVHJlbW9yIHRhYmxlIHN0YWJsZSAobm8gYmxhbmtzIDVtaW4pIHwg4pyFIHwgc2NyYXBlci5weSBxdWV1ZTsgQ29tbWl0OiB2MS4zOSB8ICAKfCAxIE1WUCB8IDEwMCUgfCBbeF0gOSsgbGluZXMgY2hhcnQgKHByaWNlL09JL0xTzpQvaW1iL0NWRC9SU0kvWik8YnI+W3hdIFRvYXN0IFRpZXIxIChaPjIuNS9MUz4yKTxicj5beF0gdGYgYmluZCBkZWx0YXMgKGxzX2RlbHRhX3BjdCAwLjA1IEVUSCBmaW5pdGUpIHwg4pyFIHwgbWV0cmljcy5weSBaLWNhbGM7IFRyYWRpbmdDaGFydC5qc3ggfCAgCnwgMiBDb3JlIHwgOTUlIHwgW3hdIHRmIHN3aXRjaCA1bS0xaCAoP2FyZyArIExvY2FsRm9yYWdlIHBlci10Zik8YnI+W3hdIEV4cG9ydHMgQ1NWL1BERiAoMTAgY29scyAkZm10KTxicj5bIF0gQ29uZmx1ZW5jZSBzY29yZSBlbWl0IChUaWVyMiA+MC42Nik8YnI+W3hdIEZpbml0ZSBndWFyZHMgYWxsIChucC5pc2Zpbml0ZSBaPDEwKSB8IPCflIQgfCBkYi5weSB0ZiBURVhUOyBBcHAuanN4IFBhcGEvanNQREYg4oCTIEZpeDogT3BlcmF0aW9uYWxFcnJvciBnb25lIHwgIAp8IDMgQWR2IHwgMjAlIHwgWyBdIFdlaWdodGVkIE9JIGNhbGMgKM6jKE9Jwrd2b2wpL86jKHZvbCk7IEJ5Yml0IHRlYXNlKTxicj5bIF0gVGllcjIgYWxlcnRzIHRvYXN0L3NvdW5kIChjb25mbHVlbmNlPjAuNjYpPGJyPlsgXSAxZCB0ZiArIDIwMCB2aXJ0IHBhaXJzIChSZWRpcyBwdWIvc3ViKTxicj5bIF0gWiBmYWxzZS1wb3MgPDUlICgyNGggbG9nKSB8IOKdjCB8IG1ldHJpY3MucHkgd2VpZ2h0ZWQgc25pcHBldDsgVGFyZ2V0IE5vdiAxIHwgIAp8IDQgR3JhbmQgfCAwJSB8IFsgXSAvYXBpL3JlcGxheSBiaXNlY3QgKHRzIGpvaW5zICsgUG5MIHNpbSk8YnI+WyBdIENvcnIgbWF0cml4IHIgKHRvcC0yMCBPSS9wcmljZTsgPjYwJSBoaXQpPGJyPlsgXSBUcmFkZSBsb2cgSlNPTiAoZW50cnkvZXhpdCBPQlYvUlNJKSB8IOKdjCB8IHJlcGxheV9lbmdpbmUucHkgdGVhc2U7IFRhcmdldCBEZWMgMSB8ICAKCiMjIFF1YW50IEtQSXMgKEF1dG8tR2VuIGZyb20gREIvTG9ncyDigJMgUnVuIGdlbl90cmFja2VyLnB5KSAgCnwgS1BJIHwgQ3VycmVudCB8IFRhcmdldCB8IE1lYXN1cmUgKFNuaXBwZXQpIHwgVHJlbmQgfCAgCnwtLS0tLXwtLS0tLS0tLS18LS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfCAgCnwgREIgUm93cyAodGY9MTVtKSB8IDMwMCB8ID41MDAgfCBgc3FsaXRlMyBmdXR1cmVzLmRiICJTRUxFQ1QgQ09VTlQoKikgRlJPTSBtZXRyaWNzIFdIRVJFIHRpbWVmcmFtZT0nMTVtJyJgIHwg4oaRIFN0YWJsZSB8ICAKfCBBdmcgWi1TY29yZSB8IDEuMjAgfCA8Mi4wIChubyBzcGlrZSBiaWFzKSB8IGBwZC5yZWFkX3NxbCguLi4pLnpfc2NvcmUubWVhbigpYCB8IE5ldXRyYWwgKGZpbml0ZSBPSykgfCAgCnwgQWxlcnQgQWNjdXJhY3kgKFRpZXIxKSB8IDk1JSB8ID45NSUgfCBMb2dzOiBncmVwICJhbGVydF90b2FzdCIgLyBmYWxzZS1wb3MgY291bnQgfCBIaWdoICgwIGZhbHNlIDI0aCkgfCAgCnwgV1MgVXB0aW1lIHwgOTkuOSUgfCA5OS45JSB8IC9oZWFsdGggUHJvbWV0aGV1cyB0ZWFzZTsgcmVjb248NS9oIHwgR3JlZW4gfCAgCnwgTGF0ZW5jeSAoTG9vcCkgfCA0LjJzIHwgPDVzIHwgc2NyYXBlciB0aW1pbmcgbG9ncyB8IOKGkyBPcHRpbWl6ZWQgfCAgCnwgQ29uZmx1ZW5jZSBIaXRzIChQMyBUZWFzZSkgfCAwLjMzIChFVEgpIHwgPjAuNjYgVGllcjIgfCBtZXRyaWNzLnB5IGFwcGx5KGNhbGNfY29uZmx1ZW5jZSkgfCBUZWFzZSAoYWRkIGVtaXQpIHwgIAp8IFNpbSBIaXQgUmF0ZSAoUDQpIHwgTi9BIHwgPjYwJSB8IHRyYWRlX3NpbS5weSBQbkwgKGNvZGVfZXhlY3V0aW9uKSB8IFBlbmRpbmcgfCAgCgojIyBFdm9sdXRpb24gVGVhc2UgKFF1YW50IEdyYXBoIOKAkyBjb2RlX2V4ZWN1dGlvbiBQbG90KSAgCmBgYHB5dGhvbiAgCiMgSW4gZ2VuX3RyYWNrZXIucHk6IE1hdHBsb3RsaWIgcm9sbCBaIGF2ZyAoMjAgcGFpcnMpICAKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdDsgaW1wb3J0IHBhbmRhcyBhcyBwZDsgaW1wb3J0IHNxbGl0ZTMgIApjb24gPSBzcWxpdGUzLmNvbm5lY3QoJy4uL2JhY2tlbmQvc3JjL2Z1dHVyZXNib2FyZC9mdXR1cmVzLmRiJyk7IGRmID0gcGQucmVhZF9zcWwoIlNFTEVDVCB6X3Njb3JlLCB0aW1lc3RhbXAgRlJPTSBtZXRyaWNzIExJTUlUIDEwMCIsIGNvbikgIApkZlsndGltZXN0YW1wJ10gPSBwZC50b19kYXRldGltZShkZlsndGltZXN0YW1wJ10pOyBkZi5zZXRfaW5kZXgoJ3RpbWVzdGFtcCcsIGlucGxhY2U9VHJ1ZSkgIApkZlsnel9yb2xsJ10gPSBkZlsnel9zY29yZSddLnJvbGxpbmcoMjApLm1lYW4oKTsgcGx0LnBsb3QoZGZbJ3pfcm9sbCddKTsgcGx0LnRpdGxlKCdaLVJvbGwgTWVhbiBUcmVuZCcpOyBwbHQuc2F2ZWZpZygnLi4vZG9jcy96X3RyZW5kLnBuZycpICAKIyBPdXRwdXQ6IEVtYmVkIDxpbWFnZS1jYXJkIGFsdD0iWiBUcmVuZCIgc3JjPSJ6X3RyZW5kLnBuZyIgPjwvaW1hZ2UtY2FyZD4gaW4gTUQgIHx8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMiBmaWxlcywgMjAyNS0xMC0yMCAxMzoyOCkgfAp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMiBmaWxlcywgMjAyNS0xMC0yMCAxMzozMCkgfAp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMyBmaWxlcywgMjAyNS0xMC0yMCAxMzozNCkgfAp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMyBmaWxlcywgMjAyNS0xMC0yMCAxMzozNykgfAp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMSBmaWxlcywgMjAyNS0xMC0yMCAxMzo0NSkgfAp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMjEgZmlsZXMsIDIwMjUtMTAtMjAgMjI6MTcpIHwKUXVlcnkgZmFsbGJhY2s6IHRmPScxNW0nIHJvd3MgMCAoY2hhaW4gdG8gJzVtJy90b3RhbCBpZiAwKQpBcHBlbmRlZCBLUEkgcm93OiB8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMjEgZmlsZXMsIDIwMjUtMTAtMjAgMjI6MTcpIHwKfCBBdmcgWi1TY29yZSAoJzVtJykgfCBEQiBSb3dzICgnNW0nKSB8CnwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKfCBOL0EgfCAwIHwKWi10cmVuZCBwbG90IHNhdmVkOiB6X3RyZW5kLnBuZyAoZW1iZWQgaW4gcHJvZ3Jlc3NfdHJhY2tlci5tZCkKfCBQMyB8IDI1JSB8IEZyYW1ld29yayB2MS4zIHN5bmMgKDUgZmlsZXMsIDIwMjUtMTAtMjAgMjI6NTcpIHwKUXVlcnkgZmFsbGJhY2s6IHRmPScxNW0nIHJvd3MgMjAgKGNoYWluIHRvICc1bScvdG90YWwgaWYgMCkKQXBwZW5kZWQgS1BJIHJvdzogfCBQMyB8IDI1JSB8IEZyYW1ld29yayB2MS4zIHN5bmMgKDUgZmlsZXMsIDIwMjUtMTAtMjAgMjI6NTcpIHwKfCBBdmcgWi1TY29yZSAoJzVtJykgfCBEQiBSb3dzICgnNW0nKSB8CnwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKfCAwLjAgfCAyMCB8ClotdHJlbmQgcGxvdCBzYXZlZDogel90cmVuZC5wbmcgKGVtYmVkIGluIHByb2dyZXNzX3RyYWNrZXIubWQpCnwgUDMgfCAyNSUgfCBGcmFtZXdvcmsgdjEuMyBzeW5jICgyMiBmaWxlcywgMjAyNS0xMC0yMCAyMjo1OSkgfApRdWVyeSBmYWxsYmFjazogdGY9JzE1bScgcm93cyAyMCAoY2hhaW4gdG8gJzVtJy90b3RhbCBpZiAwKQpBcHBlbmRlZCBLUEkgcm93OiB8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMjIgZmlsZXMsIDIwMjUtMTAtMjAgMjI6NTkpIHwKfCBBdmcgWi1TY29yZSAoJzVtJykgfCBEQiBSb3dzICgnNW0nKSB8CnwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKfCAwLjAgfCAyMCB8ClotdHJlbmQgcGxvdCBzYXZlZDogel90cmVuZC5wbmcgKGVtYmVkIGluIHByb2dyZXNzX3RyYWNrZXIubWQpCnwgUDMgfCAyNSUgfCBGcmFtZXdvcmsgdjEuMyBzeW5jICg1IGZpbGVzLCAyMDI1LTEwLTIwIDIzOjA4KSB8ClF1ZXJ5IGZhbGxiYWNrOiB0Zj0nMTVtJyByb3dzIDIwIChjaGFpbiB0byAnNW0nL3RvdGFsIGlmIDApCkFwcGVuZGVkIEtQSSByb3c6IHwgUDMgfCAyNSUgfCBGcmFtZXdvcmsgdjEuMyBzeW5jICg1IGZpbGVzLCAyMDI1LTEwLTIwIDIzOjA4KSB8CnwgQXZnIFotU2NvcmUgKCc1bScpIHwgREIgUm93cyAoJzVtJykgfAp8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18CnwgMC4wIHwgMjAgfApaLXRyZW5kIHBsb3Qgc2F2ZWQ6IHpfdHJlbmQucG5nIChlbWJlZCBpbiBwcm9ncmVzc190cmFja2VyLm1kKQp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoNCBmaWxlcywgMjAyNS0xMC0yMCAyMzoxMikgfApRdWVyeSBmYWxsYmFjazogdGY9JzE1bScgcm93cyAyMCAoY2hhaW4gdG8gJzVtJy90b3RhbCBpZiAwKQpBcHBlbmRlZCBLUEkgcm93OiB8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoNCBmaWxlcywgMjAyNS0xMC0yMCAyMzoxMikgfAp8IEF2ZyBaLVNjb3JlICgnNW0nKSB8IERCIFJvd3MgKCc1bScpIHwKfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfAp8IDAuMCB8IDIwIHwKWi10cmVuZCBwbG90IHNhdmVkOiB6X3RyZW5kLnBuZyAoZW1iZWQgaW4gcHJvZ3Jlc3NfdHJhY2tlci5tZCkKfCBQMyB8IDI1JSB8IEZyYW1ld29yayB2MS4zIHN5bmMgKDQgZmlsZXMsIDIwMjUtMTAtMjAgMjM6MTMpIHwKUXVlcnkgZmFsbGJhY2s6IHRmPScxNW0nIHJvd3MgMjAgKGNoYWluIHRvICc1bScvdG90YWwgaWYgMCkKQXBwZW5kZWQgS1BJIHJvdzogfCBQMyB8IDI1JSB8IEZyYW1ld29yayB2MS4zIHN5bmMgKDQgZmlsZXMsIDIwMjUtMTAtMjAgMjM6MTMpIHwKfCBBdmcgWi1TY29yZSAoJzVtJykgfCBEQiBSb3dzICgnNW0nKSB8CnwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKfCAwLjAgfCAyMCB8ClotdHJlbmQgcGxvdCBzYXZlZDogel90cmVuZC5wbmcgKGVtYmVkIGluIHByb2dyZXNzX3RyYWNrZXIubWQpCnwgUDMgfCAyNSUgfCBGcmFtZXdvcmsgdjEuMyBzeW5jICgyIGZpbGVzLCAyMDI1LTEwLTIwIDIzOjEzKSB8ClF1ZXJ5IGZhbGxiYWNrOiB0Zj0nMTVtJyByb3dzIDIwIChjaGFpbiB0byAnNW0nL3RvdGFsIGlmIDApCkFwcGVuZGVkIEtQSSByb3c6IHwgUDMgfCAyNSUgfCBGcmFtZXdvcmsgdjEuMyBzeW5jICgyIGZpbGVzLCAyMDI1LTEwLTIwIDIzOjEzKSB8CnwgQXZnIFotU2NvcmUgKCc1bScpIHwgREIgUm93cyAoJzVtJykgfAp8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18CnwgMC4wIHwgMjAgfApaLXRyZW5kIHBsb3Qgc2F2ZWQ6IHpfdHJlbmQucG5nIChlbWJlZCBpbiBwcm9ncmVzc190cmFja2VyLm1kKQp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMiBmaWxlcywgMjAyNS0xMC0yMCAyMzoxNCkgfApRdWVyeSBmYWxsYmFjazogdGY9JzE1bScgcm93cyAyMCAoY2hhaW4gdG8gJzVtJy90b3RhbCBpZiAwKQpBcHBlbmRlZCBLUEkgcm93OiB8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoMiBmaWxlcywgMjAyNS0xMC0yMCAyMzoxNCkgfAp8IEF2ZyBaLVNjb3JlICgnNW0nKSB8IERCIFJvd3MgKCc1bScpIHwKfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfAp8IDAuMCB8IDIwIHwKWi10cmVuZCBwbG90IHNhdmVkOiB6X3RyZW5kLnBuZyAoZW1iZWQgaW4gcHJvZ3Jlc3NfdHJhY2tlci5tZCkKfCBQMyB8IDI1JSB8IEZyYW1ld29yayB2MS4zIHN5bmMgKDQgZmlsZXMsIDIwMjUtMTAtMjAgMjM6MTQpIHwKUXVlcnkgZmFsbGJhY2s6IHRmPScxNW0nIHJvd3MgMjAgKGNoYWluIHRvICc1bScvdG90YWwgaWYgMCkKQXBwZW5kZWQgS1BJIHJvdzogfCBQMyB8IDI1JSB8IEZyYW1ld29yayB2MS4zIHN5bmMgKDQgZmlsZXMsIDIwMjUtMTAtMjAgMjM6MTQpIHwKfCBBdmcgWi1TY29yZSAoJzVtJykgfCBEQiBSb3dzICgnNW0nKSB8CnwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKfCAwLjAgfCAyMCB8ClotdHJlbmQgcGxvdCBzYXZlZDogel90cmVuZC5wbmcgKGVtYmVkIGluIHByb2dyZXNzX3RyYWNrZXIubWQpCnwgUDMgfCAyNSUgfCBGcmFtZXdvcmsgdjEuMyBzeW5jICg0IGZpbGVzLCAyMDI1LTEwLTIwIDIzOjE0KSB8ClF1ZXJ5IGZhbGxiYWNrOiB0Zj0nMTVtJyByb3dzIDIwIChjaGFpbiB0byAnNW0nL3RvdGFsIGlmIDApCkFwcGVuZGVkIEtQSSByb3c6IHwgUDMgfCAyNSUgfCBGcmFtZXdvcmsgdjEuMyBzeW5jICg0IGZpbGVzLCAyMDI1LTEwLTIwIDIzOjE0KSB8CnwgQXZnIFotU2NvcmUgKCc1bScpIHwgREIgUm93cyAoJzVtJykgfAp8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18CnwgMC4wIHwgMjAgfApaLXRyZW5kIHBsb3Qgc2F2ZWQ6IHpfdHJlbmQucG5nIChlbWJlZCBpbiBwcm9ncmVzc190cmFja2VyLm1kKQp8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoNCBmaWxlcywgMjAyNS0xMC0yMCAyMzoyMCkgfApRdWVyeSBmYWxsYmFjazogdGY9JzE1bScgcm93cyAyMCAoY2hhaW4gdG8gJzVtJy90b3RhbCBpZiAwKQpBcHBlbmRlZCBLUEkgcm93OiB8IFAzIHwgMjUlIHwgRnJhbWV3b3JrIHYxLjMgc3luYyAoNCBmaWxlcywgMjAyNS0xMC0yMCAyMzoyMCkgfAp8IEF2ZyBaLVNjb3JlICgnNW0nKSB8IERCIFJvd3MgKCc1bScpIHwKfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfAp8IDAuMCB8IDIwIHwKWi10cmVuZCBwbG90IHNhdmVkOiB6X3RyZW5kLnBuZyAoZW1iZWQgaW4gcHJvZ3Jlc3NfdHJhY2tlci5tZCkK",
        "summary": "113L | quant_progress_tracker.md | .md | 7.4 KB"
      },
      {
        "path": "docs\\README.md",
        "type": ".md",
        "size_kb": 2.4,
        "content": "IyDwn5OaIENyeXB0byBGdXR1cmVzIERhc2hib2FyZCDigJMgRG9jdW1lbnRhdGlvbiBJbmRleAoKX1VwZGF0ZWQ6IDIwMjUtMTAtMjAgfCBWZXJzaW9uOiB2Mi4zIChQaGFzZSAzIOKAkyBXZWlnaHRlZCBPSSAmIEFsZXJ0cylfCgotLS0KCiMjIPCfp60gQ29yZSBPdmVydmlldwoKLSAqKlByb2plY3Q6KiogUmVhbC10aW1lIENyeXB0byBGdXR1cmVzIFF1YW50IERhc2hib2FyZCAgCi0gKipPd25lcjoqKiBMaWFuIElzYWFjICAKLSAqKkJhY2tlbmQ6KiogRmxhc2sgKyBTUUxBbGNoZW15ICsgU29ja2V0SU8gIAotICoqRnJvbnRlbmQ6KiogVml0ZSArIFRyZW1vciArIFJlY2hhcnRzICAKLSAqKlBoYXNlOioqIFAzIOKAkyBXZWlnaHRlZCBPSSwgVG9wIEwvUywgQWxlcnRzICAKLSAqKkdvYWw6KiogRGV0ZWN0IGRpcmVjdGlvbmFsIGJpYXMgKFo+Mi41LCBMUz4yLCBJbWI+MyUpIGFuZCBzaW11bGF0ZSBjb25mbHVlbmNlIOKGkiBQNCByZXBsYXkuCgotLS0KCiMjIPCflJcgRG9jdW1lbnRhdGlvbiBNYXAKCnwgRmlsZSB8IERlc2NyaXB0aW9uIHwgTGFzdCBVcGRhdGVkIHwKfC0tLS0tLS18LS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfAp8IFtjb250aW51aXR5X3N0YXRlLm1kXShjb250aW51aXR5X3N0YXRlLm1kKSB8IExpdmUgc3lzdGVtIHNuYXBzaG90IChhdXRvLXVwZGF0ZWQgYnkgUG93ZXJTaGVsbCkgfCBEeW5hbWljIHwKfCBbYXBpX2d1aWRlLm1kXShhcGlfZ3VpZGUubWQpIHwgUkVTVCArIFdTIGVuZHBvaW50cyByZWZlcmVuY2UgfCAyMDI1LTEwLTE4IHwKfCBbcXVhbnRfYmx1ZXByaW50Lm1kXShxdWFudF9ibHVlcHJpbnQubWQpIHwgQXJjaGl0ZWN0dXJlLCBtZXRyaWNzLCBhbmQgcXVhbnQgZW5naW5lZXJpbmcgYmx1ZXByaW50IHwgMjAyNS0xMC0xOCB8CnwgW3F1YW50X3Byb2dyZXNzX3RyYWNrZXIubWRdKHF1YW50X3Byb2dyZXNzX3RyYWNrZXIubWQpIHwgUHJvZ3Jlc3MgYnkgcGhhc2UsIEtQSXMsIGFuZCBtZXRyaWNzIGV2b2x1dGlvbiB8IDIwMjUtMTAtMTggfAp8IFtyb2FkbWFwLm1kXShyb2FkbWFwLm1kKSB8IEV4ZWN1dGlvbiBtYXRyaXggYWNyb3NzIGJhY2tlbmQsIFVYLCBvcHMgfCAyMDI1LTEwLTE4IHwKfCBbdGVzdGluZ19oYXJuZXNzLm1kXSh0ZXN0aW5nX2hhcm5lc3MubWQpIHwgUHl0ZXN0IGFuZCBxdWFudCB2YWxpZGF0aW9uIGhhcm5lc3MgfCAyMDI1LTEwLTE4IHwKCi0tLQoKIyMg8J+nqSBBdXRvbWF0aW9uIFNjcmlwdHMKCnwgU2NyaXB0IHwgRnVuY3Rpb24gfCBDb21tYW5kIHwKfC0tLS0tLS0tLXwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tfAp8IGBnZW5fYmx1ZXByaW50LnB5YCB8IFVwZGF0ZXMgYmx1ZXByaW50IEtQSXMgYW5kIGZvcm11bGFzIHwgYHB5dGhvbiBkb2NzL2dlbl9ibHVlcHJpbnQucHlgIHwKfCBgZ2VuX3RyYWNrZXIucHlgIHwgVXBkYXRlcyBwaGFzZSBwcm9ncmVzcyAmIEtQSXMgZnJvbSBEQiB8IGBweXRob24gZG9jcy9nZW5fdHJhY2tlci5weWAgfAp8IGBJbnZva2UtQ29udGludWl0eVNuYXBzaG90YCB8IFVwZGF0ZXMgc3lzdGVtIHNuYXBzaG90IGF1dG9tYXRpY2FsbHkgfCBQb3dlclNoZWxsIGZ1bmN0aW9uIHwKCi0tLQoKIyMg8J+nriBRdWFudCBNb2RlbCBTdW1tYXJ5Cgp8IE1ldHJpYyB8IFB1cnBvc2UgfCBQaGFzZSB8CnwtLS0tLS0tLS18LS0tLS0tLS0tLXwtLS0tLS0tfAp8IFotU2NvcmUgfCBEZXZpYXRpb24vQW5vbWFseSBkZXRlY3Rpb24gfCBQMiB8CnwgTFMgUmF0aW8gfCBTZW50aW1lbnQgc2tldyB8IFAxIHwKfCBXZWlnaHRlZCBPSSB8IFZvbHVtZS13ZWlnaHRlZCBPSSBzdHJlbmd0aCB8IFAzIHwKfCBDb25mbHVlbmNlIHwgQ29tYmluZWQgYmlhcyB0cmlnZ2VyIChaL0xTL0ltYikgfCBQMyB8CnwgQ29yciBSZXBsYXkgfCBSb2xsaW5nIGNvcnJlbGF0aW9uIHJlcGxheSBzaW0gfCBQNCB8CgotLS0KCiMjIPCfp7EgUGhhc2UgU3VtbWFyeQoKfCBQaGFzZSB8IEZvY3VzIHwgU3RhdHVzIHwKfC0tLS0tLS0tfC0tLS0tLS0tfC0tLS0tLS0tfAp8IDEuNSB8IFNjYWZmb2xkICsgV1MgRW1pdCB8IOKchSBDb21wbGV0ZSB8CnwgMiB8IENvcmUgVEYgKyBFeHBvcnRzIHwg4pyFIENvbXBsZXRlIHwKfCAzIHwgV2VpZ2h0ZWQgT0kgKyBBbGVydHMgfCDwn5SEIEluIFByb2dyZXNzIHwKfCA0IHwgUmVwbGF5ICsgQ29yciBTaW0gfCDij7MgUGxhbm5lZCB8CgotLS0KCiMjIPCfp6ogVGVzdGluZyBIb29rcwoKUnVuIHRoZSBmdWxsIHZhbGlkYXRpb24gaGFybmVzczoKCmBgYHBvd2Vyc2hlbGwKcHl0ZXN0IC1xCmN1cmwgaHR0cDovL2xvY2FsaG9zdDo1MDAwL2FwaS9tZXRyaWNzP3RmPTE1bSB8IGpxIGxlbmd0aApweXRob24gZG9jcy9nZW5fdHJhY2tlci5weQo=",
        "summary": "71L | README.md | .md | 2.4 KB"
      },
      {
        "path": "docs\\roadmap.md",
        "type": ".md",
        "size_kb": 6.0,
        "content": "",
        "summary": "43L | roadmap.md | .md | 6.0 KB"
      },
      {
        "path": "docs\\testing_harness.md",
        "type": ".md",
        "size_kb": 1.3,
        "content": "IyBUZXN0aW5nIEhhcm5lc3MgdjEuMCDigJMgT2N0IDE4LCAyMDI1CgpGb2N1czogU21va2UgKDw1cyksIEJlbmNoICg8MTBzLzUwIHBhaXJzKSwgUXVhbnQgVmFsIChaIGZpbml0ZS9mYWxzZS1wb3MpLiBSdW46IHB5dGVzdCAtcSA7IGNvZGVfZXhlY3V0aW9uIHNuaXBwZXRzLgoKIyMgUHl0ZXN0IFN1aXRlIChweXRlc3QuaW5pICsgRmlsZXMpCi0gdGVzdF9tZXRyaWNzLnB5OiBgZGVmIHRlc3RfZ2V0X2FsbCgpOiBtZXRyaWNzID0gZ2V0X2FsbF9tZXRyaWNzKHRmPScxNW0nKTsgYXNzZXJ0IGxlbihtZXRyaWNzKSA9PSAyMDsgYXNzZXJ0IGFsbChucC5pc2Zpbml0ZShtWyd6X3Njb3JlJ10pIGZvciBtIGluIG1ldHJpY3MpYAotIHRlc3Rfd3MucHk6IGBkZWYgdGVzdF9lbWl0KCk6IC4uLiBhc3NlcnQgJ21ldHJpY3NfdXBkYXRlJyBpbiBzb2NrZXRpby5ldmVudHNgCi0gQmVuY2g6IGBweXRlc3QgLS1iZW5jaG1hcmstb25seWAgKFRhcmdldDogPDVzIGxvYWQsIG5vIGJsYW5rcykuCgojIyBUb29sIFNuaXBwZXRzIChjb2RlX2V4ZWN1dGlvbikKfCBUZXN0IHwgU25pcHBldCB8IEV4cGVjdGVkIHwKfC0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLXwKfCBaIEZpbml0ZSB8IGBpbXBvcnQgbnVtcHkgYXMgbnA7IHogPSBucC5yYW5kb20ubm9ybWFsKDAsMSwyMCk7IGFzc2VydCBucC5hbGwobnAuaXNmaW5pdGUoeikpICYgKG5wLmFicyh6KSA8IDEwKWAgfCBUcnVlIHwKfCBXZWlnaHRlZCBPSSB8IGBpbXBvcnQgbnVtcHkgYXMgbnA7IG9pID0gbnAuYXJyYXkoWzFlOSwyZTldKTsgdm9scyA9IG5wLmFycmF5KFsxZTksMmU5XSk7IHcgPSBucC5hdmVyYWdlKG9pLCB3ZWlnaHRzPXZvbHMvdm9scy5zdW0oKSk7IHByaW50KHcpYCB8IDEuNjY2ZTkgfAp8IENvbmZsdWVuY2UgfCBgZGVmIGNhbGMoeixscyxpbWIpOiByZXR1cm4gc3VtKFt6PjIuNSwgbHM+MiwgYWJzKGltYik+M10pLzM7IHByaW50KGNhbGMoMi42LDIuMSwtMy4xKSlgIHwgMS4wIHwKfCBEQiBSb3dzIHwgQXMgZ2VuX3RyYWNrZXIucHkgfCA+NTgxIHwKCiMjIDI0aCBIYXJuZXNzIChQUyBDaGFpbikKYGBgcG93ZXJzaGVsbApweXRlc3QgLXEgOyBjdXJsIC9hcGkvbWV0cmljcz90Zj0xNW0gfCBqcSAnbGVuZ3RoJyA7IEdldC1Db250ZW50IGJhY2tlbmQvbG9ncy9hcHAubG9nIC1UYWlsIDEwIHwgU2VsZWN0LVN0cmluZyAiZW1pdHxlcnJvciIgOyBweXRob24gZG9jcy9nZW5fdHJhY2tlci5weQojIE91dHB1dDogLi4uLi4uLi4gMjAgOyBFbWl0dGVkMjAgKG5vIGVycm9yKQ==",
        "summary": "21L | testing_harness.md | .md | 1.3 KB"
      }
    ]
  },
  "metadata": {
    "updated": "2025-10-21 17:21:48",
    "total_files": 67,
    "max_file_size_kb": 976.6
  }
}